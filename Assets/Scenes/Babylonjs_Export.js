// Babylonjs_Export.js
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon animation state pro class (Unity Style Mechanim Animation System)
     * @class AnimationState - All rights reserved (c) 2020 Mackey Kinard
     */
    class AnimationState extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this._frametime = 0;
            this._layercount = 0;
            this._updatemode = 0; // Note: 0 - Transform Node | 1 - Chacracter Controller | 2 - Unscaled Time ???
            this._hasrootmotion = false;
            this._animationplaying = false;
            this._initialtargetblending = false;
            this._hastransformhierarchy = false;
            this._leftfeetbottomheight = 0;
            this._rightfeetbottomheight = 0;
            this._initialRootBonePosition = null;
            this._initialRootBoneRotation = null;
            this._runtimecontroller = null;
            this._executed = false;
            this._checkers = new BABYLON.TransitionCheck();
            this._source = "";
            this._machine = null;
            this._deltaPosition = new BABYLON.Vector3(0, 0, 0);
            this._deltaRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            this._positionWeight = false;
            this._rootBoneWeight = false;
            this._rotationWeight = false;
            this._rootQuatWeight = false;
            this._angularVelocity = new BABYLON.Vector3(0, 0, 0);
            this._positionHolder = new BABYLON.Vector3(0, 0, 0);
            this._rootBoneHolder = new BABYLON.Vector3(0, 0, 0);
            this._rotationHolder = new BABYLON.Quaternion(0, 0, 0, 1);
            this._rootQuatHolder = new BABYLON.Quaternion(0, 0, 0, 1);
            this._rootMotionMatrix = BABYLON.Matrix.Zero();
            this._rootMotionScaling = new BABYLON.Vector3(0, 0, 0);
            this._rootMotionRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            this._rootMotionPosition = new BABYLON.Vector3(0, 0, 0);
            this._lastMotionRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            this._lastMotionPosition = new BABYLON.Vector3(0, 0, 0);
            this._deltaPositionFixed = new BABYLON.Vector3(0, 0, 0);
            this._deltaPositionMatrix = new BABYLON.Matrix();
            this._saveDeltaPosition = new BABYLON.Vector3(0, 0, 0);
            this._saveDeltaRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            this._dirtyMotionMatrix = null;
            this._dirtyBlenderMatrix = null;
            //private _bodyOrientationAngleY:number = 0;
            //private transformForwardVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            //private transformRightVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            //private desiredForwardVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            //private desiredRightVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            this._targetPosition = new BABYLON.Vector3(0, 0, 0);
            this._targetRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            this._targetScaling = new BABYLON.Vector3(1, 1, 1);
            this._updateMatrix = BABYLON.Matrix.Zero();
            this._blenderMatrix = BABYLON.Matrix.Zero();
            this._blendWeights = new BABYLON.BlendingWeights();
            this._emptyScaling = new BABYLON.Vector3(1, 1, 1);
            this._emptyPosition = new BABYLON.Vector3(0, 0, 0);
            this._emptyRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            this._ikFrameEanbled = false;
            this._data = new Map();
            this._anims = new Map();
            this._numbers = new Map();
            this._booleans = new Map();
            this._triggers = new Map();
            this._parameters = new Map();
            this.speedRatio = 1.0;
            this.applyRootMotion = false;
            this.delayUpdateUntilReady = true;
            this.enableAnimation = true;
            this.updateRootMotionPosition = false;
            this.updateRootMotionRotation = false;
            /** Register handler that is triggered when the animation ik setup has been triggered */
            this.onAnimationIKObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation end has been triggered */
            this.onAnimationEndObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation loop has been triggered */
            this.onAnimationLoopObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation event has been triggered */
            this.onAnimationEventObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation frame has been updated */
            this.onAnimationUpdateObservable = new BABYLON.Observable();
            this.m_defaultGroup = null;
            this.m_animationTargets = null;
            this.m_characterController = null;
        }
        hasRootMotion() { return this._hasrootmotion; }
        ikFrameEnabled() { return this._ikFrameEanbled; }
        getAnimationTime() { return this._frametime; }
        getAnimationPlaying() { return this._animationplaying; }
        getRootMotionAngle() { return this._angularVelocity.y; }
        getRootMotionSpeed() { return this._deltaPosition.length(); }
        getRootMotionPosition() { return this._deltaPositionFixed; }
        getRootMotionRotation() { return this._deltaRotation; }
        getCharacterController() { return this.m_characterController; }
        getRuntimeController() { return this._runtimecontroller; }
        awake() { this.awakeStateMachine(); }
        update() { this.updateStateMachine(); }
        destroy() { this.destroyStateMachine(); }
        /////////////////////////////////////////////////////////////////////////////////////
        // State Machine Functions
        /////////////////////////////////////////////////////////////////////////////////////
        playAnimation(state, transitionDuration = 0, animationLayer = 0, frameRate = null) {
            let result = false;
            if (this._machine.layers != null && this._machine.layers.length > animationLayer) {
                const layer = this._machine.layers[animationLayer];
                const blendFrameRate = (layer.animationStateMachine != null) ? (layer.animationStateMachine.rate || BABYLON.AnimationState.FPS) : BABYLON.AnimationState.FPS;
                const blendingSpeed = (transitionDuration > 0) ? BABYLON.Utilities.ComputeBlendingSpeed(frameRate || blendFrameRate, transitionDuration) : 0;
                this.playCurrentAnimationState(layer, state, blendingSpeed);
                result = true;
            }
            else {
                BABYLON.Tools.Warn("No animation state layers on " + this.transform.name);
            }
            return result;
        }
        stopAnimation(animationLayer = 0) {
            let result = false;
            if (this._machine.layers != null && this._machine.layers.length > animationLayer) {
                const layer = this._machine.layers[animationLayer];
                this.stopCurrentAnimationState(layer);
                result = true;
            }
            else {
                BABYLON.Tools.Warn("No animation state layers on " + this.transform.name);
            }
            return result;
        }
        /////////////////////////////////////////////////////////////////////////////////////
        // State Machine Functions
        /////////////////////////////////////////////////////////////////////////////////////
        getBool(name) {
            return this._booleans.get(name) || false;
        }
        setBool(name, value) {
            this._booleans.set(name, value);
        }
        getFloat(name) {
            return this._numbers.get(name) || 0;
        }
        setFloat(name, value) {
            this._numbers.set(name, value);
        }
        getInteger(name) {
            return this._numbers.get(name) || 0;
        }
        setInteger(name, value) {
            this._numbers.set(name, value);
        }
        getTrigger(name) {
            return this._triggers.get(name) || false;
        }
        setTrigger(name) {
            this._triggers.set(name, true);
        }
        resetTrigger(name) {
            this._triggers.set(name, false);
        }
        setSmoothFloat(name, targetValue, dampTime, deltaTime) {
            const currentValue = this.getFloat(name);
            const gradientValue = BABYLON.Scalar.Lerp(currentValue, targetValue, (dampTime * deltaTime));
            this._numbers.set(name, gradientValue);
        }
        setSmoothInteger(name, targetValue, dampTime, deltaTime) {
            const currentValue = this.getInteger(name);
            const gradientValue = BABYLON.Scalar.Lerp(currentValue, targetValue, (dampTime * deltaTime));
            this._numbers.set(name, gradientValue);
        }
        getMachineState(name) {
            return this._data.get(name);
        }
        setMachineState(name, value) {
            this._data.set(name, value);
        }
        getCurrentState(layer) {
            return (this._machine.layers != null && this._machine.layers.length > layer) ? this._machine.layers[layer].animationStateMachine : null;
        }
        getAnimationGroup(name) {
            return this._anims.get(name);
        }
        getAnimationGroups() {
            return this._anims;
        }
        setAnimationGroups(groups, remapTargets = false) {
            // ..
            // TODO - Handle Remap Animation Targets
            // ..
            if (groups != null && groups.length > 0) {
                this._anims = new Map();
                this.m_animationTargets = [];
                this.m_defaultGroup = groups[0];
                groups.forEach((group) => {
                    const agroup = group;
                    try {
                        group.stop();
                    }
                    catch (_a) { }
                    if (group.targetedAnimations != null && group.targetedAnimations.length > 0) {
                        group.targetedAnimations.forEach((targetedAnimation) => {
                            // Note: For Loop Faster Than IndexOf
                            let indexOfTarget = -1;
                            for (let i = 0; i < this.m_animationTargets.length; i++) {
                                if (this.m_animationTargets[i].target === targetedAnimation.target) {
                                    indexOfTarget = i;
                                    break;
                                }
                            }
                            if (indexOfTarget < 0) {
                                this.m_animationTargets.push(targetedAnimation);
                                if (targetedAnimation.target.metadata == null)
                                    targetedAnimation.target.metadata = {};
                                if (targetedAnimation.target instanceof BABYLON.TransformNode) {
                                    BABYLON.Utilities.ValidateTransformQuaternion(targetedAnimation.target);
                                    const layerMixers = [];
                                    for (let index = 0; index < this._layercount; index++) {
                                        const layerMixer = new BABYLON.AnimationMixer();
                                        layerMixer.positionBuffer = null;
                                        layerMixer.rotationBuffer = null;
                                        layerMixer.scalingBuffer = null;
                                        layerMixer.originalMatrix = null;
                                        layerMixer.blendingFactor = 0;
                                        layerMixer.blendingSpeed = 0;
                                        layerMixer.rootPosition = null;
                                        layerMixer.rootRotation = null;
                                        layerMixers.push(layerMixer);
                                    }
                                    targetedAnimation.target.metadata.mixer = layerMixers;
                                }
                                else if (targetedAnimation.target instanceof BABYLON.MorphTarget) {
                                    const morphLayerMixers = [];
                                    for (let index = 0; index < this._layercount; index++) {
                                        const morphLayerMixer = new BABYLON.AnimationMixer();
                                        morphLayerMixer.influenceBuffer = null;
                                        morphLayerMixers.push(morphLayerMixer);
                                    }
                                    targetedAnimation.target.metadata.mixer = morphLayerMixers;
                                }
                            }
                        });
                    }
                    if (agroup != null && agroup.metadata != null && agroup.metadata.unity != null && agroup.metadata.unity.clip != null && agroup.metadata.unity.clip !== "") {
                        this._anims.set(agroup.metadata.unity.clip, group);
                    }
                });
            }
        }
        /* Animation Controller State Machine Functions */
        awakeStateMachine() {
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
            this.m_animationTargets = [];
            this.m_defaultGroup = null;
            this.m_characterController = this.getComponent("BABYLON.CharacterController");
            // ..
            this._source = (this.transform.metadata != null && this.transform.metadata.unity != null && this.transform.metadata.unity.animator != null && this.transform.metadata.unity.animator !== "") ? this.transform.metadata.unity.animator : null;
            this._machine = this.getProperty("machine", this._machine);
            this._updatemode = this.getProperty("updatemode", this._updatemode);
            this._hasrootmotion = this.getProperty("hasrootmotion", this._hasrootmotion);
            this._runtimecontroller = this.getProperty("runtimecontroller", this._runtimecontroller);
            this._hastransformhierarchy = this.getProperty("hastransformhierarchy", this._hastransformhierarchy);
            this._leftfeetbottomheight = this.getProperty("leftfeetbottomheight", this._leftfeetbottomheight);
            this._rightfeetbottomheight = this.getProperty("rightfeetbottomheight", this._rightfeetbottomheight);
            this.applyRootMotion = this.getProperty("applyrootmotion", this.applyRootMotion);
            // ..
            if (this._machine != null) {
                if (this._machine.speed != null) {
                    this.speedRatio = this._machine.speed;
                }
                if (this._machine.parameters != null && this._machine.parameters.length > 0) {
                    const plist = this._machine.parameters;
                    plist.forEach((parameter) => {
                        const name = parameter.name;
                        const type = parameter.type;
                        const curve = parameter.curve;
                        const defaultFloat = parameter.defaultFloat;
                        const defaultBool = parameter.defaultBool;
                        const defaultInt = parameter.defaultInt;
                        this._parameters.set(name, type);
                        if (type === BABYLON.AnimatorParameterType.Bool) {
                            this.setBool(name, defaultBool);
                        }
                        else if (type === BABYLON.AnimatorParameterType.Float) {
                            this.setFloat(name, defaultFloat);
                        }
                        else if (type === BABYLON.AnimatorParameterType.Int) {
                            this.setInteger(name, defaultInt);
                        }
                        else if (type === BABYLON.AnimatorParameterType.Trigger) {
                            this.resetTrigger(name);
                        }
                    });
                }
                // ..
                // Process Machine State Layers
                // ..
                if (this._machine.layers != null && this._machine.layers.length > 0) {
                    this._layercount = this._machine.layers.length;
                    // Sort In Ascending Order
                    this._machine.layers.sort((left, right) => {
                        if (left.index < right.index)
                            return -1;
                        if (left.index > right.index)
                            return 1;
                        return 0;
                    });
                    // Parse State Machine Layers
                    this._machine.layers.forEach((layer) => {
                        // Set Layer Avatar Mask Transform Path
                        layer.animationMaskMap = new Map();
                        if (layer.avatarMask != null && layer.avatarMask.transformPaths != null && layer.avatarMask.transformPaths.length > 0) {
                            for (let i = 0; i < layer.avatarMask.transformPaths.length; i++) {
                                layer.animationMaskMap.set(layer.avatarMask.transformPaths[i], i);
                            }
                        }
                    });
                }
            }
            if (this._source != null && this._source !== "" && this.scene.animationGroups != null) {
                let sourceanims = null;
                // ..
                // TODO - Optimize Searching Global Animation Groups - ???
                // ..
                this.scene.animationGroups.forEach((group) => {
                    const agroup = group;
                    if (agroup != null && agroup.metadata != null && agroup.metadata.unity != null && agroup.metadata.unity.source != null && agroup.metadata.unity.source !== "") {
                        if (agroup.metadata.unity.source === this._source) {
                            if (sourceanims == null)
                                sourceanims = [];
                            sourceanims.push(group);
                        }
                    }
                });
                if (sourceanims != null && sourceanims.length > 0) {
                    this.setAnimationGroups(sourceanims);
                }
            }
            // ..
            // Map State Machine Tracks (Animation Groups)
            // ..
            if (this._machine != null && this._machine.states != null && this._machine.states.length > 0) {
                this._machine.states.forEach((state) => {
                    if (state != null && state.name != null) {
                        // Set Custom Animation Curves
                        if (state.ccurves != null && state.ccurves.length > 0) {
                            state.ccurves.forEach((curve) => {
                                if (curve.animation != null) {
                                    const anim = BABYLON.Animation.Parse(curve.animation);
                                    if (anim != null) {
                                        if (state.tcurves == null)
                                            state.tcurves = [];
                                        state.tcurves.push(anim);
                                    }
                                }
                            });
                        }
                        // Setup Animation State Machines
                        this.setupTreeBranches(state.blendtree);
                        this.setMachineState(state.name, state);
                    }
                });
            }
            // .. 
            // console.warn("Animation State Mahine: " + this.transform.name);
            // console.log(this);
            // SM.SetWindowState(this.transform.name, this);
        }
        updateStateMachine(deltaTime = null) {
            if (this.delayUpdateUntilReady === false || (this.delayUpdateUntilReady === true && this.getReadyState() === true)) {
                if (this._executed === false) {
                    this._executed = true;
                    if (this._machine.layers != null && this._machine.layers.length > 0) {
                        this._machine.layers.forEach((layer) => {
                            this.playCurrentAnimationState(layer, layer.entry, 0);
                        });
                    }
                }
                if (this.enableAnimation === true) {
                    const frameDeltaTime = deltaTime || this.getDeltaSeconds();
                    this.updateAnimationState(frameDeltaTime);
                    this.updateAnimationTargets(frameDeltaTime);
                    if (this.onAnimationUpdateObservable.hasObservers() === true) {
                        this.onAnimationUpdateObservable.notifyObservers(this.transform);
                    }
                }
            }
        }
        destroyStateMachine() {
            this._data = null;
            this._anims = null;
            this._numbers = null;
            this._booleans = null;
            this._triggers = null;
            this._parameters = null;
            this._checkers = null;
            this._machine = null;
            this.onAnimationIKObservable.clear();
            this.onAnimationIKObservable = null;
            this.onAnimationEndObservable.clear();
            this.onAnimationEndObservable = null;
            this.onAnimationLoopObservable.clear();
            this.onAnimationLoopObservable = null;
            this.onAnimationEventObservable.clear();
            this.onAnimationEventObservable = null;
            this.onAnimationUpdateObservable.clear();
            this.onAnimationUpdateObservable = null;
        }
        /* Animation Controller Private Update Functions */
        updateAnimationState(deltaTime) {
            if (this._machine.layers != null && this._machine.layers.length > 0) {
                this._machine.layers.forEach((layer) => {
                    this.checkStateMachine(layer, deltaTime);
                });
            }
        }
        updateAnimationTargets(deltaTime) {
            this._ikFrameEanbled = false; // Reset Current Inverse Kinematics
            this._animationplaying = false; // Reset Current Animation Is Playing
            //this._bodyOrientationAngleY = 0;
            if (this.transform.rotationQuaternion != null) {
                //this._bodyOrientationAngleY = this.transform.rotationQuaternion.toEulerAngles().y; // TODO - OPTIMIZE THIS
            }
            else if (this.transform.rotation != null) {
                //this._bodyOrientationAngleY = this.transform.rotation.y;
            }
            if (this._machine.layers != null && this._machine.layers.length > 0) {
                this._machine.layers.forEach((layer) => {
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    if (layer.index === 0)
                        this._frametime = layer.animationTime; // Note: Update Master Animation Frame Time
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    if (layer.animationStateMachine != null && layer.animationStateMachine.blendtree != null) {
                        if (layer.iKPass === true) {
                            if (layer.animationStateMachine.iKOnFeet === true) {
                                this._ikFrameEanbled = true;
                            }
                            if (this.onAnimationIKObservable.hasObservers() === true) {
                                this.onAnimationIKObservable.notifyObservers(layer.index);
                            }
                        }
                        const layerState = layer.animationStateMachine;
                        if (layerState.type === BABYLON.MotionType.Clip && layerState.played !== -1)
                            layerState.played += deltaTime;
                        if (layerState.blendtree.children != null && layerState.blendtree.children.length > 0) {
                            const primaryBlendTree = layerState.blendtree.children[0];
                            if (primaryBlendTree != null) {
                                if (layerState.blendtree.blendType == BABYLON.BlendTreeType.Clip) {
                                    const animationTrack = primaryBlendTree.track;
                                    if (animationTrack != null) {
                                        const frameRatio = (BABYLON.AnimationState.TIME / animationTrack.to);
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Motion Clip Animation Delta Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        layer.animationTime += (deltaTime * frameRatio * Math.abs(layerState.speed) * Math.abs(this.speedRatio) * BABYLON.AnimationState.SPEED);
                                        if (layer.animationTime > BABYLON.AnimationState.TIME)
                                            layer.animationTime = BABYLON.AnimationState.TIME;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Motion Clip Animation Normalized Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        layer.animationNormal = (layer.animationTime / BABYLON.AnimationState.TIME); // Note: Normalize Layer Frame Time
                                        const validateTime = (layer.animationNormal > 0.99) ? 1 : layer.animationNormal;
                                        const formattedTime = Math.round(validateTime * 100) / 100;
                                        if (layerState.speed < 0)
                                            layer.animationNormal = (1 - layer.animationNormal); // Note: Reverse Normalized Frame Time
                                        const animationFrameTime = (animationTrack.to * layer.animationNormal); // Note: Denormalize Animation Frame Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // let additivereferenceposeclip:number = 0;
                                        // let additivereferenceposetime:number = 0.0;
                                        // let hasadditivereferencepose:boolean = false;
                                        // let starttime:number = 0.0;
                                        // let stoptime:number = 0.0;
                                        // let mirror:boolean = false;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        let level = 0.0;
                                        let xspeed = 0.0;
                                        let zspeed = 0.0;
                                        let looptime = false;
                                        //let loopblend:boolean = false;
                                        //let cycleoffset:number = 0.0;
                                        //let heightfromfeet:boolean = false;
                                        let orientationoffsety = 0.0;
                                        //let keeporiginalorientation:boolean = true;
                                        //let keeporiginalpositiony:boolean = true;
                                        //let keeporiginalpositionxz:boolean = true;
                                        let loopblendorientation = true;
                                        let loopblendpositiony = true;
                                        let loopblendpositionxz = true;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        const agroup = animationTrack;
                                        if (agroup.metadata != null && agroup.metadata.unity != null) {
                                            if (agroup.metadata.unity.averagespeed != null) {
                                                xspeed = (agroup.metadata.unity.averagespeed.x != null) ? agroup.metadata.unity.averagespeed.x : 0;
                                                zspeed = (agroup.metadata.unity.averagespeed.z != null) ? agroup.metadata.unity.averagespeed.z : 0;
                                            }
                                            if (agroup.metadata.unity.settings != null) {
                                                level = (agroup.metadata.unity.settings.level != null) ? agroup.metadata.unity.settings.level : 0;
                                                looptime = (agroup.metadata.unity.settings.looptime != null) ? agroup.metadata.unity.settings.looptime : false;
                                                // DEPRECIATED: loopblend = (agroup.metadata.unity.settings.loopblend != null) ? agroup.metadata.unity.settings.loopblend : false;
                                                // DEPRECIATED: cycleoffset = (agroup.metadata.unity.settings.cycleoffset != null) ? agroup.metadata.unity.settings.cycleoffset : 0;
                                                // DEPRECIATED: heightfromfeet = (agroup.metadata.unity.settings.heightfromfeet != null) ? agroup.metadata.unity.settings.heightfromfeet : false;
                                                orientationoffsety = (agroup.metadata.unity.settings.orientationoffsety != null) ? agroup.metadata.unity.settings.orientationoffsety : 0;
                                                // DEPRECIATED: keeporiginalorientation = (agroup.metadata.unity.settings.keeporiginalorientation != null) ? agroup.metadata.unity.settings.keeporiginalorientation : true;
                                                // DEPRECIATED: keeporiginalpositiony = (agroup.metadata.unity.settings.keeporiginalpositiony != null) ? agroup.metadata.unity.settings.keeporiginalpositiony : true;
                                                // DEPRECIATED: keeporiginalpositionxz = (agroup.metadata.unity.settings.keeporiginalpositionxz != null) ? agroup.metadata.unity.settings.keeporiginalpositionxz : true;
                                                loopblendorientation = (agroup.metadata.unity.settings.loopblendorientation != null) ? agroup.metadata.unity.settings.loopblendorientation : true;
                                                loopblendpositiony = (agroup.metadata.unity.settings.loopblendpositiony != null) ? agroup.metadata.unity.settings.loopblendpositiony : true;
                                                loopblendpositionxz = (agroup.metadata.unity.settings.loopblendpositionxz != null) ? agroup.metadata.unity.settings.loopblendpositionxz : true;
                                            }
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Unity Inverts Root Motion Animation Offsets
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        orientationoffsety = BABYLON.Tools.ToRadians(orientationoffsety);
                                        // DEPRECIATED: orientationoffsety *= -1;
                                        xspeed = Math.abs(xspeed);
                                        zspeed = Math.abs(zspeed);
                                        level *= -1;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationTime >= BABYLON.AnimationState.TIME) {
                                            layer.animationFirstRun = false;
                                            layer.animationLoopFrame = true;
                                            if (looptime === true) {
                                                layer.animationLoopCount++;
                                                if (this.onAnimationLoopObservable.hasObservers() === true) {
                                                    this.onAnimationLoopObservable.notifyObservers(layer.index);
                                                }
                                            }
                                            else {
                                                if (layer.animationEndFrame === false) {
                                                    layer.animationEndFrame = true;
                                                    if (this.onAnimationEndObservable.hasObservers() === true) {
                                                        this.onAnimationEndObservable.notifyObservers(layer.index);
                                                    }
                                                }
                                            }
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationFirstRun === true || looptime === true) {
                                            this._animationplaying = true;
                                            animationTrack.targetedAnimations.forEach((targetedAnim) => {
                                                if (targetedAnim.target instanceof BABYLON.TransformNode) {
                                                    const clipTarget = targetedAnim.target;
                                                    if (layer.index === 0 || layer.avatarMask == null || this.filterTargetAvatarMask(layer, clipTarget)) {
                                                        const targetRootBone = (clipTarget.metadata != null && clipTarget.metadata.unity != null && clipTarget.metadata.unity.rootbone != null) ? clipTarget.metadata.unity.rootbone : false;
                                                        if (targetRootBone === true) {
                                                            if (this._initialRootBonePosition == null) {
                                                                const targetRootPos = (clipTarget.metadata != null && clipTarget.metadata.unity != null && clipTarget.metadata.unity.rootpos != null) ? clipTarget.metadata.unity.rootpos : null;
                                                                if (targetRootPos != null)
                                                                    this._initialRootBonePosition = BABYLON.Vector3.FromArray(targetRootPos);
                                                                if (this._initialRootBonePosition == null)
                                                                    this._initialRootBonePosition = new BABYLON.Vector3(0, 0, 0);
                                                                // console.warn("A - Init Root Bone Position: " + clipTarget.name);
                                                                // console.log(this._initialRootBonePosition);
                                                            }
                                                            if (this._initialRootBoneRotation == null) {
                                                                const targetRootRot = (clipTarget.metadata != null && clipTarget.metadata.unity != null && clipTarget.metadata.unity.rootrot != null) ? clipTarget.metadata.unity.rootrot : null;
                                                                if (targetRootRot != null) {
                                                                    const quat = BABYLON.Quaternion.FromArray(targetRootRot);
                                                                    this._initialRootBoneRotation = quat.toEulerAngles();
                                                                }
                                                                if (this._initialRootBoneRotation == null)
                                                                    this._initialRootBoneRotation = new BABYLON.Vector3(0, 0, 0);
                                                                // console.warn("A - Init Root Bone Rotation: " + clipTarget.name);
                                                                // console.log(this._initialRootBoneRotation);
                                                            }
                                                        }
                                                        if (clipTarget.metadata != null && clipTarget.metadata.mixer != null) {
                                                            const clipTargetMixer = clipTarget.metadata.mixer[layer.index];
                                                            if (clipTargetMixer != null) {
                                                                if (targetedAnim.animation.targetProperty === "position") {
                                                                    this._targetPosition = BABYLON.Utilities.SampleAnimationVector3(targetedAnim.animation, animationFrameTime);
                                                                    // ..
                                                                    // Handle Root Motion (Position)
                                                                    // ..
                                                                    if (targetRootBone === true && this._initialRootBonePosition != null) {
                                                                        this._positionWeight = true;
                                                                        this._positionHolder.copyFrom(this._initialRootBonePosition);
                                                                        this._rootBoneWeight = false;
                                                                        this._rootBoneHolder.set(0, 0, 0);
                                                                        // ..
                                                                        // Apply Root Motion
                                                                        // ..
                                                                        if (this.applyRootMotion === true) {
                                                                            if (loopblendpositiony === true && loopblendpositionxz === true) {
                                                                                this._positionWeight = true; // Bake XYZ Into Pose
                                                                                this._positionHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                                            }
                                                                            else if (loopblendpositiony === false && loopblendpositionxz === false) {
                                                                                this._rootBoneWeight = true; // Use XYZ As Root Motion
                                                                                this._rootBoneHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                                            }
                                                                            else if (loopblendpositiony === true && loopblendpositionxz === false) {
                                                                                this._positionWeight = true; // Bake Y Into Pose 
                                                                                this._positionHolder.set(this._initialRootBonePosition.x, (this._targetPosition.y + level), this._initialRootBonePosition.z);
                                                                                this._rootBoneWeight = true; // Use XZ As Root Motion
                                                                                this._rootBoneHolder.set(this._targetPosition.x, 0, this._targetPosition.z); // MAYBE: Use this.transform.position.y - ???
                                                                            }
                                                                            else if (loopblendpositionxz === true && loopblendpositiony === false) {
                                                                                this._positionWeight = true; // Bake XZ Into Pose
                                                                                this._positionHolder.set(this._targetPosition.x, this._initialRootBonePosition.y, this._targetPosition.z);
                                                                                this._rootBoneWeight = true; // Use Y As Root Motion
                                                                                this._rootBoneHolder.set(0, (this._targetPosition.y + level), 0); // MAYBE: Use this.transform.position.xz - ???
                                                                            }
                                                                        }
                                                                        else {
                                                                            this._positionWeight = true; // Bake XYZ Original Motion
                                                                            this._positionHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                                        }
                                                                        // Bake Position Holder
                                                                        if (this._positionWeight === true) {
                                                                            if (clipTargetMixer.positionBuffer == null)
                                                                                clipTargetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                                                            BABYLON.Utilities.BlendVector3Value(clipTargetMixer.positionBuffer, this._positionHolder, 1.0);
                                                                        }
                                                                        // Bake Root Bone Holder
                                                                        if (this._rootBoneWeight === true) {
                                                                            if (clipTargetMixer.rootPosition == null)
                                                                                clipTargetMixer.rootPosition = new BABYLON.Vector3(0, 0, 0);
                                                                            BABYLON.Utilities.BlendVector3Value(clipTargetMixer.rootPosition, this._rootBoneHolder, 1.0);
                                                                        }
                                                                    }
                                                                    else {
                                                                        // Bake Normal Pose Position
                                                                        if (clipTargetMixer.positionBuffer == null)
                                                                            clipTargetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                                                        BABYLON.Utilities.BlendVector3Value(clipTargetMixer.positionBuffer, this._targetPosition, 1.0);
                                                                    }
                                                                }
                                                                else if (targetedAnim.animation.targetProperty === "rotationQuaternion") {
                                                                    this._targetRotation = BABYLON.Utilities.SampleAnimationQuaternion(targetedAnim.animation, animationFrameTime);
                                                                    // ..
                                                                    // Handle Root Motion (Rotation)
                                                                    // ..
                                                                    if (targetRootBone === true) {
                                                                        this._rotationWeight = false;
                                                                        this._rotationHolder.set(0, 0, 0, 0);
                                                                        this._rootQuatWeight = false;
                                                                        this._rootQuatHolder.set(0, 0, 0, 0);
                                                                        // TODO - OPTIMIZE TO EULER ANGLES
                                                                        const eulerAngle = this._targetRotation.toEulerAngles();
                                                                        const orientationAngleY = eulerAngle.y; //(keeporiginalorientation === true) ? eulerAngle.y : this._bodyOrientationAngleY;
                                                                        // ..
                                                                        // Apply Root Motion
                                                                        // ..
                                                                        if (this.applyRootMotion === true) {
                                                                            if (loopblendorientation === true) {
                                                                                this._rotationWeight = true; // Bake XYZ Into Pose
                                                                                BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety), eulerAngle.z, this._rotationHolder);
                                                                            }
                                                                            else {
                                                                                this._rotationWeight = true; // Bake XZ Into Pose
                                                                                BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, this._initialRootBoneRotation.y, eulerAngle.z, this._rotationHolder);
                                                                                this._rootQuatWeight = true; // Use Y As Root Motion
                                                                                BABYLON.Quaternion.FromEulerAnglesToRef(0, (orientationAngleY + orientationoffsety), 0, this._rootQuatHolder); // MAYBE: Use this.transform.rotation.xz - ???
                                                                            }
                                                                        }
                                                                        else {
                                                                            this._rotationWeight = true; // Bake XYZ Into Pose
                                                                            BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety), eulerAngle.z, this._rotationHolder);
                                                                        }
                                                                        // Bake Rotation Holder
                                                                        if (this._rotationWeight === true) {
                                                                            if (clipTargetMixer.rotationBuffer == null)
                                                                                clipTargetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                                                            BABYLON.Utilities.BlendQuaternionValue(clipTargetMixer.rotationBuffer, this._rotationHolder, 1.0);
                                                                        }
                                                                        // Bake Root Bone Rotation
                                                                        if (this._rootQuatWeight === true) {
                                                                            if (clipTargetMixer.rootRotation == null)
                                                                                clipTargetMixer.rootRotation = new BABYLON.Quaternion(0, 0, 0, 1);
                                                                            BABYLON.Utilities.BlendQuaternionValue(clipTargetMixer.rootRotation, this._rootQuatHolder, 1.0);
                                                                        }
                                                                    }
                                                                    else {
                                                                        // Bake Normal Pose Rotation
                                                                        if (clipTargetMixer.rotationBuffer == null)
                                                                            clipTargetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                                                        BABYLON.Utilities.BlendQuaternionValue(clipTargetMixer.rotationBuffer, this._targetRotation, 1.0);
                                                                    }
                                                                }
                                                                else if (targetedAnim.animation.targetProperty === "scaling") {
                                                                    this._targetScaling = BABYLON.Utilities.SampleAnimationVector3(targetedAnim.animation, animationFrameTime);
                                                                    if (clipTargetMixer.scalingBuffer == null)
                                                                        clipTargetMixer.scalingBuffer = new BABYLON.Vector3(1, 1, 1);
                                                                    BABYLON.Utilities.BlendVector3Value(clipTargetMixer.scalingBuffer, this._targetScaling, 1.0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (targetedAnim.target instanceof BABYLON.MorphTarget) {
                                                    const morphTarget = targetedAnim.target;
                                                    if (morphTarget.metadata != null && morphTarget.metadata.mixer != null) {
                                                        const morphTargetMixer = morphTarget.metadata.mixer[layer.index];
                                                        if (targetedAnim.animation.targetProperty === "influence") {
                                                            const floatValue = BABYLON.Utilities.SampleAnimationFloat(targetedAnim.animation, animationFrameTime);
                                                            if (morphTargetMixer.influenceBuffer == null)
                                                                morphTargetMixer.influenceBuffer = 0;
                                                            morphTargetMixer.influenceBuffer = BABYLON.Utilities.BlendFloatValue(morphTargetMixer.influenceBuffer, floatValue, 1.0);
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Parse Layer Animation Curves
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationStateMachine.tcurves != null && layer.animationStateMachine.tcurves.length > 0) {
                                            layer.animationStateMachine.tcurves.forEach((animation) => {
                                                if (animation.targetProperty != null && animation.targetProperty !== "") {
                                                    const sample = BABYLON.Utilities.SampleAnimationFloat(animation, layer.animationNormal);
                                                    this.setFloat(animation.targetProperty, sample);
                                                }
                                            });
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Validate Layer Animation Events (TODO - Pass Layer Index Properties To Observers)
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationStateMachine.events != null && layer.animationStateMachine.events.length > 0) {
                                            layer.animationStateMachine.events.forEach((animatorEvent) => {
                                                if (animatorEvent.time === formattedTime) {
                                                    const animEventKey = animatorEvent.function + "_" + animatorEvent.time;
                                                    if (layer.animationLoopEvents == null)
                                                        layer.animationLoopEvents = {};
                                                    if (!layer.animationLoopEvents[animEventKey]) {
                                                        layer.animationLoopEvents[animEventKey] = true;
                                                        // console.log("Blend Tree Animation Event: " + animatorEvent.time + " >> " + animatorEvent.clip + " >> " + animatorEvent.function);
                                                        if (this.onAnimationEventObservable.hasObservers() === true) {
                                                            this.onAnimationEventObservable.notifyObservers(animatorEvent);
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Step Motion Clip Animation Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationLoopFrame === true) {
                                            layer.animationTime = 0;
                                            layer.animationNormal = 0;
                                            layer.animationLoopFrame = false;
                                            layer.animationLoopEvents = null;
                                        }
                                    }
                                    else {
                                        // console.warn(">>> No Motion Clip Animation Track Found For: " + this.transform.name);
                                    }
                                }
                                else {
                                    this._animationplaying = true; // Note: Blend Tree Are Always Playing
                                    // this._blendMessage = "";
                                    this._blendWeights.primary = null;
                                    this._blendWeights.secondary = null;
                                    const scaledWeightList = [];
                                    const primaryBlendTree = layerState.blendtree;
                                    this.parseTreeBranches(layer, primaryBlendTree, 1.0, scaledWeightList);
                                    const frameRatio = this.computeWeightedFrameRatio(scaledWeightList);
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Blend Tree Animation Delta Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    layer.animationTime += (deltaTime * frameRatio * Math.abs(layerState.speed) * Math.abs(this.speedRatio) * BABYLON.AnimationState.SPEED);
                                    if (layer.animationTime > BABYLON.AnimationState.TIME)
                                        layer.animationTime = BABYLON.AnimationState.TIME;
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Blend Tree Animation Normalized Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    layer.animationNormal = (layer.animationTime / BABYLON.AnimationState.TIME); // Note: Normalize Layer Frame Time
                                    const validateTime = (layer.animationNormal > 0.99) ? 1 : layer.animationNormal;
                                    const formattedTime = Math.round(validateTime * 100) / 100;
                                    if (layerState.speed < 0)
                                        layer.animationNormal = (1 - layer.animationNormal); // Note: Reverse Normalized Frame Time
                                    const blendingNormalTime = layer.animationNormal; // Note: Denormalize Animation Frame Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationTime >= BABYLON.AnimationState.TIME) {
                                        layer.animationFirstRun = false;
                                        layer.animationLoopFrame = true; // Note: No Loop Or End Events For Blend Trees - ???
                                        layer.animationLoopCount++;
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    const masterAnimationTrack = (scaledWeightList != null && scaledWeightList.length > 0 && scaledWeightList[0].track != null) ? scaledWeightList[0].track : null;
                                    if (masterAnimationTrack != null) {
                                        const targetCount = masterAnimationTrack.targetedAnimations.length;
                                        for (let targetIndex = 0; targetIndex < targetCount; targetIndex++) {
                                            const masterAnimimation = masterAnimationTrack.targetedAnimations[targetIndex];
                                            if (masterAnimimation.target instanceof BABYLON.TransformNode) {
                                                const blendTarget = masterAnimimation.target;
                                                if (layer.index === 0 || layer.avatarMask == null || this.filterTargetAvatarMask(layer, blendTarget)) {
                                                    const targetRootBone = (blendTarget.metadata != null && blendTarget.metadata.unity != null && blendTarget.metadata.unity.rootbone != null) ? blendTarget.metadata.unity.rootbone : false;
                                                    if (targetRootBone === true) {
                                                        if (this._initialRootBonePosition == null) {
                                                            const targetRootPos = (blendTarget.metadata != null && blendTarget.metadata.unity != null && blendTarget.metadata.unity.rootpos != null) ? blendTarget.metadata.unity.rootpos : null;
                                                            if (targetRootPos != null)
                                                                this._initialRootBonePosition = BABYLON.Vector3.FromArray(targetRootPos);
                                                            if (this._initialRootBonePosition == null)
                                                                this._initialRootBonePosition = new BABYLON.Vector3(0, 0, 0);
                                                            // console.warn("B - Init Root Bone Position: " + blendTarget.name);
                                                            // console.log(this._initialRootBonePosition);
                                                        }
                                                        if (this._initialRootBoneRotation == null) {
                                                            const targetRootRot = (blendTarget.metadata != null && blendTarget.metadata.unity != null && blendTarget.metadata.unity.rootrot != null) ? blendTarget.metadata.unity.rootrot : null;
                                                            if (targetRootRot != null) {
                                                                const quat = BABYLON.Quaternion.FromArray(targetRootRot);
                                                                this._initialRootBoneRotation = quat.toEulerAngles();
                                                            }
                                                            if (this._initialRootBoneRotation == null)
                                                                this._initialRootBoneRotation = new BABYLON.Vector3(0, 0, 0);
                                                            // console.warn("B - Init Root Bone Rotation: " + blendTarget.name);
                                                            // console.log(this._initialRootBoneRotation);
                                                        }
                                                    }
                                                    if (blendTarget.metadata != null && blendTarget.metadata.mixer != null) {
                                                        this._initialtargetblending = true; // Note: Reset First Target Blending Buffer
                                                        const blendTargetMixer = blendTarget.metadata.mixer[layer.index];
                                                        this.updateBlendableTargets(deltaTime, layer, primaryBlendTree, masterAnimimation, targetIndex, blendTargetMixer, blendingNormalTime, targetRootBone, blendTarget);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        // console.warn(">>> No Blend Tree Master Animation Track Found For: " + this.transform.name);
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Parse Layer Animation Curves
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationStateMachine.tcurves != null && layer.animationStateMachine.tcurves.length > 0) {
                                        layer.animationStateMachine.tcurves.forEach((animation) => {
                                            if (animation.targetProperty != null && animation.targetProperty !== "") {
                                                const sample = BABYLON.Utilities.SampleAnimationFloat(animation, layer.animationNormal);
                                                this.setFloat(animation.targetProperty, sample);
                                            }
                                        });
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Validate Layer Animation Events (TODO - Pass Layer Index And Clip Blended Weight Properties To Observers)
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationStateMachine.events != null && layer.animationStateMachine.events.length > 0) {
                                        layer.animationStateMachine.events.forEach((animatorEvent) => {
                                            if (animatorEvent.time === formattedTime) {
                                                const animEventKey = animatorEvent.function + "_" + animatorEvent.time;
                                                if (layer.animationLoopEvents == null)
                                                    layer.animationLoopEvents = {};
                                                if (!layer.animationLoopEvents[animEventKey]) {
                                                    layer.animationLoopEvents[animEventKey] = true;
                                                    // console.log("Blend Tree Animation Event: " + animatorEvent.time + " >> " + animatorEvent.clip + " >> " + animatorEvent.function);
                                                    if (this.onAnimationEventObservable.hasObservers() === true) {
                                                        this.onAnimationEventObservable.notifyObservers(animatorEvent);
                                                    }
                                                }
                                            }
                                        });
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Step Blend Tree Animation Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationLoopFrame === true) {
                                        layer.animationTime = 0;
                                        layer.animationNormal = 0;
                                        layer.animationLoopFrame = false;
                                        layer.animationLoopEvents = null;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            this.finalizeAnimationTargets();
        }
        // private _blendMessage:string = "";
        updateBlendableTargets(deltaTime, layer, tree, masterAnimation, targetIndex, targetMixer, normalizedFrameTime, targetRootBone, blendTarget) {
            if (targetMixer != null && tree.children != null && tree.children.length > 0) {
                for (let index = 0; index < tree.children.length; index++) {
                    const child = tree.children[index];
                    if (child.weight > 0) {
                        if (child.type === BABYLON.MotionType.Clip) {
                            if (child.track != null) {
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // let additivereferenceposeclip:number = 0;
                                // let additivereferenceposetime:number = 0.0;
                                // let hasadditivereferencepose:boolean = false;
                                // let starttime:number = 0.0;
                                // let stoptime:number = 0.0;
                                // let mirror:boolean = false;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // let looptime:boolean = true;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                let level = 0.0;
                                let xspeed = 0.0;
                                let zspeed = 0.0;
                                //let loopblend:boolean = false;
                                //let cycleoffset:number = 0.0;
                                //let heightfromfeet:boolean = false;
                                let orientationoffsety = 0.0;
                                //let keeporiginalorientation:boolean = true;
                                //let keeporiginalpositiony:boolean = true;
                                //let keeporiginalpositionxz:boolean = true;
                                let loopblendorientation = true;
                                let loopblendpositiony = true;
                                let loopblendpositionxz = true;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                const agroup = child.track;
                                if (agroup.metadata != null && agroup.metadata.unity != null) {
                                    if (agroup.metadata.unity.averagespeed != null) {
                                        xspeed = (agroup.metadata.unity.averagespeed.x != null) ? agroup.metadata.unity.averagespeed.x : 0;
                                        zspeed = (agroup.metadata.unity.averagespeed.z != null) ? agroup.metadata.unity.averagespeed.z : 0;
                                    }
                                    if (agroup.metadata.unity.settings != null) {
                                        level = (agroup.metadata.unity.settings.level != null) ? agroup.metadata.unity.settings.level : 0;
                                        // DEPRECIATED: loopblend = (agroup.metadata.unity.settings.loopblend != null) ? agroup.metadata.unity.settings.loopblend : false;
                                        // DEPRECIATED: cycleoffset = (agroup.metadata.unity.settings.cycleoffset != null) ? agroup.metadata.unity.settings.cycleoffset : 0;
                                        // DEPRECIATED: heightfromfeet = (agroup.metadata.unity.settings.heightfromfeet != null) ? agroup.metadata.unity.settings.heightfromfeet : false;
                                        orientationoffsety = (agroup.metadata.unity.settings.orientationoffsety != null) ? agroup.metadata.unity.settings.orientationoffsety : 0;
                                        // DEPRECIATED: keeporiginalorientation = (agroup.metadata.unity.settings.keeporiginalorientation != null) ? agroup.metadata.unity.settings.keeporiginalorientation : true;
                                        // DEPRECIATED: keeporiginalpositiony = (agroup.metadata.unity.settings.keeporiginalpositiony != null) ? agroup.metadata.unity.settings.keeporiginalpositiony : true;
                                        // DEPRECIATED: keeporiginalpositionxz = (agroup.metadata.unity.settings.keeporiginalpositionxz != null) ? agroup.metadata.unity.settings.keeporiginalpositionxz : true;
                                        loopblendorientation = (agroup.metadata.unity.settings.loopblendorientation != null) ? agroup.metadata.unity.settings.loopblendorientation : true;
                                        loopblendpositiony = (agroup.metadata.unity.settings.loopblendpositiony != null) ? agroup.metadata.unity.settings.loopblendpositiony : true;
                                        loopblendpositionxz = (agroup.metadata.unity.settings.loopblendpositionxz != null) ? agroup.metadata.unity.settings.loopblendpositionxz : true;
                                    }
                                }
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // Unity Inverts Root Motion Animation Offsets
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                orientationoffsety = BABYLON.Tools.ToRadians(orientationoffsety);
                                // DEPRECIATED: orientationoffsety *= -1;
                                xspeed = Math.abs(xspeed);
                                zspeed = Math.abs(zspeed);
                                level *= -1;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // this._blendMessage += (" >>> " + child.motion + ": " + child.weight.toFixed(2));
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // TODO - Get blendable animation from target map - ???
                                const blendableAnim = child.track.targetedAnimations[targetIndex];
                                const blendableWeight = (this._initialtargetblending === true) ? 1.0 : parseFloat(child.weight.toFixed(2));
                                this._initialtargetblending = false; // Note: Clear First Target Blending Buffer
                                if (blendableAnim.target === masterAnimation.target && blendableAnim.animation.targetProperty === masterAnimation.animation.targetProperty) {
                                    let adjustedFrameTime = normalizedFrameTime; // Note: Adjust Normalized Frame Time
                                    if (child.timescale < 0)
                                        adjustedFrameTime = (1 - adjustedFrameTime); // Note: Reverse Normalized Frame Time
                                    const animationFrameTime = (child.track.to * adjustedFrameTime); // Note: Denormalize Animation Frame Time
                                    //const animationFrameTime:number = (Math.round((child.track.to * adjustedFrameTime) * 100) / 100);  // Note: Denormalize Animation Frame Time
                                    if (masterAnimation.animation.targetProperty === "position") {
                                        this._targetPosition = BABYLON.Utilities.SampleAnimationVector3(blendableAnim.animation, animationFrameTime);
                                        // ..
                                        // Root Transform Position
                                        // ..
                                        if (targetRootBone === true && this._initialRootBonePosition != null) {
                                            this._positionWeight = true;
                                            this._positionHolder.copyFrom(this._initialRootBonePosition);
                                            this._rootBoneWeight = false;
                                            this._rootBoneHolder.set(0, 0, 0);
                                            // ..
                                            // Apply Root Motion
                                            // ..
                                            if (this.applyRootMotion === true) {
                                                if (loopblendpositiony === true && loopblendpositionxz === true) {
                                                    this._positionWeight = true; // Bake XYZ Into Pose
                                                    this._positionHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                }
                                                else if (loopblendpositiony === false && loopblendpositionxz === false) {
                                                    this._rootBoneWeight = true; // Use XYZ As Root Motion
                                                    this._rootBoneHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                }
                                                else if (loopblendpositiony === true && loopblendpositionxz === false) {
                                                    this._positionWeight = true; // Bake Y Into Pose 
                                                    this._positionHolder.set(this._initialRootBonePosition.x, (this._targetPosition.y + level), this._initialRootBonePosition.z);
                                                    this._rootBoneWeight = true; // Use XZ As Root Motion
                                                    this._rootBoneHolder.set(this._targetPosition.x, 0, this._targetPosition.z); // MAYBE: Use this.transform.position.y - ???
                                                }
                                                else if (loopblendpositionxz === true && loopblendpositiony === false) {
                                                    this._positionWeight = true; // Bake XZ Into Pose
                                                    this._positionHolder.set(this._targetPosition.x, this._initialRootBonePosition.y, this._targetPosition.z);
                                                    this._rootBoneWeight = true; // Use Y As Root Motion
                                                    this._rootBoneHolder.set(0, (this._targetPosition.y + level), 0); // MAYBE: Use this.transform.position.xz - ???
                                                }
                                            }
                                            else {
                                                this._positionWeight = true; // Bake XYZ Original Motion
                                                this._positionHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                            }
                                            // Bake Position Holder
                                            if (this._positionWeight === true) {
                                                if (targetMixer.positionBuffer == null)
                                                    targetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                                BABYLON.Utilities.BlendVector3Value(targetMixer.positionBuffer, this._positionHolder, blendableWeight);
                                            }
                                            // Bake Root Bone Holder
                                            if (this._rootBoneWeight === true) {
                                                if (targetMixer.rootPosition == null)
                                                    targetMixer.rootPosition = new BABYLON.Vector3(0, 0, 0);
                                                BABYLON.Utilities.BlendVector3Value(targetMixer.rootPosition, this._rootBoneHolder, blendableWeight);
                                            }
                                        }
                                        else {
                                            // Bake Normal Pose Position
                                            if (targetMixer.positionBuffer == null)
                                                targetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                            BABYLON.Utilities.BlendVector3Value(targetMixer.positionBuffer, this._targetPosition, blendableWeight);
                                        }
                                    }
                                    else if (masterAnimation.animation.targetProperty === "rotationQuaternion") {
                                        this._targetRotation = BABYLON.Utilities.SampleAnimationQuaternion(blendableAnim.animation, animationFrameTime);
                                        // ..
                                        // Root Transform Rotation
                                        // ..
                                        if (targetRootBone === true) {
                                            this._rotationWeight = false;
                                            this._rotationHolder.set(0, 0, 0, 0);
                                            this._rootQuatWeight = false;
                                            this._rootQuatHolder.set(0, 0, 0, 0);
                                            const eulerAngle = this._targetRotation.toEulerAngles();
                                            const orientationAngleY = eulerAngle.y; //(keeporiginalorientation === true) ? eulerAngle.y : this._bodyOrientationAngleY;
                                            // ..
                                            // Apply Root Motion
                                            // ..
                                            if (this.applyRootMotion === true) {
                                                if (loopblendorientation === true) {
                                                    this._rotationWeight = true; // Bake XYZ Into Pose
                                                    BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety), eulerAngle.z, this._rotationHolder);
                                                }
                                                else {
                                                    this._rotationWeight = true; // Bake XZ Into Pose
                                                    BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, this._initialRootBoneRotation.y, eulerAngle.z, this._rotationHolder);
                                                    this._rootQuatWeight = true; // Use Y As Root Motion
                                                    BABYLON.Quaternion.FromEulerAnglesToRef(0, (orientationAngleY + orientationoffsety), 0, this._rootQuatHolder); // MAYBE: Use this.transform.rotation.xz - ???
                                                }
                                            }
                                            else {
                                                this._rotationWeight = true; // Bake XYZ Into Pose
                                                BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety), eulerAngle.z, this._rotationHolder);
                                            }
                                            // Bake Rotation Holder
                                            if (this._rotationWeight === true) {
                                                if (targetMixer.rotationBuffer == null)
                                                    targetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                                BABYLON.Utilities.BlendQuaternionValue(targetMixer.rotationBuffer, this._rotationHolder, blendableWeight);
                                            }
                                            // Bake Root Bone Rotation
                                            if (this._rootQuatWeight === true) {
                                                if (targetMixer.rootRotation == null)
                                                    targetMixer.rootRotation = new BABYLON.Quaternion(0, 0, 0, 1);
                                                BABYLON.Utilities.BlendQuaternionValue(targetMixer.rootRotation, this._rootQuatHolder, blendableWeight);
                                            }
                                        }
                                        else {
                                            // Bake Normal Pose Rotation
                                            if (targetMixer.rotationBuffer == null)
                                                targetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                            BABYLON.Utilities.BlendQuaternionValue(targetMixer.rotationBuffer, this._targetRotation, blendableWeight);
                                        }
                                    }
                                    else if (masterAnimation.animation.targetProperty === "scaling") {
                                        this._targetScaling = BABYLON.Utilities.SampleAnimationVector3(blendableAnim.animation, animationFrameTime);
                                        if (targetMixer.scalingBuffer == null)
                                            targetMixer.scalingBuffer = new BABYLON.Vector3(1, 1, 1);
                                        BABYLON.Utilities.BlendVector3Value(targetMixer.scalingBuffer, this._targetScaling, blendableWeight);
                                    }
                                }
                                else {
                                    BABYLON.Tools.Warn(tree.name + " - " + child.track.name + " blend tree mismatch (" + targetIndex + "): " + masterAnimation.target.name + " >>> " + blendableAnim.target.name);
                                }
                            }
                        }
                        else if (child.type === BABYLON.MotionType.Tree) {
                            this.updateBlendableTargets(deltaTime, layer, child.subtree, masterAnimation, targetIndex, targetMixer, normalizedFrameTime, targetRootBone, blendTarget);
                        }
                    }
                }
            }
            //if (targetIndex === 0) BABYLON.Utilities.PrintToScreen(this._blendMessage, "red");
        }
        finalizeAnimationTargets() {
            this._deltaPosition.set(0, 0, 0);
            this._deltaRotation.set(0, 0, 0, 1);
            this._deltaPositionFixed.set(0, 0, 0);
            this._dirtyMotionMatrix = null;
            if (this.m_animationTargets != null && this.m_animationTargets.length > 0) {
                this.m_animationTargets.forEach((targetedAnim) => {
                    const animationTarget = targetedAnim.target;
                    // ..
                    // Update Direct Transform Targets For Each Layer
                    // ..
                    if (animationTarget.metadata != null && animationTarget.metadata.mixer != null) {
                        if (this._machine.layers != null && this._machine.layers.length > 0) {
                            this._blenderMatrix.reset();
                            this._dirtyBlenderMatrix = null;
                            this._machine.layers.forEach((layer) => {
                                const animationTargetMixer = animationTarget.metadata.mixer[layer.index];
                                if (animationTargetMixer != null) {
                                    if (animationTarget instanceof BABYLON.TransformNode) {
                                        // ..
                                        // Update Dirty Transform Matrix
                                        // ..
                                        if (animationTargetMixer.positionBuffer != null || animationTargetMixer.rotationBuffer != null || animationTargetMixer.scalingBuffer != null) {
                                            BABYLON.Matrix.ComposeToRef((animationTargetMixer.scalingBuffer || animationTarget.scaling), (animationTargetMixer.rotationBuffer || animationTarget.rotationQuaternion), (animationTargetMixer.positionBuffer || animationTarget.position), this._updateMatrix);
                                            if (animationTargetMixer.blendingSpeed > 0.0) {
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix == null) {
                                                    animationTargetMixer.originalMatrix = BABYLON.Matrix.Compose((animationTarget.scaling), (animationTarget.rotationQuaternion), (animationTarget.position));
                                                }
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix != null) {
                                                    BABYLON.Utilities.FastMatrixSlerp(animationTargetMixer.originalMatrix, this._updateMatrix, animationTargetMixer.blendingFactor, this._updateMatrix);
                                                    animationTargetMixer.blendingFactor += animationTargetMixer.blendingSpeed;
                                                }
                                            }
                                            BABYLON.Utilities.FastMatrixSlerp(this._blenderMatrix, this._updateMatrix, layer.defaultWeight, this._blenderMatrix);
                                            this._dirtyBlenderMatrix = true;
                                            animationTargetMixer.positionBuffer = null;
                                            animationTargetMixer.rotationBuffer = null;
                                            animationTargetMixer.scalingBuffer = null;
                                        }
                                        // ..
                                        // Update Dirty Root Motion Matrix
                                        // ..
                                        if (animationTargetMixer.rootPosition != null || animationTargetMixer.rootRotation != null) {
                                            BABYLON.Matrix.ComposeToRef((this._emptyScaling), (animationTargetMixer.rootRotation || this._emptyRotation), (animationTargetMixer.rootPosition || this._emptyPosition), this._updateMatrix);
                                            // ..
                                            // TODO - May Need Seperate Blending Speed Properties
                                            // Note: Might Fix Large Root Motion Delta Issue - ???
                                            // ..
                                            /*
                                            if (animationTargetMixer.blendingSpeed > 0.0) {
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix == null) {
                                                    animationTargetMixer.originalMatrix = BABYLON.Matrix.Compose(
                                                        (this.transform.scaling),
                                                        (this.transform.rotationQuaternion),
                                                        (this.transform.position)
                                                    );
                                                }
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix != null) {
                                                    BABYLON.Utilities.FastMatrixSlerp(animationTargetMixer.originalMatrix, this._updateMatrix, animationTargetMixer.blendingFactor, this._updateMatrix);
                                                    animationTargetMixer.blendingFactor += animationTargetMixer.blendingSpeed;
                                                }
                                            }
                                            */
                                            BABYLON.Utilities.FastMatrixSlerp(this._rootMotionMatrix, this._updateMatrix, layer.defaultWeight, this._rootMotionMatrix);
                                            this._dirtyMotionMatrix = true;
                                            animationTargetMixer.rootPosition = null;
                                            animationTargetMixer.rootRotation = null;
                                        }
                                    }
                                    else if (animationTarget instanceof BABYLON.MorphTarget) {
                                        if (animationTargetMixer.influenceBuffer != null) {
                                            animationTarget.influence = BABYLON.Scalar.Lerp(animationTarget.influence, animationTargetMixer.influenceBuffer, layer.defaultWeight);
                                            animationTargetMixer.influenceBuffer = null;
                                        }
                                    }
                                }
                            });
                            if (this._dirtyBlenderMatrix != null) {
                                this._blenderMatrix.decompose(animationTarget.scaling, animationTarget.rotationQuaternion, animationTarget.position);
                            }
                        }
                    }
                });
            }
            // ..
            if (this.applyRootMotion === true) {
                if (this._dirtyMotionMatrix != null) {
                    this._rootMotionMatrix.decompose(this._rootMotionScaling, this._rootMotionRotation, this._rootMotionPosition);
                    if (this._frametime === 0) {
                        this._lastMotionPosition.copyFrom(this._rootMotionPosition);
                        this._lastMotionRotation.copyFrom(this._rootMotionRotation);
                    }
                    // ..
                    // Update Current Delta Position
                    // ..
                    this._rootMotionPosition.subtractToRef(this._lastMotionPosition, this._deltaPosition);
                    // ..
                    // Update Current Delta Rotation
                    // ..
                    BABYLON.Utilities.QuaternionDiffToRef(this._rootMotionRotation, this._lastMotionRotation, this._deltaRotation);
                    this._deltaRotation.toEulerAnglesToRef(this._angularVelocity);
                    // ..
                    // Update Last Root Motion Deltas
                    // ..
                    this._saveDeltaPosition.copyFrom(this._deltaPosition);
                    this._saveDeltaRotation.copyFrom(this._deltaRotation);
                    this._lastMotionPosition.addInPlace(this._deltaPosition);
                    this._lastMotionRotation.multiplyInPlace(this._deltaRotation);
                    // ..
                    // Update Root Motion Transformation
                    // ..
                    this.transform.rotationQuaternion.toRotationMatrix(this._deltaPositionMatrix); // TODO: Optimize Rotation Matrix Is Dirty - ???
                    BABYLON.Vector3.TransformCoordinatesToRef(this._deltaPosition, this._deltaPositionMatrix, this._deltaPositionFixed);
                }
                // ..
                // Update Transform Delta Rotation
                // ..
                if (this.updateRootMotionRotation === true) {
                    this.transform.addRotation(0, this._angularVelocity.y, 0); // Note: Always Rotate The Transform Node
                }
                // ..
                // Update Transform Delta Position
                // ..
                if (this.updateRootMotionPosition === true) {
                    if (this._updatemode === 1 && this.m_characterController != null) {
                        // TODO: Use Character Controller To Move Entity - ???
                    }
                    else {
                        if (this.m_characterController != null) {
                            // TODO: Set Character Controller Update Position And Sync With Transform (If Exists)
                        }
                        this.transform.position.addInPlace(this._deltaPositionFixed);
                    }
                }
            }
        }
        checkStateMachine(layer, deltaTime) {
            this._checkers.result = null;
            this._checkers.offest = 0;
            this._checkers.blending = 0;
            this._checkers.triggered = [];
            // ..
            // Check Animation State Transitions
            // ..
            if (layer.animationStateMachine != null) {
                layer.animationStateMachine.time += deltaTime; // Update State Timer
                // Check Local Transition Conditions
                this.checkStateTransitions(layer, layer.animationStateMachine.transitions);
                // Check Any State Transition Conditions
                if (this._checkers.result == null && this._machine.transitions != null) {
                    this.checkStateTransitions(layer, this._machine.transitions);
                }
            }
            // ..
            // Reset Transition Condition Triggers
            // ..
            if (this._checkers.triggered != null && this._checkers.triggered.length > 0) {
                this._checkers.triggered.forEach((trigger) => { this.resetTrigger(trigger); });
                this._checkers.triggered = null;
            }
            // ..
            // Set Current Machine State Result
            // ..
            if (this._checkers.result != null) {
                this.playCurrentAnimationState(layer, this._checkers.result, this._checkers.blending, this._checkers.offest);
            }
        }
        checkStateTransitions(layer, transitions) {
            let currentAnimationRate = layer.animationStateMachine.rate;
            let currentAnimationLength = layer.animationStateMachine.length;
            if (transitions != null && transitions.length > 0) {
                let i = 0;
                let ii = 0;
                let solo = -1;
                // ..
                // Check Has Solo Transitions
                // ..
                for (i = 0; i < transitions.length; i++) {
                    if (transitions[i].solo === true && transitions[i].mute === false) {
                        solo = i;
                        break;
                    }
                }
                // ..
                // Check State Machine Transitions
                // ..
                for (i = 0; i < transitions.length; i++) {
                    const transition = transitions[i];
                    if (transition.layerIndex !== layer.index)
                        continue;
                    if (transition.mute === true)
                        continue;
                    if (solo >= 0 && solo !== i)
                        continue;
                    let transitionOk = false;
                    // ..
                    // Check Has Transition Exit Time
                    // ..
                    let exitTimeSecs = 0;
                    let exitTimeExpired = true;
                    if (transition.exitTime > 0) {
                        exitTimeSecs = (currentAnimationLength * transition.exitTime); // Note: Is Normalized Transition Exit Time
                        exitTimeExpired = (transition.hasExitTime === true) ? (layer.animationStateMachine.time >= exitTimeSecs) : true;
                    }
                    if (transition.hasExitTime === true && transition.intSource == BABYLON.InterruptionSource.None && exitTimeExpired === false)
                        continue;
                    // ..
                    // Check All Transition Conditions
                    // ..
                    if (transition.conditions != null && transition.conditions.length > 0) {
                        let passed = 0;
                        let checks = transition.conditions.length;
                        transition.conditions.forEach((condition) => {
                            const ptype = this._parameters.get(condition.parameter);
                            if (ptype != null) {
                                if (ptype == BABYLON.AnimatorParameterType.Float || ptype == BABYLON.AnimatorParameterType.Int) {
                                    const numValue = parseFloat(this.getFloat(condition.parameter).toFixed(2));
                                    if (condition.mode === BABYLON.ConditionMode.Greater && numValue > condition.threshold) {
                                        passed++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.Less && numValue < condition.threshold) {
                                        passed++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.Equals && numValue === condition.threshold) {
                                        passed++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.NotEqual && numValue !== condition.threshold) {
                                        passed++;
                                    }
                                }
                                else if (ptype == BABYLON.AnimatorParameterType.Bool) {
                                    const boolValue = this.getBool(condition.parameter);
                                    if (condition.mode === BABYLON.ConditionMode.If && boolValue === true) {
                                        passed++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.IfNot && boolValue === false) {
                                        passed++;
                                    }
                                }
                                else if (ptype == BABYLON.AnimatorParameterType.Trigger) {
                                    const triggerValue = this.getTrigger(condition.parameter);
                                    if (triggerValue === true) {
                                        passed++;
                                        // Note: For Loop Faster Than IndexOf
                                        let indexOfTrigger = -1;
                                        for (let i = 0; i < this._checkers.triggered.length; i++) {
                                            if (this._checkers.triggered[i] === condition.parameter) {
                                                indexOfTrigger = i;
                                                break;
                                            }
                                        }
                                        if (indexOfTrigger < 0) {
                                            this._checkers.triggered.push(condition.parameter);
                                        }
                                    }
                                }
                            }
                        });
                        if (transition.hasExitTime === true) {
                            // ..
                            // TODO - CHECK TRANSITION INTERUPTION SOURCE STATUS
                            // ..
                            // Validate Transition Has Exit Time And All Conditions Passed
                            transitionOk = (exitTimeExpired === true && passed === checks);
                        }
                        else {
                            // Validate All Transition Conditions Passed
                            transitionOk = (passed === checks);
                        }
                    }
                    else {
                        // Validate Transition Has Expired Exit Time Only
                        transitionOk = (transition.hasExitTime === true && exitTimeExpired === true);
                    }
                    // Validate Current Transition Destination Change
                    if (transitionOk === true) {
                        const blendRate = (currentAnimationRate > 0) ? currentAnimationRate : BABYLON.AnimationState.FPS;
                        const destState = (transition.isExit === false) ? transition.destination : BABYLON.AnimationState.EXIT;
                        const durationSecs = (transition.fixedDuration === true) ? transition.duration : BABYLON.Scalar.Denormalize(transition.duration, 0, currentAnimationLength);
                        const blendingSpeed = BABYLON.Utilities.ComputeBlendingSpeed(blendRate, durationSecs);
                        const normalizedOffset = transition.offset; // Note: Is Normalized Transition Offset Time
                        this._checkers.result = destState;
                        this._checkers.offest = normalizedOffset;
                        this._checkers.blending = blendingSpeed;
                        break;
                    }
                }
            }
        }
        playCurrentAnimationState(layer, name, blending, normalizedOffset = 0) {
            if (layer == null)
                return;
            if (name == null || name === "" || name === BABYLON.AnimationState.EXIT)
                return;
            if (layer.animationStateMachine != null && layer.animationStateMachine.name === name)
                return;
            const state = this.getMachineState(name);
            // ..
            // Reset Animation Target Mixers
            // ..
            if (this.m_animationTargets != null && this.m_animationTargets.length > 0) {
                this.m_animationTargets.forEach((targetedAnim) => {
                    const animationTarget = targetedAnim.target;
                    if (animationTarget.metadata != null && animationTarget.metadata.mixer != null) {
                        const animationTargetMixer = animationTarget.metadata.mixer[layer.index];
                        if (animationTargetMixer != null) {
                            animationTargetMixer.originalMatrix = null;
                            animationTargetMixer.blendingFactor = 0;
                            animationTargetMixer.blendingSpeed = blending;
                        }
                    }
                });
            }
            // ..
            // Play Current Layer Animation State
            // ..
            if (state != null && state.layerIndex === layer.index) {
                state.time = 0;
                state.played = 0;
                state.interrupted = false;
                layer.animationTime = BABYLON.Scalar.Clamp(normalizedOffset);
                layer.animationNormal = 0;
                layer.animationFirstRun = true;
                layer.animationEndFrame = false;
                layer.animationLoopFrame = false;
                layer.animationLoopCount = 0;
                layer.animationLoopEvents = null;
                layer.animationStateMachine = state;
                // console.warn(">>> Play Animation State: " + this.transform.name + " --> " + name + " --> Foot IK: " + layer.animationStateMachine.iKOnFeet);
            }
        }
        stopCurrentAnimationState(layer) {
            if (layer == null)
                return;
            // ..
            // Reset Animation Target Mixers
            // ..
            if (this.m_animationTargets != null && this.m_animationTargets.length > 0) {
                this.m_animationTargets.forEach((targetedAnim) => {
                    const animationTarget = targetedAnim.target;
                    if (animationTarget.metadata != null && animationTarget.metadata.mixer != null) {
                        const animationTargetMixer = animationTarget.metadata.mixer[layer.index];
                        if (animationTargetMixer != null) {
                            animationTargetMixer.originalMatrix = null;
                            animationTargetMixer.blendingFactor = 0;
                            animationTargetMixer.blendingSpeed = 0;
                        }
                    }
                });
            }
            // ..
            // Stop Current Layer Animation State
            // ..
            layer.animationTime = 0;
            layer.animationNormal = 0;
            layer.animationFirstRun = true;
            layer.animationEndFrame = false;
            layer.animationLoopFrame = false;
            layer.animationLoopCount = 0;
            layer.animationLoopEvents = null;
            layer.animationStateMachine = null;
        }
        checkAvatarTransformPath(layer, transformPath) {
            let result = false;
            if (layer.animationMaskMap != null) {
                const transformIndex = layer.animationMaskMap.get(transformPath);
                if (transformIndex != null && transformIndex >= 0) {
                    result = true;
                }
            }
            return result;
        }
        filterTargetAvatarMask(layer, target) {
            let result = false;
            if (target.metadata != null && target.metadata.unity != null && target.metadata.unity.bone != null && target.metadata.unity.bone !== "") {
                const transformPath = target.metadata.unity.bone;
                result = this.checkAvatarTransformPath(layer, transformPath);
            }
            return result;
        }
        sortWeightedBlendingList(weightList) {
            if (weightList != null && weightList.length > 0) {
                // Sort In Descending Order
                weightList.sort((left, right) => {
                    if (left.weight < right.weight)
                        return 1;
                    if (left.weight > right.weight)
                        return -1;
                    return 0;
                });
            }
        }
        computeWeightedFrameRatio(weightList) {
            let result = 1.0;
            if (weightList != null && weightList.length > 0) {
                this.sortWeightedBlendingList(weightList);
                this._blendWeights.primary = weightList[0];
                const primaryWeight = this._blendWeights.primary.weight;
                if (primaryWeight < 1.0 && weightList.length > 1) {
                    this._blendWeights.secondary = weightList[1];
                }
                // ..
                if (this._blendWeights.primary != null && this._blendWeights.secondary != null) {
                    const frameWeightDelta = BABYLON.Scalar.Clamp(this._blendWeights.primary.weight);
                    result = BABYLON.Scalar.Lerp(this._blendWeights.secondary.ratio, this._blendWeights.primary.ratio, frameWeightDelta);
                }
                else if (this._blendWeights.primary != null && this._blendWeights.secondary == null) {
                    result = this._blendWeights.primary.ratio;
                }
            }
            return result;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        // Blend Tree Branches -  Helper Functions
        ///////////////////////////////////////////////////////////////////////////////////////////////
        setupTreeBranches(tree) {
            if (tree != null && tree.children != null && tree.children.length > 0) {
                tree.children.forEach((child) => {
                    if (child.type === BABYLON.MotionType.Tree) {
                        this.setupTreeBranches(child.subtree);
                    }
                    else if (child.type === BABYLON.MotionType.Clip) {
                        if (child.motion != null && child.motion !== "") {
                            child.weight = 0;
                            child.ratio = 0;
                            child.track = this.getAnimationGroup(child.motion);
                            if (child.track != null)
                                child.ratio = (BABYLON.AnimationState.TIME / child.track.to);
                        }
                    }
                });
            }
        }
        parseTreeBranches(layer, tree, parentWeight, weightList) {
            if (tree != null) {
                tree.valueParameterX = (tree.blendParameterX != null) ? parseFloat(this.getFloat(tree.blendParameterX).toFixed(2)) : 0;
                tree.valueParameterY = (tree.blendParameterY != null) ? parseFloat(this.getFloat(tree.blendParameterY).toFixed(2)) : 0;
                switch (tree.blendType) {
                    case BABYLON.BlendTreeType.Simple1D:
                        this.parse1DSimpleTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                    case BABYLON.BlendTreeType.SimpleDirectional2D:
                        this.parse2DSimpleDirectionalTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                    case BABYLON.BlendTreeType.FreeformDirectional2D:
                        this.parse2DFreeformDirectionalTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                    case BABYLON.BlendTreeType.FreeformCartesian2D:
                        this.parse2DFreeformCartesianTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                }
            }
        }
        parse1DSimpleTreeBranches(layer, tree, parentWeight, weightList) {
            if (tree != null && tree.children != null && tree.children.length > 0) {
                const blendTreeArray = [];
                tree.children.forEach((child) => {
                    child.weight = 0; // Note: Reset Weight Value
                    const item = {
                        source: child,
                        motion: child.motion,
                        posX: child.threshold,
                        posY: child.threshold,
                        weight: child.weight
                    };
                    blendTreeArray.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate1DSimpleBlendTree(tree.valueParameterX, blendTreeArray);
                blendTreeArray.forEach((element) => {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach((child) => {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        }
        parse2DSimpleDirectionalTreeBranches(layer, tree, parentWeight, weightList) {
            if (tree != null && tree.children != null && tree.children.length > 0) {
                const blendTreeArray = [];
                tree.children.forEach((child) => {
                    child.weight = 0; // Note: Reset Weight Value
                    const item = {
                        source: child,
                        motion: child.motion,
                        posX: child.positionX,
                        posY: child.positionY,
                        weight: child.weight
                    };
                    blendTreeArray.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate2DFreeformDirectional(tree.valueParameterX, tree.valueParameterY, blendTreeArray);
                blendTreeArray.forEach((element) => {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach((child) => {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        }
        parse2DFreeformDirectionalTreeBranches(layer, tree, parentWeight, weightList) {
            if (tree != null && tree.children != null && tree.children.length > 0) {
                const blendTreeArray = [];
                tree.children.forEach((child) => {
                    child.weight = 0; // Note: Reset Weight Value
                    const item = {
                        source: child,
                        motion: child.motion,
                        posX: child.positionX,
                        posY: child.positionY,
                        weight: child.weight
                    };
                    blendTreeArray.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate2DFreeformDirectional(tree.valueParameterX, tree.valueParameterY, blendTreeArray);
                blendTreeArray.forEach((element) => {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach((child) => {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        }
        parse2DFreeformCartesianTreeBranches(layer, tree, parentWeight, weightList) {
            if (tree != null && tree.children != null && tree.children.length > 0) {
                const blendTreeArray = [];
                tree.children.forEach((child) => {
                    child.weight = 0; // Note: Reset Weight Value
                    const item = {
                        source: child,
                        motion: child.motion,
                        posX: child.positionX,
                        posY: child.positionY,
                        weight: child.weight
                    };
                    blendTreeArray.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate2DFreeformCartesian(tree.valueParameterX, tree.valueParameterY, blendTreeArray);
                blendTreeArray.forEach((element) => {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach((child) => {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        }
    }
    AnimationState.FPS = 30;
    AnimationState.EXIT = "[EXIT]";
    AnimationState.TIME = 1; // Note: Must Be One Second Normalized Time
    AnimationState.SPEED = 1.025; // Note: Animation State Blend Speed Factor
    BABYLON.AnimationState = AnimationState;
    ///////////////////////////////////////////
    // Support Classes, Blend Tree Utilities
    ///////////////////////////////////////////
    class BlendTreeValue {
        constructor(config) {
            this.source = config.source;
            this.motion = config.motion;
            this.posX = config.posX || 0;
            this.posY = config.posY || 0;
            this.weight = config.weight || 0;
        }
    }
    BABYLON.BlendTreeValue = BlendTreeValue;
    class BlendTreeUtils {
        static ClampValue(num, min, max) {
            return num <= min ? min : num >= max ? max : num;
        }
        static GetSignedAngle(a, b) {
            return Math.atan2(a.x * b.y - a.y * b.x, a.x * b.x + a.y * b.y);
        }
        static GetLinearInterpolation(x0, y0, x1, y1, x) {
            return y0 + (x - x0) * ((y1 - y0) / (x1 - x0));
        }
        static GetRightNeighbourIndex(inputX, blendTreeArray) {
            blendTreeArray.sort((a, b) => { return (a.posX - b.posX); });
            for (let i = 0; i < blendTreeArray.length; ++i) {
                if (blendTreeArray[i].posX > inputX) {
                    return i;
                }
            }
            return -1;
        }
    }
    BABYLON.BlendTreeUtils = BlendTreeUtils;
    class BlendTreeSystem {
        static Calculate1DSimpleBlendTree(inputX, blendTreeArray) {
            const firstBlendTree = blendTreeArray[0];
            const lastBlendTree = blendTreeArray[blendTreeArray.length - 1];
            if (inputX <= firstBlendTree.posX) {
                firstBlendTree.weight = 1;
            }
            else if (inputX >= lastBlendTree.posX) {
                lastBlendTree.weight = 1;
            }
            else {
                const rightNeighbourBlendTreeIndex = BABYLON.BlendTreeUtils.GetRightNeighbourIndex(inputX, blendTreeArray);
                const leftNeighbour = blendTreeArray[rightNeighbourBlendTreeIndex - 1];
                const rightNeighbour = blendTreeArray[rightNeighbourBlendTreeIndex];
                const interpolatedValue = BABYLON.BlendTreeUtils.GetLinearInterpolation(leftNeighbour.posX, 1, rightNeighbour.posX, 0, inputX);
                leftNeighbour.weight = interpolatedValue;
                rightNeighbour.weight = 1 - leftNeighbour.weight;
            }
        }
        static Calculate2DFreeformDirectional(inputX, inputY, blendTreeArray) {
            BABYLON.BlendTreeSystem.TempVector2_IP.set(inputX, inputY);
            BABYLON.BlendTreeSystem.TempVector2_POSI.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSJ.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIP.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIJ.set(0, 0);
            const kDirScale = 2;
            let totalWeight = 0;
            let inputLength = BABYLON.BlendTreeSystem.TempVector2_IP.length();
            for (let i = 0; i < blendTreeArray.length; ++i) {
                const blendTree = blendTreeArray[i];
                BABYLON.BlendTreeSystem.TempVector2_POSI.set(blendTree.posX, blendTree.posY);
                const posILength = BABYLON.BlendTreeSystem.TempVector2_POSI.length();
                const inputToPosILength = (inputLength - posILength);
                const posIToInputAngle = BABYLON.BlendTreeUtils.GetSignedAngle(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_IP);
                let weight = 1;
                for (let j = 0; j < blendTreeArray.length; ++j) {
                    if (j === i) {
                        continue;
                    }
                    else {
                        BABYLON.BlendTreeSystem.TempVector2_POSJ.set(blendTreeArray[j].posX, blendTreeArray[j].posY);
                        const posJLength = BABYLON.BlendTreeSystem.TempVector2_POSJ.length();
                        const averageLengthOfIJ = (posILength + posJLength) / 2;
                        const magOfPosIToInputPos = (inputToPosILength / averageLengthOfIJ);
                        const magOfIJ = (posJLength - posILength) / averageLengthOfIJ;
                        const angleIJ = BABYLON.BlendTreeUtils.GetSignedAngle(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_POSJ);
                        BABYLON.BlendTreeSystem.TempVector2_POSIP.set(magOfPosIToInputPos, posIToInputAngle * kDirScale);
                        BABYLON.BlendTreeSystem.TempVector2_POSIJ.set(magOfIJ, angleIJ * kDirScale);
                        const lenSqIJ = BABYLON.BlendTreeSystem.TempVector2_POSIJ.lengthSquared();
                        let newWeight = BABYLON.Vector2.Dot(BABYLON.BlendTreeSystem.TempVector2_POSIP, BABYLON.BlendTreeSystem.TempVector2_POSIJ) / lenSqIJ;
                        newWeight = 1 - newWeight;
                        newWeight = BABYLON.BlendTreeUtils.ClampValue(newWeight, 0, 1);
                        weight = Math.min(newWeight, weight);
                    }
                }
                blendTree.weight = weight;
                totalWeight += weight;
            }
            for (const blendTree of blendTreeArray) {
                blendTree.weight /= totalWeight;
            }
        }
        static Calculate2DFreeformCartesian(inputX, inputY, blendTreeArray) {
            BABYLON.BlendTreeSystem.TempVector2_IP.set(inputX, inputY);
            BABYLON.BlendTreeSystem.TempVector2_POSI.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSJ.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIP.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIJ.set(0, 0);
            let totalWeight = 0;
            for (let i = 0; i < blendTreeArray.length; ++i) {
                const blendTree = blendTreeArray[i];
                BABYLON.BlendTreeSystem.TempVector2_POSI.set(blendTree.posX, blendTree.posY);
                BABYLON.BlendTreeSystem.TempVector2_IP.subtractToRef(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_POSIP);
                let weight = 1;
                for (let j = 0; j < blendTreeArray.length; ++j) {
                    if (j === i) {
                        continue;
                    }
                    else {
                        BABYLON.BlendTreeSystem.TempVector2_POSJ.set(blendTreeArray[j].posX, blendTreeArray[j].posY);
                        BABYLON.BlendTreeSystem.TempVector2_POSJ.subtractToRef(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_POSIJ);
                        const lenSqIJ = BABYLON.BlendTreeSystem.TempVector2_POSIJ.lengthSquared();
                        let newWeight = BABYLON.Vector2.Dot(BABYLON.BlendTreeSystem.TempVector2_POSIP, BABYLON.BlendTreeSystem.TempVector2_POSIJ) / lenSqIJ;
                        newWeight = 1 - newWeight;
                        newWeight = BABYLON.BlendTreeUtils.ClampValue(newWeight, 0, 1);
                        weight = Math.min(weight, newWeight);
                    }
                }
                blendTree.weight = weight;
                totalWeight += weight;
            }
            for (const blendTree of blendTreeArray) {
                blendTree.weight /= totalWeight;
            }
        }
    }
    BlendTreeSystem.TempVector2_IP = new BABYLON.Vector2(0, 0);
    BlendTreeSystem.TempVector2_POSI = new BABYLON.Vector2(0, 0);
    BlendTreeSystem.TempVector2_POSJ = new BABYLON.Vector2(0, 0);
    BlendTreeSystem.TempVector2_POSIP = new BABYLON.Vector2(0, 0);
    BlendTreeSystem.TempVector2_POSIJ = new BABYLON.Vector2(0, 0);
    BABYLON.BlendTreeSystem = BlendTreeSystem;
    ///////////////////////////////////////////
    // Support Classes, Enums And Interfaces
    ///////////////////////////////////////////
    class MachineState {
        constructor() { }
    }
    BABYLON.MachineState = MachineState;
    class TransitionCheck {
    }
    BABYLON.TransitionCheck = TransitionCheck;
    class AnimationMixer {
    }
    BABYLON.AnimationMixer = AnimationMixer;
    class BlendingWeights {
    }
    BABYLON.BlendingWeights = BlendingWeights;
    let MotionType;
    (function (MotionType) {
        MotionType[MotionType["Clip"] = 0] = "Clip";
        MotionType[MotionType["Tree"] = 1] = "Tree";
    })(MotionType = BABYLON.MotionType || (BABYLON.MotionType = {}));
    let ConditionMode;
    (function (ConditionMode) {
        ConditionMode[ConditionMode["If"] = 1] = "If";
        ConditionMode[ConditionMode["IfNot"] = 2] = "IfNot";
        ConditionMode[ConditionMode["Greater"] = 3] = "Greater";
        ConditionMode[ConditionMode["Less"] = 4] = "Less";
        ConditionMode[ConditionMode["Equals"] = 6] = "Equals";
        ConditionMode[ConditionMode["NotEqual"] = 7] = "NotEqual";
    })(ConditionMode = BABYLON.ConditionMode || (BABYLON.ConditionMode = {}));
    let InterruptionSource;
    (function (InterruptionSource) {
        InterruptionSource[InterruptionSource["None"] = 0] = "None";
        InterruptionSource[InterruptionSource["Source"] = 1] = "Source";
        InterruptionSource[InterruptionSource["Destination"] = 2] = "Destination";
        InterruptionSource[InterruptionSource["SourceThenDestination"] = 3] = "SourceThenDestination";
        InterruptionSource[InterruptionSource["DestinationThenSource"] = 4] = "DestinationThenSource";
    })(InterruptionSource = BABYLON.InterruptionSource || (BABYLON.InterruptionSource = {}));
    let BlendTreeType;
    (function (BlendTreeType) {
        BlendTreeType[BlendTreeType["Simple1D"] = 0] = "Simple1D";
        BlendTreeType[BlendTreeType["SimpleDirectional2D"] = 1] = "SimpleDirectional2D";
        BlendTreeType[BlendTreeType["FreeformDirectional2D"] = 2] = "FreeformDirectional2D";
        BlendTreeType[BlendTreeType["FreeformCartesian2D"] = 3] = "FreeformCartesian2D";
        BlendTreeType[BlendTreeType["Direct"] = 4] = "Direct";
        BlendTreeType[BlendTreeType["Clip"] = 5] = "Clip";
    })(BlendTreeType = BABYLON.BlendTreeType || (BABYLON.BlendTreeType = {}));
    let BlendTreePosition;
    (function (BlendTreePosition) {
        BlendTreePosition[BlendTreePosition["Lower"] = 0] = "Lower";
        BlendTreePosition[BlendTreePosition["Upper"] = 1] = "Upper";
    })(BlendTreePosition = BABYLON.BlendTreePosition || (BABYLON.BlendTreePosition = {}));
    let AnimatorParameterType;
    (function (AnimatorParameterType) {
        AnimatorParameterType[AnimatorParameterType["Float"] = 1] = "Float";
        AnimatorParameterType[AnimatorParameterType["Int"] = 3] = "Int";
        AnimatorParameterType[AnimatorParameterType["Bool"] = 4] = "Bool";
        AnimatorParameterType[AnimatorParameterType["Trigger"] = 9] = "Trigger";
    })(AnimatorParameterType = BABYLON.AnimatorParameterType || (BABYLON.AnimatorParameterType = {}));
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon audio source manager pro class
     * @class AudioSource - All rights reserved (c) 2020 Mackey Kinard
     */
    class AudioSource extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this._audio = null;
            this._name = null;
            this._loop = false;
            this._mute = false;
            this._pitch = 1;
            this._volume = 1;
            this._preload = false;
            this._priority = 128;
            this._panstereo = 0;
            this._mindistance = 1;
            this._maxdistance = 50;
            this._rolloffmode = "linear";
            this._rollofffactor = 1;
            this._playonawake = true;
            this._spatialblend = 0;
            this._preloaderUrl = null;
            this._reverbzonemix = 1;
            this._lastmutedvolume = null;
            this._bypasseffects = false;
            this._bypassreverbzones = false;
            this._bypasslistenereffects = false;
            this._initializedReadyInstance = false;
            /** Register handler that is triggered when the audio clip is ready */
            this.onReadyObservable = new BABYLON.Observable();
        }
        getSoundClip() { return this._audio; }
        getAudioElement() { return (this._audio != null) ? this._audio._htmlAudioElement : null; }
        awake() { this.awakeAudioSource(); }
        destroy() { this.destroyAudioSource(); }
        awakeAudioSource() {
            this._name = this.getProperty("name", this._name);
            this._loop = this.getProperty("loop", this._loop);
            this._mute = this.getProperty("mute", this._mute);
            this._pitch = this.getProperty("pitch", this._pitch);
            this._volume = this.getProperty("volume", this._volume);
            this._preload = this.getProperty("preload", this._preload);
            this._priority = this.getProperty("priority", this._priority);
            this._panstereo = this.getProperty("panstereo", this._panstereo);
            this._playonawake = this.getProperty("playonawake", this._playonawake);
            this._mindistance = this.getProperty("mindistance", this._mindistance);
            this._maxdistance = this.getProperty("maxdistance", this._maxdistance);
            this._rolloffmode = this.getProperty("rolloffmode", this._rolloffmode);
            this._rollofffactor = this.getProperty("rollofffactor", this._rollofffactor);
            this._spatialblend = this.getProperty("spatialblend", this._spatialblend);
            this._reverbzonemix = this.getProperty("reverbzonemix", this._reverbzonemix);
            this._bypasseffects = this.getProperty("bypasseffects", this._bypasseffects);
            this._bypassreverbzones = this.getProperty("bypassreverbzones", this._bypassreverbzones);
            this._bypasslistenereffects = this.getProperty("bypasslistenereffects", this._bypasslistenereffects);
            if (this._name == null || this._name === "")
                this._name = "Unknown";
            // ..
            const filename = this.getProperty("file");
            if (filename != null && filename !== "") {
                const rootUrl = BABYLON.SceneManager.GetRootUrl(this.scene);
                const playUrl = (rootUrl + filename);
                if (playUrl != null && playUrl !== "") {
                    if (this._preload === true) {
                        this._preloaderUrl = playUrl;
                    }
                    else {
                        this.setDataSource(playUrl);
                    }
                }
            }
        }
        destroyAudioSource() {
            this.onReadyObservable.clear();
            this.onReadyObservable = null;
            if (this._audio != null) {
                this._audio.dispose();
                this._audio = null;
            }
        }
        /**
         * Gets the ready status for track
         */
        isReady() {
            let result = false;
            if (this._audio != null) {
                result = this._audio.isReady();
            }
            return result;
        }
        /**
         * Gets the playing status for track
         */
        isPlaying() {
            let result = false;
            if (this._audio != null) {
                result = this._audio.isPlaying;
            }
            return result;
        }
        /**
         * Gets the paused status for track
         */
        isPaused() {
            let result = false;
            if (this._audio != null) {
                result = this._audio.isPaused;
            }
            return result;
        }
        /**
         * Play the sound track
         * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.
         * @param offset (optional) Start the sound at a specific time in seconds
         * @param length (optional) Sound duration (in seconds)
         */
        play(time, offset, length) {
            if (BABYLON.SceneManager.HasAudioContext()) {
                this.internalPlay(time, offset, length);
            }
            else {
                BABYLON.Engine.audioEngine.onAudioUnlockedObservable.addOnce(() => { this.internalPlay(time, offset, length); });
            }
            return true;
        }
        internalPlay(time, offset, length) {
            if (this._audio != null) {
                if (this._initializedReadyInstance === true) {
                    this._audio.play(time, offset, length);
                }
                else {
                    this.onReadyObservable.addOnce(() => { this._audio.play(time, offset, length); });
                }
            }
        }
        /**
         * Pause the sound track
         */
        pause() {
            let result = false;
            if (this._audio != null) {
                this._audio.pause();
                result = true;
            }
            return result;
        }
        /**
         * Stop the sound track
         * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.
         */
        stop(time) {
            let result = false;
            if (this._audio != null) {
                this._audio.stop(time);
                result = true;
            }
            return result;
        }
        /**
         * Mute the sound track
         * @param time (optional) Mute the sound after X seconds. Start immediately (0) by default.
         */
        mute(time) {
            let result = false;
            if (this._audio != null) {
                this._lastmutedvolume = this._audio.getVolume();
                this._audio.setVolume(0, time);
            }
            return result;
        }
        /**
         * Unmute the sound track
         * @param time (optional) Unmute the sound after X seconds. Start immediately (0) by default.
         */
        unmute(time) {
            let result = false;
            if (this._audio != null) {
                if (this._lastmutedvolume != null) {
                    this._audio.setVolume(this._lastmutedvolume, time);
                    this._lastmutedvolume = null;
                }
            }
            return result;
        }
        /**
         * Gets the volume of the track
         */
        getVolume() {
            let result = 0;
            if (this._audio != null) {
                result = this._audio.getVolume();
            }
            else {
                result = this._volume;
            }
            return result;
        }
        /**
         * Sets the volume of the track
         * @param volume Define the new volume of the sound
         * @param time Define time for gradual change to new volume
         */
        setVolume(volume, time) {
            let result = false;
            this._volume = volume;
            if (this._audio != null) {
                this._audio.setVolume(this._volume, time);
            }
            result = true;
            return result;
        }
        /**
         * Gets the spatial sound option of the track
         */
        getSpatialSound() {
            let result = false;
            if (this._audio != null) {
                result = this._audio.spatialSound;
            }
            return result;
        }
        /**
         * Gets the spatial sound option of the track
         * @param value Define the value of the spatial sound
         */
        setSpatialSound(value) {
            if (this._audio != null) {
                this._audio.spatialSound = value;
            }
        }
        /**
         * Sets the sound track playback speed
         * @param rate the audio playback rate
         */
        setPlaybackSpeed(rate) {
            if (this._audio != null) {
                this._audio.setPlaybackRate(rate);
            }
        }
        /**
         * Gets the current time of the track
         */
        getCurrentTrackTime() {
            let result = 0;
            if (this._audio != null) {
                result = this._audio.currentTime;
            }
            return result;
        }
        /** Set audio data source */
        setDataSource(source) {
            if (this._audio != null) {
                this._audio.dispose();
                this._audio = null;
            }
            const spatialBlend = (this._spatialblend >= 0.1);
            const distanceModel = (this._rolloffmode === "logarithmic") ? "exponential" : "linear";
            const htmlAudioElementRequired = (this.transform.metadata != null && this.transform.metadata.vtt != null && this.transform.metadata.vtt === true);
            this._initializedReadyInstance = false;
            this._audio = new BABYLON.Sound(this._name, source, this.scene, () => {
                this._lastmutedvolume = this._volume;
                this._audio.setVolume((this._mute === true) ? 0 : this._volume);
                this._audio.setPlaybackRate(this._pitch);
                this._initializedReadyInstance = true;
                if (this.onReadyObservable.hasObservers() === true) {
                    this.onReadyObservable.notifyObservers(this._audio);
                }
                // ..
                // Support Auto Play On Awake
                // ..
                if (this._playonawake === true)
                    this.play();
            }, {
                loop: this._loop,
                autoplay: false,
                refDistance: this._mindistance,
                maxDistance: this._maxdistance,
                rolloffFactor: this._rollofffactor,
                spatialSound: spatialBlend,
                distanceModel: distanceModel,
                streaming: htmlAudioElementRequired
            });
            this._audio.setPosition(this.transform.position.clone());
            if (spatialBlend === true)
                this._audio.attachToMesh(this.transform);
        }
        /** Add audio preloader asset tasks (https://doc.babylonjs.com/divingDeeper/importers/assetManager) */
        addPreloaderTasks(assetsManager) {
            if (this._preload === true) {
                const assetTask = assetsManager.addBinaryFileTask((this.transform.name + ".AudioTask"), this._preloaderUrl);
                assetTask.onSuccess = (task) => { this.setDataSource(task.data); };
                assetTask.onError = (task, message, exception) => { console.error(message, exception); };
            }
        }
    }
    BABYLON.AudioSource = AudioSource;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon kinematic character controller pro class (Native Bullet Physics 2.82)
     * @class CharacterController - All rights reserved (c) 2020 Mackey Kinard
     */
    class CharacterController extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this._abstractMesh = null;
            this._avatarRadius = 0.5;
            this._avatarHeight = 2;
            this._centerOffset = new BABYLON.Vector3(0, 0, 0);
            this._slopeLimit = 45;
            this._skinWidth = 0.08;
            this._stepOffset = 0.3; // See https://discourse.threejs.org/t/ammo-js-with-three-js/12530/47 (Works Best With 0.535 and Box Or Cylinder Shape - ???)
            this._capsuleSegments = 16;
            this._minMoveDistance = 0.001;
            this._isPhysicsReady = false;
            this._maxCollisions = 4;
            this._createCylinderShape = false;
            this._movementVelocity = new BABYLON.Vector3(0, 0, 0);
            this._tmpPositionBuffer = new BABYLON.Vector3(0, 0, 0);
            this._tmpCollisionContacts = null;
            this.updatePosition = true;
            this.syncGhostToTransform = true;
            /** Register handler that is triggered when the transform position has been updated */
            this.onUpdatePositionObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact has entered */
            this.onCollisionEnterObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact is active */
            this.onCollisionStayObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact has exited */
            this.onCollisionExitObservable = new BABYLON.Observable();
            this.m_character = null;
            this.m_ghostShape = null;
            this.m_ghostObject = null;
            this.m_ghostCollision = null;
            this.m_ghostTransform = null;
            this.m_ghostPosition = null;
            this.m_startPosition = null;
            this.m_startTransform = null;
            this.m_walkDirection = null;
            this.m_warpPosition = null;
            this.m_turningRate = 0;
            this.m_moveDeltaX = 0;
            this.m_moveDeltaZ = 0;
            this.m_capsuleSize = BABYLON.Vector3.Zero();
            this.m_physicsEngine = null;
            this.m_characterPosition = BABYLON.Vector3.Zero();
        }
        preCreateCylinderShape() { this._createCylinderShape = true; }
        getInternalCharacter() { return this.m_character; }
        getCollisionShape() { return this.m_ghostShape; }
        getAvatarRadius() { return this._avatarRadius; }
        getAvatarHeight() { return this._avatarHeight; }
        getSkinWidth() { return this._skinWidth; }
        getStepOffset() { return this._stepOffset; }
        getCenterOffset() { return this._centerOffset; }
        getCapsuleSize() { return this.m_capsuleSize; }
        getMinMoveDistance() { return this._minMoveDistance; }
        setMinMoveDistance(distance) { this._minMoveDistance = distance; }
        getVerticalVelocity() { return (this.m_character != null && this.m_character.getVerticalVelocity) ? this.m_character.getVerticalVelocity() : 0; } // Note: Toolkit Addon Function
        getAddedMargin() { return (this.m_character != null && this.m_character.getAddedMargin) ? this.m_character.getAddedMargin() : 0; } // Note: Toolkit Addon Function
        setAddedMargin(margin) { if (this.m_character != null && this.m_character.getAddedMargin)
            this.m_character.setAddedMargin(margin); } // Note: Toolkit Addon Function
        setMaxJumpHeight(maxJumpHeight) { if (this.m_character != null)
            this.m_character.setMaxJumpHeight(maxJumpHeight); }
        setFallingSpeed(fallSpeed) { if (this.m_character != null)
            this.m_character.setFallSpeed(fallSpeed); }
        getSlopeLimit() { return (this.m_character != null) ? this.m_character.getMaxSlope() : 0; }
        setSlopeLimit(slopeRadians) { if (this.m_character != null)
            this.m_character.setMaxSlope(slopeRadians); }
        setUpAxis(axis) { if (this.m_character != null)
            this.m_character.setUpAxis(axis); }
        getGravity() { return (this.m_character != null) ? this.m_character.getGravity() : 0; }
        setGravity(gravity) { if (this.m_character != null)
            this.m_character.setGravity(gravity); }
        isGrounded() { return (this.m_character != null) ? this.m_character.onGround() : false; }
        isReady() { return (this.m_character != null); }
        canJump() { return (this.m_character != null) ? this.m_character.canJump() : false; }
        internalWarp(position) { if (this.m_character != null)
            this.m_character.warp(position); } // Position: Ammo.btVector3
        internalJump() { if (this.m_character != null)
            this.m_character.jump(); }
        internalSetJumpSpeed(speed) { if (this.m_character != null)
            this.m_character.setJumpSpeed(speed); }
        internalSetWalkDirection(direction) { if (this.m_character != null)
            this.m_character.setWalkDirection(direction); } // Direction: Ammo.btVector3
        internalSetVelocityForTimeInterval(velocity, interval) { if (this.m_character != null)
            this.m_character.setVelocityForTimeInterval(velocity, interval); } // Velocity: Ammo.btVector3
        awake() { this.awakeMovementState(); }
        start() { this.startMovementState(); }
        update() { this.updateMovementState(); }
        destroy() { this.destroyMovementState(); }
        //////////////////////////////////////////////////
        // Protected Character Movement State Functions //
        //////////////////////////////////////////////////
        awakeMovementState() {
            this._abstractMesh = this.getAbstractMesh();
            this._avatarRadius = this.getProperty("avatarRadius", this._avatarRadius);
            this._avatarHeight = this.getProperty("avatarHeight", this._avatarHeight);
            this._slopeLimit = this.getProperty("slopeLimit", this._slopeLimit);
            this._skinWidth = this.getProperty("skinWidth", this._skinWidth);
            this._stepOffset = this.getProperty("stepOffset", this._stepOffset);
            this._minMoveDistance = this.getProperty("minMoveDistance", this._minMoveDistance);
            this._capsuleSegments = this.getProperty("capsuleSegments", this._capsuleSegments);
            this.m_warpPosition = new Ammo.btVector3(0, 0, 0);
            this.m_walkDirection = new Ammo.btVector3(0, 0, 0);
            this.m_physicsEngine = BABYLON.SceneManager.GetPhysicsEngine(this.scene);
            const centerOffsetData = this.getProperty("centerOffset");
            if (centerOffsetData != null)
                this._centerOffset = BABYLON.Utilities.ParseVector3(centerOffsetData);
        }
        startMovementState() {
            this.setupMovementState();
            this.updateMovementState();
        }
        setupMovementState() {
            this.setMaxNotifications(this._maxCollisions);
            const world = BABYLON.SceneManager.GetPhysicsWorld(this.scene);
            if (world != null) {
                const startingPos = BABYLON.Utilities.GetAbsolutePosition(this.transform, this._centerOffset);
                this.m_startPosition = new Ammo.btVector3(startingPos.x, startingPos.y, startingPos.z);
                this.m_startTransform = new Ammo.btTransform();
                this.m_startTransform.setIdentity();
                this.m_startTransform.setOrigin(this.m_startPosition);
                // ..
                const capsuleSize = new BABYLON.Vector3(this._avatarRadius, this._avatarHeight, 1);
                capsuleSize.x *= Math.max(Math.abs(this.transform.scaling.x), Math.abs(this.transform.scaling.z));
                capsuleSize.y *= this.transform.scaling.y;
                this.m_capsuleSize.copyFrom(capsuleSize);
                // ..
                // Create a debug collision shape
                // ..
                const showDebugColliders = BABYLON.Utilities.ShowDebugColliders();
                const colliderVisibility = BABYLON.Utilities.ColliderVisibility();
                const colliderRenderGroup = BABYLON.Utilities.ColliderRenderGroup();
                if (showDebugColliders === true && this.transform._debugCollider == null) {
                    const debugName = this.transform.name + ".Debug";
                    // ELLIPSE: const debugCapsule:BABYLON.Mesh = BABYLON.MeshBuilder.CreateSphere(debugName, { segments: 16, diameterX: (capsuleSize.x * 2), diameterY: (capsuleSize.y * 1), diameterZ: (capsuleSize.x * 2) }, this.scene);
                    let debugCapsule = null;
                    if (this._createCylinderShape === true) {
                        debugCapsule = BABYLON.MeshBuilder.CreateCylinder(debugName, { tessellation: this._capsuleSegments, subdivisions: 8, height: capsuleSize.y, diameter: (capsuleSize.x * 2) }, this.scene);
                    }
                    else {
                        debugCapsule = BABYLON.MeshBuilder.CreateCapsule(debugName, { tessellation: this._capsuleSegments, subdivisions: 8, capSubdivisions: 8, height: capsuleSize.y, radius: capsuleSize.x }, this.scene);
                    }
                    debugCapsule.position.set(0, 0, 0);
                    debugCapsule.rotationQuaternion = this.transform.rotationQuaternion.clone();
                    debugCapsule.setParent(this.transform);
                    debugCapsule.position.copyFrom(this._centerOffset);
                    debugCapsule.visibility = colliderVisibility;
                    debugCapsule.renderingGroupId = colliderRenderGroup;
                    debugCapsule.material = BABYLON.Utilities.GetColliderMaterial(this.scene);
                    debugCapsule.checkCollisions = false;
                    debugCapsule.isPickable = false;
                    this.transform._debugCollider = debugCapsule;
                }
                // ELLIPSE: this.m_ghostShape = BABYLON.SceneManager.CreatePhysicsEllipsoidShape(new Ammo.btVector3(this._avatarRadius, (this._avatarHeight * 0.5), this._avatarRadius));
                if (this._createCylinderShape === true) {
                    this.m_ghostShape = new Ammo.btCylinderShape(new Ammo.btVector3(this._avatarRadius, (this._avatarHeight * 0.5), this._avatarRadius));
                }
                else {
                    this.m_ghostShape = new Ammo.btCapsuleShape(this._avatarRadius, (this._avatarHeight * 0.5));
                }
                // Set ghost shape margin size
                this.m_ghostShape.setMargin(this._skinWidth);
                // Create a ghost collision object
                this.m_ghostObject = new Ammo.btPairCachingGhostObject();
                this.m_ghostObject.setWorldTransform(this.m_startTransform);
                this.m_ghostObject.setCollisionShape(this.m_ghostShape);
                this.m_ghostObject.setCollisionFlags(BABYLON.CollisionFlags.CF_CHARACTER_OBJECT);
                this.m_ghostObject.setActivationState(4);
                this.m_ghostObject.activate(true);
                // Create a ghost collision casting
                this.m_ghostCollision = Ammo.castObject(this.m_ghostObject, Ammo.btCollisionObject);
                this.m_ghostCollision.entity = this._abstractMesh;
                // Create kinematic character controller
                this.m_character = new Ammo.btKinematicCharacterController(this.m_ghostObject, this.m_ghostShape, this._stepOffset);
                this.m_character.setUseGhostSweepTest(true);
                this.m_character.setUpInterpolate(true);
                this.m_character.setGravity(BABYLON.System.Gravity3G);
                this.m_character.setMaxSlope(BABYLON.Tools.ToRadians(this._slopeLimit + 1));
                // Add ghost object and character to world
                world.addCollisionObject(this.m_ghostObject, BABYLON.CollisionFilters.CharacterFilter, BABYLON.CollisionFilters.StaticFilter | BABYLON.CollisionFilters.DefaultFilter | BABYLON.CollisionFilters.CharacterFilter);
                world.addAction(this.m_character);
            }
            else {
                BABYLON.Tools.Warn("Null physics world detected. Failed to create character controller: " + this.transform.name);
            }
            this._isPhysicsReady = (this.m_physicsEngine != null && this._tmpCollisionContacts != null && this.m_ghostObject != null && this._abstractMesh != null);
        }
        syncMovementState() {
            if (this._isPhysicsReady === true) {
                this.m_ghostTransform = this.m_ghostObject.getWorldTransform();
                if (this.m_ghostTransform != null) {
                    this.m_ghostPosition = this.m_ghostTransform.getOrigin();
                }
                else {
                    this.m_ghostPosition = null;
                }
            }
        }
        updateMovementState() {
            this.syncMovementState();
            if (this._isPhysicsReady === true) {
                if (this.m_ghostPosition != null) {
                    if (this.updatePosition === true) {
                        // DEPRECIATED: this.transform.position.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
                        this.m_characterPosition.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
                        if (this._centerOffset != null) {
                            // Note: Subtract Character Controller Center Offset
                            this.m_characterPosition.subtractInPlace(this._centerOffset);
                        }
                        this.transform.position.copyFrom(this.m_characterPosition);
                    }
                    else {
                        if (this.syncGhostToTransform === true) {
                            this.setGhostWorldPosition(this.transform.position);
                        }
                    }
                    if (this.onUpdatePositionObservable.hasObservers() === true) {
                        this.onUpdatePositionObservable.notifyObservers(this.transform);
                    }
                }
            }
            this.parseGhostCollisionContacts();
        }
        parseGhostCollisionContacts() {
            if (this._isPhysicsReady === true) {
                const hasEnterObservers = this.onCollisionEnterObservable.hasObservers();
                const hasStayObservers = this.onCollisionStayObservable.hasObservers();
                const hasExitObservers = this.onCollisionExitObservable.hasObservers();
                if (hasEnterObservers || hasStayObservers || hasExitObservers) {
                    let index = 0; // Note: Flag All Collision List Items For End Contact State
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        this._tmpCollisionContacts[index].reset = true;
                    }
                    // ..
                    // Parse Overlapping Ghost Contact Objects
                    // ..
                    let contacts = this.m_ghostObject.getNumOverlappingObjects();
                    if (contacts > this._maxCollisions)
                        contacts = this._maxCollisions;
                    if (contacts > 0) {
                        for (index = 0; index < contacts; index++) {
                            const contactObject = this.m_ghostObject.getOverlappingObject(index);
                            if (contactObject != null) {
                                const contactBody = Ammo.castObject(contactObject, Ammo.btCollisionObject);
                                if (contactBody != null && contactBody.entity != null && contactBody.isActive()) {
                                    let foundindex = -1;
                                    const contactMesh = contactBody.entity;
                                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                        const check = this._tmpCollisionContacts[index];
                                        if (check.mesh != null && check.mesh === contactMesh) {
                                            check.state = 1;
                                            check.reset = false;
                                            foundindex = index;
                                            break;
                                        }
                                    }
                                    if (foundindex === -1) {
                                        for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                            const insert = this._tmpCollisionContacts[index];
                                            if (insert.mesh == null) {
                                                insert.mesh = contactMesh;
                                                insert.state = 0;
                                                insert.reset = false;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // ..
                    // Dispatch Ghost Collision Contact State
                    // ..
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        const info = this._tmpCollisionContacts[index];
                        if (info.reset === true) {
                            // Dispatch On Collision Exit Event
                            if (hasExitObservers && info.mesh != null) {
                                this.onCollisionExitObservable.notifyObservers(info.mesh);
                            }
                            // Reset Collision Contact Info Item
                            info.mesh = null;
                            info.state = 0;
                            info.reset = false;
                        }
                        else {
                            if (info.state === 0) {
                                // Dispatch On Collision Enter Event
                                if (hasEnterObservers && info.mesh != null) {
                                    this.onCollisionEnterObservable.notifyObservers(info.mesh);
                                }
                            }
                            else {
                                // Dispatch On Collision Stay Event
                                if (hasStayObservers && info.mesh != null) {
                                    this.onCollisionStayObservable.notifyObservers(info.mesh);
                                }
                            }
                        }
                    }
                }
            }
        }
        destroyMovementState() {
            this.m_physicsEngine = null;
            if (this.m_character != null) {
                Ammo.destroy(this.m_character);
                this.m_character = null;
            }
            if (this.m_ghostObject != null) {
                Ammo.destroy(this.m_ghostObject);
                this.m_ghostObject = null;
            }
            if (this.m_ghostShape != null) {
                Ammo.destroy(this.m_ghostShape);
                this.m_ghostShape = null;
            }
            if (this.m_ghostCollision != null) {
                Ammo.destroy(this.m_ghostCollision); // ???
                this.m_ghostCollision = null;
            }
            if (this.m_ghostPosition != null) {
                Ammo.destroy(this.m_ghostPosition); // ???
                this.m_ghostPosition = null;
            }
            if (this.m_ghostTransform != null) {
                Ammo.destroy(this.m_ghostTransform); // ???
                this.m_ghostTransform = null;
            }
            if (this.m_startPosition != null) {
                Ammo.destroy(this.m_startPosition);
                this.m_startPosition = null;
            }
            if (this.m_startTransform != null) {
                Ammo.destroy(this.m_startTransform);
                this.m_startTransform = null;
            }
            if (this.m_warpPosition != null) {
                Ammo.destroy(this.m_warpPosition);
                this.m_warpPosition = null;
            }
            if (this.m_walkDirection != null) {
                Ammo.destroy(this.m_walkDirection);
                this.m_walkDirection = null;
            }
            this.onUpdatePositionObservable.clear();
            this.onUpdatePositionObservable = null;
            this.onCollisionEnterObservable.clear();
            this.onCollisionEnterObservable = null;
            this.onCollisionStayObservable.clear();
            this.onCollisionStayObservable = null;
            this.onCollisionExitObservable.clear();
            this.onCollisionExitObservable = null;
            this._tmpCollisionContacts = null;
            this._tmpPositionBuffer = null;
            this._abstractMesh = null;
        }
        ////////////////////////////////////////////////////
        // Character Controller Advanced Helper Functions //
        ////////////////////////////////////////////////////
        /** Gets the ghost collision shape margin value. (Advanved Use Only) */
        getGhostMargin() {
            let result = 0;
            if (this.m_ghostShape != null && this.m_ghostShape.getMargin) {
                result = this.m_ghostShape.getMargin();
            }
            return result;
        }
        /** Sets ghost collision shape margin value. (Advanved Use Only) */
        setGhostMargin(margin) {
            if (this.m_ghostShape != null && this.m_ghostShape.setMargin) {
                this.m_ghostShape.setMargin(margin);
            }
        }
        /** Gets character slope slide patch state using physics ghost object. (Advanved Use Only) */
        getUseSlopeSlidePatch() {
            let result = false;
            if (this.m_character != null && this.m_character.get_m_useSlopeSlidePatch) {
                result = this.m_character.get_m_useSlopeSlidePatch();
            }
            return result;
        }
        /** Sets character slope slide patch state using physics ghost object. (Advanved Use Only) */
        setUseSlopeSlidePatch(use) {
            if (this.m_character != null && this.m_character.set_m_useSlopeSlidePatch) {
                this.m_character.set_m_useSlopeSlidePatch(use);
            }
        }
        /** Sets the maximum number of simultaneous contact notfications to dispatch per frame. Defaults value is 4. (Advanved Use Only) */
        setMaxNotifications(max) {
            this._maxCollisions = max;
            this._tmpCollisionContacts = [];
            for (let index = 0; index < this._maxCollisions; index++) {
                this._tmpCollisionContacts.push(new BABYLON.CollisionContactInfo());
            }
        }
        /** Sets character collision activation state using physics ghost object. (Advanved Use Only) */
        setActivationState(state) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.setActivationState) {
                this.m_ghostCollision.setActivationState(state);
            }
        }
        /** Gets character collision group filter using physics ghost object. (Advanved Use Only) */
        getCollisionFilterGroup() {
            let result = -1;
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                result = this.m_ghostCollision.getBroadphaseHandle().get_m_collisionFilterGroup();
            }
            return result;
        }
        /** Sets character collision group filter using physics ghost object. (Advanved Use Only) */
        setCollisionFilterGroup(group) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                this.m_ghostCollision.getBroadphaseHandle().set_m_collisionFilterGroup(group);
            }
        }
        /** Gets character collision mask filter using physics ghost object. (Advanved Use Only) */
        getCollisionFilterMask() {
            let result = -1;
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                result = this.m_ghostCollision.getBroadphaseHandle().get_m_collisionFilterMask();
            }
            return result;
        }
        /** Sets the character collision mask filter using physics ghost object. (Advanved Use Only) */
        setCollisionFilterMask(mask) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                this.m_ghostCollision.getBroadphaseHandle().set_m_collisionFilterMask(mask);
            }
        }
        /** Gets the chracter contact processing threshold using physics ghost object. (Advanved Use Only) */
        getContactProcessingThreshold() {
            let result = -1;
            if (this.m_ghostCollision != null && this.m_ghostCollision.getContactProcessingThreshold) {
                result = this.m_ghostCollision.getContactProcessingThreshold();
            }
            return result;
        }
        /** Sets character contact processing threshold using physics ghost object. (Advanved Use Only) */
        setContactProcessingThreshold(threshold) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.setContactProcessingThreshold) {
                this.m_ghostCollision.setContactProcessingThreshold(threshold);
            }
        }
        /** Get the current position of the physics ghost object world transform. (Advanved Use Only) */
        getGhostWorldPosition() {
            const result = new BABYLON.Vector3(0, 0, 0);
            if (this.m_ghostPosition != null) {
                result.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
            }
            return result;
        }
        /** Get the current position of the physics ghost object world transform. (Advanved Use Only) */
        getGhostWorldPositionToRef(result) {
            if (this.m_ghostPosition != null && result != null) {
                result.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
            }
        }
        /** Manually set the position of the physics ghost object world transform. (Advanved Use Only) */
        setGhostWorldPosition(position) {
            if (this.m_ghostObject != null && this.m_ghostTransform != null) {
                if (this.m_ghostPosition != null && position != null) {
                    this.m_ghostPosition.setValue(position.x, position.y, position.z);
                    this.m_ghostTransform.setOrigin(this.m_ghostPosition);
                }
                this.m_ghostObject.setWorldTransform(this.m_ghostTransform);
            }
        }
        /** Set ghost collision shape local scaling. (Advanved Use Only) */
        scaleGhostCollisionShape(x, y, z) {
            this.m_ghostShape.setLocalScaling(new Ammo.btVector3(x, y, z));
            if (this.transform._debugCollider != null && this.transform._debugCollider.scaling != null) {
                this.transform._debugCollider.scaling.set(x, y, z);
            }
        }
        ////////////////////////////////////////////////////
        // Public Character Controller Movement Functions //
        ////////////////////////////////////////////////////
        /** Sets the kinematic character position to the specified location. */
        set(x, y, z) {
            this._tmpPositionBuffer.set(x, y, z);
            this.setGhostWorldPosition(this._tmpPositionBuffer);
        }
        /** Translates the kinematic character with the specfied velocity. */
        move(velocity) {
            if (velocity != null) {
                this.m_moveDeltaX = velocity.x;
                this.m_moveDeltaZ = velocity.z;
                if (Math.abs(velocity.x) < this._minMoveDistance) {
                    if (velocity.x > 0) {
                        this.m_moveDeltaX = this._minMoveDistance;
                    }
                    else if (velocity.x < 0) {
                        this.m_moveDeltaX = -this._minMoveDistance;
                    }
                }
                if (Math.abs(velocity.z) < this._minMoveDistance) {
                    if (velocity.z > 0) {
                        this.m_moveDeltaZ = this._minMoveDistance;
                    }
                    else if (velocity.z < 0) {
                        this.m_moveDeltaZ = -this._minMoveDistance;
                    }
                }
                if (this.m_walkDirection != null) {
                    this._movementVelocity.set(this.m_moveDeltaX, 0, this.m_moveDeltaZ);
                    this.m_walkDirection.setValue(this._movementVelocity.x, this._movementVelocity.y, this._movementVelocity.z);
                    this.internalSetWalkDirection(this.m_walkDirection);
                }
            }
        }
        /** Jumps the kinematic chacracter with the specified speed. */
        jump(speed) {
            this.internalSetJumpSpeed(speed);
            this.internalJump();
        }
        /** Warps the kinematic chacracter to the specified position. */
        warp(position) {
            if (this.m_warpPosition != null) {
                this.m_warpPosition.setValue(position.x, position.y, position.z);
                this.internalWarp(this.m_warpPosition);
            }
        }
    }
    BABYLON.CharacterController = CharacterController;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon navigation agent pro class (Unity Style Navigation Agent System)
     * @class NavigationAgent - All rights reserved (c) 2020 Mackey Kinard
     */
    class NavigationAgent extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this.distanceToTarget = 0;
            this.teleporting = false;
            this.moveDirection = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.resetPosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.lastPosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.distancePosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.currentPosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.currentRotation = new BABYLON.Quaternion(0.0, 0.0, 0.0, 1.0);
            this.currentVelocity = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.currentWaypoint = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.heightOffset = 0;
            this.angularSpeed = 0;
            this.updatePosition = true;
            this.updateRotation = true;
            this.distanceEpsilon = 0.1;
            this.velocityEpsilon = 1.1;
            this.offMeshVelocity = 1.5;
            this.stoppingDistance = 0;
            /** Register handler that is triggered when the agent is ready for navigation */
            this.onReadyObservable = new BABYLON.Observable();
            /** Register handler that is triggered before the navigation update */
            this.onPreUpdateObservable = new BABYLON.Observable();
            /** Register handler that is triggered after the navigation update */
            this.onPostUpdateObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the navigation is complete */
            this.onNavCompleteObservable = new BABYLON.Observable();
            this.m_agentState = 0;
            this.m_agentIndex = -1;
            this.m_agentReady = false;
            this.m_agentGhost = null;
            this.m_agentParams = null;
            this.m_agentMovement = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.m_agentDirection = new BABYLON.Vector3(0.0, 0.0, 1.0);
            this.m_agentQuaternion = new BABYLON.Quaternion(0.0, 0.0, 0.0, 1.0);
            this.m_agentDestination = null;
        }
        isReady() { return this.m_agentReady; }
        isNavigating() { return (this.m_agentDestination != null); }
        isTeleporting() { return this.teleporting; }
        isOnOffMeshLink() { return (this.m_agentState === BABYLON.CrowdAgentState.DT_CROWDAGENT_STATE_OFFMESH); }
        getAgentType() { return this.type; }
        getAgentState() { return this.m_agentState; }
        getAgentIndex() { return this.m_agentIndex; }
        getAgentOffset() { return this.baseOffset; }
        getTargetDistance() { return this.distanceToTarget; }
        getCurrentPosition() { return this.currentPosition; }
        getCurrentRotation() { return this.currentRotation; }
        getCurrentVelocity() { return this.currentVelocity; }
        getAgentParameters() { return this.m_agentParams; }
        setAgentParameters(parameters) { this.m_agentParams = parameters; this.updateAgentParameters(); }
        awake() { this.awakeNavigationAgent(); }
        update() { this.updateNavigationAgent(); }
        destroy() { this.destroyNavigationAgent(); }
        //////////////////////////////////////////////////////
        // Navigation Private Functions                     //
        //////////////////////////////////////////////////////
        awakeNavigationAgent() {
            this.type = this.getProperty("type", this.type);
            this.speed = this.getProperty("speed", this.speed);
            this.baseOffset = this.getProperty("offset", this.baseOffset);
            this.angularSpeed = this.getProperty("angularspeed", this.angularSpeed);
            this.acceleration = this.getProperty("acceleration", this.acceleration);
            this.stoppingDistance = this.getProperty("stoppingdistance", this.stoppingDistance);
            this.autoBraking = this.getProperty("autobraking", this.autoBraking);
            this.avoidRadius = this.getProperty("avoidradius", this.avoidRadius);
            this.avoidHeight = this.getProperty("avoidheight", this.avoidHeight);
            this.obstacleAvoidanceType = this.getProperty("avoidquality", this.obstacleAvoidanceType);
            this.avoidancePriority = this.getProperty("avoidpriority", this.avoidancePriority);
            this.autoTraverseOffMeshLink = this.getProperty("autotraverse", this.autoTraverseOffMeshLink);
            this.autoRepath = this.getProperty("autopepath", this.autoRepath);
            this.areaMask = this.getProperty("areamask", this.areaMask);
            // ..
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
            // DEBUG: this.m_agentGhost = BABYLON.Mesh.CreateBox((this.transform.name + "Agent"), 1, this.scene);
            this.m_agentGhost = new BABYLON.TransformNode((this.transform.name + ".Agent"), this.scene);
            this.m_agentGhost.position = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.m_agentGhost.rotation = new BABYLON.Vector3(0.0, 0.0, 0.0);
            BABYLON.Utilities.ValidateTransformQuaternion(this.m_agentGhost);
            this.m_agentGhost.position.copyFrom(this.transform.position);
            this.lastPosition.copyFrom(this.transform.position);
        }
        updateNavigationAgent() {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd == null)
                return; // Note: No Detour Navigation Mesh Available Yet
            if (this.m_agentIndex < 0) {
                this.m_agentParams = {
                    radius: this.avoidRadius,
                    height: this.avoidHeight,
                    maxSpeed: this.speed,
                    maxAcceleration: this.acceleration,
                    collisionQueryRange: 2.0,
                    pathOptimizationRange: 20.0,
                    separationWeight: 1.0
                };
                BABYLON.Utilities.GetAbsolutePositionToRef(this.transform, this.resetPosition);
                this.m_agentIndex = crowd.addAgent(this.resetPosition, this.m_agentParams, this.m_agentGhost);
                if (this.m_agentIndex >= 0) {
                    this.m_agentReady = true;
                    if (this.onReadyObservable.hasObservers() === true) {
                        this.onReadyObservable.notifyObservers(this.transform);
                    }
                }
                return; // Note: Start Updating Navigation Agent Next Frame
            }
            // ..
            this.m_agentState = crowd.getAgentState(this.m_agentIndex);
            this.getAgentWaypointToRef(this.currentWaypoint);
            this.getAgentPositionToRef(this.currentPosition);
            this.distancePosition.copyFrom(this.currentPosition);
            if (this.isOnOffMeshLink()) {
                this.currentPosition.subtractToRef(this.lastPosition, this.currentVelocity);
                this.currentVelocity.scaleInPlace(this.speed * this.offMeshVelocity);
            }
            else {
                this.getAgentVelocityToRef(this.currentVelocity);
            }
            if (this.onPreUpdateObservable.hasObservers() === true) {
                this.onPreUpdateObservable.notifyObservers(this.transform);
            }
            this.currentPosition.y += (this.baseOffset + this.heightOffset);
            if (this.currentVelocity.length() >= this.velocityEpsilon) {
                this.currentVelocity.normalize();
                const rotateFactor = (this.angularSpeed * BABYLON.NavigationAgent.ANGULAR_SPEED_RATIO * this.getDeltaSeconds());
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // KEEP FOR REFERENCE: Compute Agent Orientation
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Note: Interpolate the rotation on Y to get a smoother orientation change
                // const desiredRotation:number = Math.atan2(this.currentVelocity.x, this.currentVelocity.z);
                // this.transform.rotation.y = this.transform.rotation.y + (desiredRotation - this.transform.rotation.y) * 0.05;
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                if (this.isOnOffMeshLink()) {
                    // Rotate Toward Velocity Direction
                    this.moveDirection.copyFrom(this.m_agentDirection);
                    this.m_agentDirection.set((this.moveDirection.x + (this.currentVelocity.x - this.moveDirection.x)), (this.moveDirection.y + (this.currentVelocity.y - this.moveDirection.y)), (this.moveDirection.z + (this.currentVelocity.z - this.moveDirection.z)));
                    this.m_agentDirection.normalize();
                    const targetAngle = (BABYLON.NavigationAgent.TARGET_ANGLE_FACTOR - Math.atan2(this.m_agentDirection.x, this.m_agentDirection.z));
                    BABYLON.Quaternion.FromEulerAnglesToRef(0.0, targetAngle, 0.0, this.currentRotation);
                    // Rotation Update
                    if (this.isNavigating() && this.updateRotation === true) {
                        BABYLON.Quaternion.SlerpToRef(this.transform.rotationQuaternion, this.currentRotation, rotateFactor, this.transform.rotationQuaternion);
                    }
                }
                else {
                    // Rotate Toward Next Target Waypoint
                    this.m_agentQuaternion.copyFrom(this.transform.rotationQuaternion);
                    if (this.isNavigating() && this.updateRotation === true) {
                        this.transform.lookAt(this.currentWaypoint);
                    }
                    // Correct Transform Look At Rotation
                    this.transform.rotationQuaternion.toEulerAnglesToRef(this.m_agentDirection);
                    BABYLON.Quaternion.FromEulerAnglesToRef(0.0, this.m_agentDirection.y, 0.0, this.currentRotation);
                    // Rotation Update
                    if (this.isNavigating() && this.updateRotation === true) {
                        BABYLON.Quaternion.SlerpToRef(this.m_agentQuaternion, this.currentRotation, rotateFactor, this.transform.rotationQuaternion);
                    }
                }
            }
            // Position Update
            if (this.isNavigating() && this.updatePosition === true) {
                this.transform.position.copyFrom(this.currentPosition);
            }
            // Target Distance
            if (this.isNavigating()) {
                this.distanceToTarget = BABYLON.Vector3.Distance(this.distancePosition, this.m_agentDestination);
                if (this.distanceToTarget <= Math.max(this.distanceEpsilon, this.stoppingDistance)) {
                    this.cancelNavigation();
                    if (this.onNavCompleteObservable.hasObservers() === true) {
                        this.onNavCompleteObservable.notifyObservers(this.transform);
                    }
                }
            }
            else {
                this.distanceToTarget = 0;
            }
            // Final Post Update
            this.lastPosition.copyFrom(this.currentPosition);
            if (this.onPostUpdateObservable.hasObservers() === true) {
                this.onPostUpdateObservable.notifyObservers(this.transform);
            }
            // Reset Teleport Flag
            this.teleporting = false;
        }
        updateAgentParameters() {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.updateAgentParameters(this.m_agentIndex, this.m_agentParams);
        }
        destroyNavigationAgent() {
            this.m_agentIndex = -1;
            this.m_agentReady = false;
            this.m_agentMovement = null;
            this.m_agentDirection = null;
            this.m_agentDestination = null;
            this.moveDirection = null;
            this.resetPosition = null;
            this.lastPosition = null;
            this.currentPosition = null;
            this.currentRotation = null;
            this.currentVelocity = null;
            this.currentWaypoint = null;
            this.onReadyObservable.clear();
            this.onReadyObservable = null;
            this.onPreUpdateObservable.clear();
            this.onPreUpdateObservable = null;
            this.onPostUpdateObservable.clear();
            this.onPostUpdateObservable = null;
            this.onNavCompleteObservable.clear();
            this.onNavCompleteObservable = null;
            if (this.m_agentGhost != null) {
                this.m_agentGhost.dispose();
                this.m_agentGhost = null;
            }
        }
        //////////////////////////////////////////////////////
        // Navigation Public Functions                      //
        //////////////////////////////////////////////////////
        /** Move agent relative to current position. */
        move(offset, closetPoint = true) {
            const plugin = BABYLON.SceneManager.GetNavigationTools();
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (plugin != null && crowd != null) {
                crowd.getAgentPosition(this.m_agentIndex).addToRef(offset, this.m_agentMovement);
                if (closetPoint === true)
                    this.m_agentDestination = plugin.getClosestPoint(this.m_agentMovement);
                else
                    this.m_agentDestination = this.m_agentMovement.clone();
                if (this.m_agentIndex >= 0)
                    crowd.agentGoto(this.m_agentIndex, this.m_agentDestination);
            }
            else {
                BABYLON.Tools.Warn("No recast navigation mesh or crowd interface data available!");
            }
        }
        /** Teleport agent to destination point. */
        teleport(destination, closetPoint = true) {
            const plugin = BABYLON.SceneManager.GetNavigationTools();
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (plugin != null && crowd != null) {
                this.teleporting = true;
                if (closetPoint === true)
                    this.m_agentDestination = plugin.getClosestPoint(destination);
                else
                    this.m_agentDestination = destination.clone();
                if (this.m_agentIndex >= 0)
                    crowd.agentTeleport(this.m_agentIndex, this.m_agentDestination);
            }
            else {
                BABYLON.Tools.Warn("No recast navigation mesh or crowd interface data available!");
            }
        }
        /** Sets agent current destination point. */
        setDestination(destination, closetPoint = true) {
            const plugin = BABYLON.SceneManager.GetNavigationTools();
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (plugin != null && crowd != null) {
                if (closetPoint === true)
                    this.m_agentDestination = plugin.getClosestPoint(destination);
                else
                    this.m_agentDestination = destination.clone();
                if (this.m_agentIndex >= 0)
                    crowd.agentGoto(this.m_agentIndex, this.m_agentDestination);
            }
            else {
                BABYLON.Tools.Warn("No recast navigation mesh or crowd interface data available!");
            }
        }
        /** Gets agent current world space velocity. */
        getAgentVelocity() {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            return (crowd != null && this.m_agentIndex >= 0) ? crowd.getAgentVelocity(this.m_agentIndex) : null;
        }
        /** Gets agent current world space velocity. */
        getAgentVelocityToRef(result) {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.getAgentVelocityToRef(this.m_agentIndex, result);
        }
        /** Gets agent current world space position. */
        getAgentPosition() {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            return (crowd != null && this.m_agentIndex >= 0) ? crowd.getAgentPosition(this.m_agentIndex) : null;
        }
        /** Gets agent current world space position. */
        getAgentPositionToRef(result) {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.getAgentPositionToRef(this.m_agentIndex, result);
        }
        /** Gets agent current waypoint position. */
        getAgentWaypoint() {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            return (crowd != null && this.m_agentIndex >= 0) ? crowd.getAgentNextTargetPath(this.m_agentIndex) : null;
        }
        /** Gets agent current waypoint position. */
        getAgentWaypointToRef(result) {
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.getAgentNextTargetPathToRef(this.m_agentIndex, result);
        }
        /** Cancel current waypoint path navigation. */
        cancelNavigation() {
            this.m_agentDestination = null; // Note: Disable Auto Position Update
            const crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            const position = this.getAgentPosition();
            if (position != null && crowd != null && this.m_agentIndex >= 0) {
                crowd.agentTeleport(this.m_agentIndex, position);
                // DEPRECIATED: position.y += (this.baseOffset + this.heightOffset);
                // DEPRECIATED: this.transform.position.copyFrom(position);
            }
        }
    }
    NavigationAgent.TARGET_ANGLE_FACTOR = (Math.PI * 0.5);
    NavigationAgent.ANGULAR_SPEED_RATIO = 0.05;
    BABYLON.NavigationAgent = NavigationAgent;
    /**
     *  Recast Detour Crowd Agent States
     */
    let CrowdAgentState;
    (function (CrowdAgentState) {
        CrowdAgentState[CrowdAgentState["DT_CROWDAGENT_STATE_INVALID"] = 0] = "DT_CROWDAGENT_STATE_INVALID";
        CrowdAgentState[CrowdAgentState["DT_CROWDAGENT_STATE_WALKING"] = 1] = "DT_CROWDAGENT_STATE_WALKING";
        CrowdAgentState[CrowdAgentState["DT_CROWDAGENT_STATE_OFFMESH"] = 2] = "DT_CROWDAGENT_STATE_OFFMESH";
    })(CrowdAgentState = BABYLON.CrowdAgentState || (BABYLON.CrowdAgentState = {}));
    ;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon raycast vehicle controller pro class (Native Bullet Physics 2.82)
     * @class RaycastVehicle - All rights reserved (c) 2020 Mackey Kinard
     */
    class RaycastVehicle {
        constructor(entity, world, center, defaultAngularFactor = null) {
            this._centerMass = new BABYLON.Vector3(0, 0, 0);
            this._chassisMesh = null;
            this._tempVectorPos = new BABYLON.Vector3(0, 0, 0);
            this.lockedWheelIndexes = null;
            this.m_vehicle = null;
            this.m_vehicleTuning = null;
            this.m_vehicleRaycaster = null;
            this.m_vehicleColliders = null;
            this.m_tempTransform = null;
            this.m_tempPosition = null;
            this.m_wheelDirectionCS0 = null;
            this.m_wheelAxleCS = null;
            this._chassisMesh = entity;
            this._centerMass = center;
            this.m_vehicleTuning = new Ammo.btVehicleTuning();
            this.m_vehicleRaycaster = (Ammo.btSmoothVehicleRaycaster != null) ? new Ammo.btSmoothVehicleRaycaster(world) : new Ammo.btDefaultVehicleRaycaster(world);
            this.m_vehicleColliders = (this._chassisMesh.metadata != null && this._chassisMesh.metadata.unity != null && this._chassisMesh.metadata.unity.wheels != null) ? this._chassisMesh.metadata.unity.wheels : null;
            this.m_vehicle = new Ammo.btRaycastVehicle(this.m_vehicleTuning, this._chassisMesh.physicsImpostor.physicsBody, this.m_vehicleRaycaster);
            this.m_vehicle.setCoordinateSystem(0, 1, 2); // Y-UP-AXIS
            this.m_wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0); // Y-UP-AXIS
            this.m_wheelAxleCS = new Ammo.btVector3(-1, 0, 0); // Y-UP-AXIS
            this.m_tempPosition = null;
            this.m_tempTransform = null;
            this.setupWheelInformation(defaultAngularFactor);
            world.addAction(this.m_vehicle);
        }
        getCenterMassOffset() { return this._centerMass; }
        getInternalVehicle() { return this.m_vehicle; }
        getUpAxis() { if (this.m_vehicle != null)
            return this.m_vehicle.getUpAxis(); }
        getRightAxis() { if (this.m_vehicle != null)
            return this.m_vehicle.getRightAxis(); }
        getForwardAxis() { if (this.m_vehicle != null)
            return this.m_vehicle.getForwardAxis(); }
        getForwardVector() { if (this.m_vehicle != null)
            return this.m_vehicle.getForwardVector(); }
        getNumWheels() { if (this.m_vehicle != null)
            return this.m_vehicle.getNumWheels(); }
        getWheelInfo(wheel) { if (this.m_vehicle != null)
            return this.m_vehicle.getWheelInfo(wheel); } // Ammo.btWheelInfo
        resetSuspension() { if (this.m_vehicle != null)
            this.m_vehicle.resetSuspension(); }
        setPitchControl(pitch) { if (this.m_vehicle != null)
            this.m_vehicle.setPitchControl(pitch); }
        setEngineForce(power, wheel) { if (this.m_vehicle != null)
            this.m_vehicle.applyEngineForce(power, wheel); }
        setBrakingForce(brake, wheel) { if (this.m_vehicle != null)
            this.m_vehicle.setBrake(brake, wheel); }
        getWheelTransform(wheel) { if (this.m_vehicle != null)
            return this.m_vehicle.getWheelTransformWS(wheel); } // Ammo.btTransform
        updateWheelTransform(wheel, interpolate) { if (this.m_vehicle != null)
            this.m_vehicle.updateWheelTransform(wheel, interpolate); }
        getUserConstraintType() { if (this.m_vehicle != null)
            return this.m_vehicle.getUserConstraintType(); }
        setUserConstraintType(userConstraintType) { if (this.m_vehicle != null)
            this.m_vehicle.setUserConstraintType(userConstraintType); }
        setUserConstraintId(uid) { if (this.m_vehicle != null)
            this.m_vehicle.setUserConstraintId(uid); }
        getUserConstraintId() { if (this.m_vehicle != null)
            return this.m_vehicle.getUserConstraintId(); }
        getRawCurrentSpeedKph() { if (this.m_vehicle != null)
            return this.m_vehicle.getCurrentSpeedKmHour(); }
        getRawCurrentSpeedMph() { if (this.m_vehicle != null)
            return this.m_vehicle.getCurrentSpeedKmHour() * BABYLON.System.Kph2Mph; }
        getAbsCurrentSpeedKph() { if (this.m_vehicle != null)
            return Math.abs(this.m_vehicle.getCurrentSpeedKmHour()); }
        getAbsCurrentSpeedMph() { if (this.m_vehicle != null)
            return Math.abs(this.m_vehicle.getCurrentSpeedKmHour()) * BABYLON.System.Kph2Mph; }
        getVehicleTuningSystem() { return this.m_vehicleTuning; } // Ammo.btVehicleTuning
        getChassisWorldTransform() { if (this.m_vehicle != null)
            return this.m_vehicle.getChassisWorldTransform(); } // Ammo.btTransform
        dispose() {
            this.deleteWheelInformation();
            if (this.m_vehicle != null) {
                Ammo.destroy(this.m_vehicle);
                this.m_vehicle = null;
            }
            if (this.m_vehicleTuning != null) {
                Ammo.destroy(this.m_vehicleTuning);
                this.m_vehicleTuning = null;
            }
            if (this.m_vehicleRaycaster != null) {
                Ammo.destroy(this.m_vehicleRaycaster);
                this.m_vehicleRaycaster = null;
            }
            if (this.m_wheelDirectionCS0 != null) {
                Ammo.destroy(this.m_wheelDirectionCS0);
                this.m_wheelDirectionCS0 = null;
            }
            if (this.m_wheelAxleCS != null) {
                Ammo.destroy(this.m_wheelAxleCS);
                this.m_wheelAxleCS = null;
            }
            if (this.m_tempPosition != null) {
                this.m_tempPosition = null;
            }
            if (this.m_tempTransform != null) {
                this.m_tempTransform = null;
            }
            this.m_vehicleColliders = null;
        }
        ///////////////////////////////////////////////////////
        // Static Raycast Vehicle Instance Helper Functions
        ///////////////////////////////////////////////////////
        /** Gets the rigidbody raycast vehicle controller for the entity. Note: Wheel collider metadata informaion is required for raycast vehicle control. */
        static GetInstance(scene, rigidbody, defaultAngularFactor = null) {
            const anybody = rigidbody;
            if (anybody.m_raycastVehicle == null) {
                if (rigidbody.hasWheelColliders()) {
                    const rightHanded = BABYLON.SceneManager.GetRightHanded(scene);
                    if (rightHanded === true)
                        BABYLON.Tools.Warn("Raycast vehicle not supported for right handed scene: " + anybody._abstractMesh.name);
                    anybody.m_raycastVehicle = new BABYLON.RaycastVehicle(anybody._abstractMesh, anybody.m_physicsWorld, anybody._centerOfMass, defaultAngularFactor);
                }
                else {
                    BABYLON.Tools.Warn("No wheel collider metadata found for: " + anybody._abstractMesh.name);
                }
            }
            return anybody.m_raycastVehicle;
        }
        ///////////////////////////////////////////////////////
        // Smooth Raycast Vehicle Advanced Helper Functions
        ///////////////////////////////////////////////////////
        /** Gets vehicle enable multi raycast flag using physics vehicle object. (Advanved Use Only) */
        getEnableMultiRaycast() {
            let result = false;
            if (this.m_vehicle != null && this.m_vehicle.get_m_enableMultiRaycast) {
                result = this.m_vehicle.get_m_enableMultiRaycast();
            }
            return result;
        }
        /** Sets vehicle enable multi raycast flag using physics vehicle object. (Advanved Use Only) */
        setEnableMultiRaycast(flag) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_enableMultiRaycast) {
                this.m_vehicle.set_m_enableMultiRaycast(flag);
            }
        }
        /** Gets vehicle stable force using physics vehicle object. (Advanved Use Only) */
        getStabilizingForce() {
            let result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_stabilizingForce) {
                result = this.m_vehicle.get_m_stabilizingForce();
            }
            return result;
        }
        /** Sets vehicle stable force using physics vehicle object. (Advanved Use Only) */
        setStabilizingForce(force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_stabilizingForce) {
                this.m_vehicle.set_m_stabilizingForce(force);
            }
        }
        /** Gets vehicle max stable force using physics vehicle object. (Advanved Use Only) */
        getMaxImpulseForce() {
            let result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_maxImpulseForce) {
                result = this.m_vehicle.get_m_maxImpulseForce();
            }
            return result;
        }
        /** Sets vehicle max stable force using physics vehicle object. (Advanved Use Only) */
        setMaxImpulseForce(force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_maxImpulseForce) {
                this.m_vehicle.set_m_maxImpulseForce(force);
            }
        }
        /** Gets vehicle smooth flying impulse force using physics vehicle object. (Advanved Use Only) */
        getSmoothFlyingImpulse() {
            let result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_smoothFlyingImpulse) {
                result = this.m_vehicle.get_m_smoothFlyingImpulse();
            }
            return result;
        }
        /** Sets vehicle smooth flying impulse using physics vehicle object. (Advanved Use Only) */
        setSmoothFlyingImpulse(impulse) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_smoothFlyingImpulse) {
                this.m_vehicle.set_m_smoothFlyingImpulse(impulse);
            }
        }
        /** Gets vehicle track connection accel force using physics vehicle object. (Advanved Use Only) */
        getTrackConnectionAccel() {
            let result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_trackConnectionAccel) {
                result = this.m_vehicle.get_m_trackConnectionAccel();
            }
            return result;
        }
        /** Sets vehicle track connection accel force using physics vehicle object. (Advanved Use Only) */
        setTrackConnectionAccel(force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_trackConnectionAccel) {
                this.m_vehicle.set_m_trackConnectionAccel(force);
            }
        }
        /** Gets vehicle min wheel contact count using physics vehicle object. (Advanved Use Only) */
        getMinimumWheelContacts() {
            let result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_minimumWheelContacts) {
                result = this.m_vehicle.get_m_minimumWheelContacts();
            }
            return result;
        }
        /** Sets vehicle min wheel contact count using physics vehicle object. (Advanved Use Only) */
        setMinimumWheelContacts(force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_minimumWheelContacts) {
                this.m_vehicle.set_m_minimumWheelContacts(force);
            }
        }
        /** Gets vehicle interpolate mesh normals flag using physics raycaster object. (Advanved Use Only) */
        getInterpolateNormals() {
            let result = false;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_interpolateNormals) {
                result = this.m_vehicleRaycaster.get_m_interpolateNormals();
            }
            return result;
        }
        /** Sets the vehicle interpolate mesh normals using physics raycaster object. (Advanved Use Only) */
        setInterpolateNormals(flag) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_interpolateNormals) {
                this.m_vehicleRaycaster.set_m_interpolateNormals(flag);
            }
        }
        /** Gets vehicle shape testing mode using physics raycaster object. (Advanved Use Only) */
        getShapeTestingMode() {
            let result = false;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_shapeTestingMode) {
                result = this.m_vehicleRaycaster.get_m_shapeTestingMode();
            }
            return result;
        }
        /** Sets the vehicle shape testing mode using physics raycaster object. (Advanved Use Only) */
        setShapeTestingMode(mode) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_shapeTestingMode) {
                this.m_vehicleRaycaster.set_m_shapeTestingMode(mode);
            }
        }
        /** Gets vehicle shape testing size using physics raycaster object. (Advanved Use Only) */
        getShapeTestingSize() {
            let result = 0;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_shapeTestingSize) {
                result = this.m_vehicleRaycaster.get_m_shapeTestingSize();
            }
            return result;
        }
        /** Sets the vehicle shape testing mode using physics raycaster object. (Advanved Use Only) */
        setShapeTestingSize(size) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_shapeTestingSize) {
                this.m_vehicleRaycaster.set_m_shapeTestingSize(size);
            }
        }
        /** Gets vehicle shape test point count using physics raycaster object. (Advanved Use Only) */
        getShapeTestingCount() {
            let result = 0;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_testPointCount) {
                result = this.m_vehicleRaycaster.get_m_testPointCount();
            }
            return result;
        }
        /** Sets the vehicle shape test point count using physics raycaster object. (Advanved Use Only) */
        setShapeTestingCount(count) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_testPointCount) {
                this.m_vehicleRaycaster.set_m_testPointCount(count);
            }
        }
        /** Gets vehicle sweep penetration amount using physics raycaster object. (Advanved Use Only) */
        getSweepPenetration() {
            let result = 0;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_sweepPenetration) {
                result = this.m_vehicleRaycaster.get_m_sweepPenetration();
            }
            return result;
        }
        /** Sets the vehicle sweep penetration amount using physics raycaster object. (Advanved Use Only) */
        setSweepPenetration(amount) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_sweepPenetration) {
                this.m_vehicleRaycaster.set_m_sweepPenetration(amount);
            }
        }
        ///////////////////////////////////////////////////////
        // Smooth Raycast Vehicle Advanced Collision Functions
        ///////////////////////////////////////////////////////
        /** Gets vehicle collision group filter using physics raycaster object. (Advanved Use Only) */
        getCollisionFilterGroup() {
            let result = -1;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_collisionFilterGroup) {
                result = this.m_vehicleRaycaster.get_m_collisionFilterGroup();
            }
            return result;
        }
        /** Sets vehicle collision group filter using physics raycaster object. (Advanved Use Only) */
        setCollisionFilterGroup(group) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_collisionFilterGroup) {
                this.m_vehicleRaycaster.set_m_collisionFilterGroup(group);
            }
        }
        /** Gets vehicle collision mask filter using physics raycaster object. (Advanved Use Only) */
        getCollisionFilterMask() {
            let result = -1;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_collisionFilterMask) {
                result = this.m_vehicleRaycaster.get_m_collisionFilterMask();
            }
            return result;
        }
        /** Sets the vehicle collision mask filter using physics raycaster object. (Advanved Use Only) */
        setCollisionFilterMask(mask) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_collisionFilterMask) {
                this.m_vehicleRaycaster.set_m_collisionFilterMask(mask);
            }
        }
        ///////////////////////////////////////////////////////
        // Raycast Vehicle Wheel Information Helper Funtions
        ///////////////////////////////////////////////////////
        /** Gets the internal wheel index by id string. */
        getWheelIndexByID(id) {
            let result = -1;
            if (this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0) {
                for (let index = 0; index < this.m_vehicleColliders.length; index++) {
                    const wheel = this.m_vehicleColliders[index];
                    if (id.toLowerCase() === wheel.id.toLowerCase()) {
                        result = index;
                        break;
                    }
                }
            }
            return result;
        }
        /** Gets the internal wheel index by name string. */
        getWheelIndexByName(name) {
            let result = -1;
            if (this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0) {
                for (let index = 0; index < this.m_vehicleColliders.length; index++) {
                    const wheel = this.m_vehicleColliders[index];
                    if (name.toLowerCase() === wheel.name.toLowerCase()) {
                        result = index;
                        break;
                    }
                }
            }
            return result;
        }
        /** Gets the internal wheel collider information. */
        getWheelColliderInfo(wheel) {
            let result = -1;
            if (this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0 && this.m_vehicleColliders.length > wheel) {
                result = this.m_vehicleColliders[wheel];
            }
            return result;
        }
        /** Sets the internal wheel hub transform mesh by index. Used to rotate and bounce wheels. */
        setWheelTransformMesh(wheel, transform) {
            if (transform == null)
                return;
            const wheelinfo = this.getWheelInfo(wheel);
            if (wheelinfo != null)
                wheelinfo.transform = transform;
        }
        ///////////////////////////////////////////////////////
        // Smooth Raycast Vehicle Seering Helper Functions
        ///////////////////////////////////////////////////////
        getVisualSteeringAngle(wheel) {
            let result = 0;
            const wheelinfo = this.getWheelInfo(wheel);
            if (wheelinfo != null && wheelinfo.steeringAngle != null) {
                result = wheelinfo.steeringAngle;
            }
            return result;
        }
        setVisualSteeringAngle(angle, wheel) {
            const wheelinfo = this.getWheelInfo(wheel);
            if (wheelinfo != null) {
                wheelinfo.steeringAngle = angle;
            }
        }
        getPhysicsSteeringAngle(wheel) {
            if (this.m_vehicle != null) {
                return Math.abs(this.m_vehicle.getSteeringValue(wheel));
            }
        }
        setPhysicsSteeringAngle(angle, wheel) {
            if (this.m_vehicle != null) {
                this.m_vehicle.setSteeringValue(angle, wheel);
            }
        }
        /////////////////////////////////////////////
        // Setup Wheel Information Helper Funtions //
        /////////////////////////////////////////////
        setupWheelInformation(defaultAngularFactor = null) {
            if (this._chassisMesh != null && this._chassisMesh.physicsImpostor != null && this._chassisMesh.physicsImpostor.physicsBody != null) {
                if (defaultAngularFactor != null) {
                    // https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=8153
                    // prevent vehicle from flip over, by limit the rotation  on forward axis or limit angles for vehicle stablization
                    if (BABYLON.RaycastVehicle.TempAmmoVector == null)
                        BABYLON.RaycastVehicle.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RaycastVehicle.TempAmmoVector.setValue(defaultAngularFactor.x, defaultAngularFactor.y, defaultAngularFactor.z);
                    this._chassisMesh.physicsImpostor.physicsBody.setAngularFactor(BABYLON.RaycastVehicle.TempAmmoVector);
                }
                this._chassisMesh.physicsImpostor.physicsBody.setActivationState(BABYLON.CollisionState.DISABLE_DEACTIVATION);
            }
            if (this.m_vehicle != null && this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0) {
                let index = -1;
                for (index = 0; index < this.m_vehicleColliders.length; index++) {
                    const wheel = this.m_vehicleColliders[index];
                    const wheelName = (wheel.name != null) ? wheel.name : "Unknown";
                    const wheelRadius = (wheel.radius != null) ? wheel.radius : 0.35;
                    const wheelHalfTrack = (wheel.position != null && wheel.position.length >= 3) ? wheel.position[0] : 1;
                    const wheelAxisPosition = (wheel.position != null && wheel.position.length >= 3) ? wheel.position[2] : -1;
                    // ..
                    // Raycast Wheel Script Properties
                    // ..
                    const wheelConnectionPoint = (wheel.wheelconnectionpoint != null) ? wheel.wheelconnectionpoint : 0.5;
                    const suspensionRestLength = (wheel.suspensionrestlength != null) ? wheel.suspensionrestlength : 0.3;
                    const isfrontwheel = (wheel.frontwheel != null) ? true : (wheelName.toLowerCase().indexOf("front") >= 0);
                    const wheelposition = wheelAxisPosition;
                    const wheeltracking = wheelHalfTrack;
                    const centermassx = -this._centerMass.x;
                    const centermassz = -this._centerMass.z;
                    if (BABYLON.RaycastVehicle.TempAmmoVector == null)
                        BABYLON.RaycastVehicle.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RaycastVehicle.TempAmmoVector.setValue((wheeltracking + centermassx), wheelConnectionPoint, (wheelposition + centermassz));
                    this.m_vehicle.addWheel(BABYLON.RaycastVehicle.TempAmmoVector, this.m_wheelDirectionCS0, this.m_wheelAxleCS, suspensionRestLength, wheelRadius, this.m_vehicleTuning, isfrontwheel);
                }
                if (this.m_vehicle.getNumWheels() === this.m_vehicleColliders.length) {
                    for (index = 0; index < this.m_vehicleColliders.length; index++) {
                        const wheel = this.m_vehicleColliders[index];
                        const defaultForce = (wheel.totalsuspensionforces != null) ? wheel.totalsuspensionforces : 25000; // Bullet: 6000
                        const defaultTravel = (wheel.suspensiontravelcm != null) ? wheel.suspensiontravelcm : 100; // Bullet: 500
                        const defaultRolling = (wheel.rollinfluence != null) ? wheel.rollinfluence : 0.2; // Bullet: 0.1
                        const defaultFriction = (wheel.frictionslip != null) ? wheel.frictionslip : 10; // Bullet: 10.5
                        const suspensionStiffness = (wheel.suspensionstiffness != null) ? wheel.suspensionstiffness : 50; // Bullet: 5.88
                        const suspensionCompression = (wheel.dampingcompression != null) ? wheel.dampingcompression : 2.5; // Bullet: 0.83
                        const suspensionDamping = (wheel.dampingrelaxation != null) ? wheel.dampingrelaxation : 4.5; // Bullet: 0.88
                        const wheelinfo = this.m_vehicle.getWheelInfo(index);
                        if (wheelinfo != null) {
                            wheelinfo.steeringAngle = 0;
                            wheelinfo.rotationBoost = 0;
                            wheelinfo.defaultFriction = defaultFriction;
                            wheelinfo.set_m_frictionSlip(defaultFriction);
                            wheelinfo.set_m_rollInfluence(defaultRolling);
                            wheelinfo.set_m_maxSuspensionForce(defaultForce);
                            wheelinfo.set_m_maxSuspensionTravelCm(defaultTravel);
                            wheelinfo.set_m_suspensionStiffness(suspensionStiffness);
                            wheelinfo.set_m_wheelsDampingCompression(suspensionCompression);
                            wheelinfo.set_m_wheelsDampingRelaxation(suspensionDamping);
                        }
                    }
                }
                else {
                    BABYLON.Tools.Warn("Failed to create proper number of wheels for: " + this._chassisMesh.name);
                }
            }
        }
        updateWheelInformation() {
            const wheels = this.getNumWheels();
            if (wheels > 0) {
                for (let index = 0; index < wheels; index++) {
                    const wheelinfo = this.getWheelInfo(index);
                    if (wheelinfo != null) {
                        const locked = this.lockedWheelInformation(index);
                        this.updateWheelTransform(index, false);
                        // Update Wheel Information Internals
                        this.m_tempTransform = this.getWheelTransform(index);
                        this.m_tempPosition = this.m_tempTransform.getOrigin();
                        // Sync Wheel Hub Transform To Raycast Wheel
                        if (wheelinfo.transform != null) {
                            const transform = wheelinfo.transform;
                            if (transform.parent != null) {
                                // Update Wheel Hub Position
                                BABYLON.Utilities.ConvertAmmoVector3ToRef(this.m_tempPosition, this._tempVectorPos);
                                BABYLON.Utilities.InverseTransformPointToRef(transform.parent, this._tempVectorPos, this._tempVectorPos);
                                transform.position.y = this._tempVectorPos.y;
                                // Update Wheel Hub Steering
                                let steeringAngle = (wheelinfo.steeringAngle != null) ? wheelinfo.steeringAngle : 0;
                                BABYLON.Quaternion.FromEulerAnglesToRef(0, steeringAngle, 0, transform.rotationQuaternion);
                                // Update Wheel Spinner Rotation
                                if (wheelinfo.spinner != null && wheelinfo.spinner.addRotation) {
                                    if (locked === false) {
                                        let wheelrotation = 0;
                                        let deltaRotation = (wheelinfo.get_m_deltaRotation != null) ? wheelinfo.get_m_deltaRotation() : 0;
                                        let rotationBoost = (wheelinfo.rotationBoost != null) ? wheelinfo.rotationBoost : 0;
                                        if (deltaRotation < 0)
                                            wheelrotation = (deltaRotation + -rotationBoost);
                                        else
                                            wheelrotation = (deltaRotation + rotationBoost);
                                        wheelinfo.spinner.addRotation(wheelrotation, 0, 0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        lockedWheelInformation(wheel) {
            let result = false;
            if (this.lockedWheelIndexes != null && this.lockedWheelIndexes.length > 0) {
                for (let index = 0; index < this.lockedWheelIndexes.length; index++) {
                    if (this.lockedWheelIndexes[index] === wheel) {
                        result = true;
                        break;
                    }
                }
            }
            return result;
        }
        deleteWheelInformation() {
            const wheels = this.getNumWheels();
            if (wheels > 0) {
                for (let index = 0; index < wheels; index++) {
                    const info = this.getWheelInfo(index);
                    if (info != null) {
                        if (info.transform != null) {
                            delete info.transform;
                        }
                        if (info.spinner != null) {
                            delete info.spinner;
                        }
                        if (info.steeringAngle != null) {
                            delete info.steeringAngle;
                        }
                        if (info.rotationBoost != null) {
                            delete info.rotationBoost;
                        }
                        if (info.defaultFriction != null) {
                            delete info.defaultFriction;
                        }
                    }
                }
            }
        }
    }
    RaycastVehicle.TempAmmoVector = null;
    BABYLON.RaycastVehicle = RaycastVehicle;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon realtime reflection system pro class (Unity Style Realtime Reflection Probes)
     * @class RealtimeReflection - All rights reserved (c) 2020 Mackey Kinard
     */
    class RealtimeReflection extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this.renderList = null;
            this.probeList = null;
            this.refreshMode = 0;
            this.cullingMask = 0;
            this.clearFlags = 0;
            this.probeid = 0;
            this.useProbeList = false;
            this.includeChildren = false;
            this.resolution = 128;
            this.boxPos = null;
            this.boxSize = null;
            this.boxProjection = false;
        }
        getProbeList() { return this.probeList; }
        getRenderList() { return this.renderList; }
        awake() { this.awakeRealtimReflections(); }
        start() { this.startRealtimReflections(); }
        destroy() { this.destroyRealtimReflections(); }
        awakeRealtimReflections() {
            this.probeid = this.getProperty("id", this.probeid);
            this.resolution = this.getProperty("resolution", this.resolution);
            this.cullingMask = this.getProperty("culling", this.cullingMask);
            this.clearFlags = this.getProperty("clearflags", this.clearFlags);
            this.refreshMode = this.getProperty("refreshmode", this.refreshMode);
            this.useProbeList = this.getProperty("useprobelist", this.useProbeList);
            this.includeChildren = this.getProperty("includechildren", this.includeChildren);
            this.boxProjection = this.getProperty("boxprojection", this.boxProjection);
            if (this.boxProjection === true) {
                const bbp = this.getProperty("boundingboxposition");
                if (bbp != null && bbp.length >= 3) {
                    this.boxPos = new BABYLON.Vector3(bbp[0], bbp[1], bbp[2]);
                }
                const bbz = this.getProperty("boundingboxsize");
                if (bbz != null && bbz.length >= 3) {
                    this.boxSize = new BABYLON.Vector3(bbz[0], bbz[1], bbz[2]);
                }
            }
        }
        startRealtimReflections() {
            let index = 0;
            const quality = BABYLON.SceneManager.GetRenderQuality();
            const allowReflections = (quality === BABYLON.RenderQuality.High);
            if (allowReflections === true) {
                if (this.cullingMask === 0) { // Nothing
                    if (this.clearFlags === BABYLON.RealtimeReflection.SKYBOX_FLAG) {
                        const skybox = BABYLON.SceneManager.GetAmbientSkybox(this.scene);
                        if (skybox != null) {
                            if (this.renderList == null)
                                this.renderList = [];
                            this.renderList.push(skybox);
                        }
                    }
                }
                else if (this.cullingMask === -1) { // Everything
                    for (index = 0; index < this.scene.meshes.length; index++) {
                        let render = false;
                        const mesh = this.scene.meshes[index];
                        if (mesh != null) {
                            if (mesh.id === "Ambient Skybox") {
                                render = (this.clearFlags === BABYLON.RealtimeReflection.SKYBOX_FLAG);
                            }
                            else {
                                render = true;
                            }
                            if (render === true) {
                                if (this.renderList == null)
                                    this.renderList = [];
                                this.renderList.push(mesh);
                            }
                        }
                    }
                }
                else { // Parse Render List Meta Data
                    const renderListData = this.getProperty("renderlist");
                    if (renderListData != null && renderListData.length > 0) {
                        for (index = 0; index < renderListData.length; index++) {
                            const renderId = renderListData[index];
                            const renderMesh = BABYLON.SceneManager.GetMeshByID(this.scene, renderId);
                            if (renderMesh != null) {
                                if (this.renderList == null)
                                    this.renderList = [];
                                const detailName = renderMesh.name + ".Detail";
                                const detailChildren = renderMesh.getChildren((node) => { return (node.name === detailName); }, true);
                                if (detailChildren != null && detailChildren.length > 0) {
                                    this.renderList.push(detailChildren[0]);
                                }
                                else {
                                    this.renderList.push(renderMesh);
                                }
                            }
                        }
                    }
                    if (this.clearFlags === BABYLON.RealtimeReflection.SKYBOX_FLAG) {
                        const skybox = BABYLON.SceneManager.GetAmbientSkybox(this.scene);
                        if (skybox != null) {
                            if (this.renderList == null)
                                this.renderList = [];
                            this.renderList.push(skybox);
                        }
                    }
                }
                // ..
                // Get Probe Render List
                // ..
                if (this.useProbeList === true) {
                    const probeListData = this.getProperty("probelist");
                    if (probeListData != null && probeListData.length > 0) {
                        for (index = 0; index < probeListData.length; index++) {
                            const probeId = probeListData[index];
                            const probeMesh = BABYLON.SceneManager.GetMeshByID(this.scene, probeId);
                            if (probeMesh != null) {
                                if (this.probeList == null)
                                    this.probeList = [];
                                this.probeList.push(probeMesh);
                                if (this.includeChildren === true) {
                                    const childMeshes = probeMesh.getChildMeshes(false);
                                    for (let ii = 0; ii < childMeshes.length; ii++) {
                                        const childMesh = childMeshes[ii];
                                        this.probeList.push(childMesh);
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    const probeTag = "PROBE_" + this.probeid.toFixed(0);
                    this.probeList = this.scene.getMeshesByTags(probeTag);
                }
                if (this.probeList != null && this.probeList.length > 0) {
                    const abstractMesh = this.getAbstractMesh();
                    for (index = 0; index < this.probeList.length; index++) {
                        const probemesh = this.probeList[index];
                        const reflectionProbe = new BABYLON.ReflectionProbe(probemesh.name + ".Probe", this.resolution, this.scene);
                        reflectionProbe.refreshRate = (this.refreshMode === 0) ? BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE : BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME;
                        reflectionProbe.renderList.push(...this.renderList);
                        if (abstractMesh != null)
                            reflectionProbe.attachToMesh(abstractMesh);
                        if (this.boxProjection === true) {
                            if (this.boxSize != null) {
                                reflectionProbe.cubeTexture.boundingBoxSize = this.boxSize;
                            }
                            if (this.boxPos != null) {
                                reflectionProbe.cubeTexture.boundingBoxPosition = this.boxPos;
                            }
                        }
                        if (probemesh.material instanceof BABYLON.MultiMaterial) {
                            const mmat1 = probemesh.material.clone(probemesh.material.name + "." + probemesh.name);
                            for (let xx = 0; xx < mmat1.subMaterials.length; xx++) {
                                const smat1 = mmat1.subMaterials[xx];
                                const subMaterial = mmat1.subMaterials[xx].clone(mmat1.subMaterials[xx].name + "_" + probemesh.name);
                                subMaterial.unfreeze();
                                subMaterial.reflectionTexture = reflectionProbe.cubeTexture;
                                mmat1.subMaterials[xx] = subMaterial;
                            }
                            probemesh.material = mmat1;
                        }
                        else {
                            const meshMaterial = probemesh.material.clone(probemesh.material.name + "." + probemesh.name);
                            meshMaterial.unfreeze();
                            meshMaterial.reflectionTexture = reflectionProbe.cubeTexture;
                            probemesh.material = meshMaterial;
                        }
                    }
                }
            }
        }
        destroyRealtimReflections() {
            this.probeList = null;
            this.renderList = null;
        }
    }
    RealtimeReflection.SKYBOX_FLAG = 1;
    BABYLON.RealtimeReflection = RealtimeReflection;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon full rigidbody physics pro class (Native Bullet Physics 2.82)
     * @class RigidbodyPhysics - All rights reserved (c) 2020 Mackey Kinard
     */
    class RigidbodyPhysics extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this._abstractMesh = null;
            this._isKinematic = false;
            this._maxCollisions = 4;
            this._isPhysicsReady = false;
            this._collisionObject = null;
            this._centerOfMass = new BABYLON.Vector3(0, 0, 0);
            this._tmpLinearFactor = new BABYLON.Vector3(0, 0, 0);
            this._tmpAngularFactor = new BABYLON.Vector3(0, 0, 0);
            this._tmpCenterOfMass = new BABYLON.Vector3(0, 0, 0);
            this._tmpCollisionContacts = null;
            /** Register handler that is triggered when the a collision contact has entered */
            this.onCollisionEnterObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact is active */
            this.onCollisionStayObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact has exited */
            this.onCollisionExitObservable = new BABYLON.Observable();
            this.m_physicsWorld = null;
            this.m_physicsEngine = null;
            this.m_raycastVehicle = null;
        }
        get isKinematic() { return this._isKinematic; }
        get centerOfMass() { return this._centerOfMass; }
        awake() { this.awakeRigidbodyState(); }
        update() { this.updateRigidbodyState(); }
        after() { this.afterRigidbodyState(); }
        destroy() { this.destroyRigidbodyState(); }
        /////////////////////////////////////////////////
        // Protected Rigidbody Physics State Functions //
        /////////////////////////////////////////////////
        awakeRigidbodyState() {
            this._abstractMesh = this.getAbstractMesh();
            this._isKinematic = this.getProperty("isKinematic", this._isKinematic);
            this.m_physicsWorld = BABYLON.SceneManager.GetPhysicsWorld(this.scene);
            this.m_physicsEngine = BABYLON.SceneManager.GetPhysicsEngine(this.scene);
            if (this.transform.metadata != null && this.transform.metadata.unity != null && this.transform.metadata.unity.physics != null) {
                this._centerOfMass = (this.transform.metadata.unity.physics.center != null) ? BABYLON.Utilities.ParseVector3(this.transform.metadata.unity.physics.center, this._centerOfMass) : this._centerOfMass;
            }
            //console.warn("Starting Rigidbody Physics For: " + this.transform.name);
            this.setMaxNotifications(this._maxCollisions);
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
            this._isPhysicsReady = (this.m_physicsEngine != null && this._tmpCollisionContacts != null && this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null);
            const collisionGroup = (this._isKinematic === true) ? BABYLON.CollisionFilters.StaticFilter : BABYLON.CollisionFilters.DefaultFilter;
            const collisionMask = (this._isKinematic === true) ? BABYLON.CollisionFilters.AllFilter ^ BABYLON.CollisionFilters.StaticFilter : BABYLON.CollisionFilters.AllFilter;
            this.setCollisionFilterGroup(collisionGroup);
            this.setCollisionFilterMask(collisionMask);
            this.resetBodyCollisionContacts();
        }
        updateRigidbodyState() {
            this.syncronizeVehicleController();
        }
        afterRigidbodyState() {
            this.parseBodyCollisionContacts();
            this.resetBodyCollisionContacts();
        }
        destroyRigidbodyState() {
            this.m_physicsWorld = null;
            this.m_physicsEngine = null;
            if (this.m_raycastVehicle != null) {
                if (this.m_raycastVehicle.dispose) {
                    this.m_raycastVehicle.dispose();
                }
                this.m_raycastVehicle = null;
            }
            this.onCollisionEnterObservable.clear();
            this.onCollisionEnterObservable = null;
            this.onCollisionStayObservable.clear();
            this.onCollisionStayObservable = null;
            this.onCollisionExitObservable.clear();
            this.onCollisionExitObservable = null;
            this._tmpCollisionContacts = null;
            this._collisionObject = null;
            this._abstractMesh = null;
        }
        //////////////////////////////////////////////////
        // Rigidbody Physics Life Cycle Event Functions //
        //////////////////////////////////////////////////
        syncronizeVehicleController() {
            if (this.m_raycastVehicle != null) {
                if (this.m_raycastVehicle.updateWheelInformation) {
                    this.m_raycastVehicle.updateWheelInformation();
                }
            }
        }
        parseBodyCollisionContacts() {
            if (this._isPhysicsReady === true) {
                const hasEnterObservers = this.onCollisionEnterObservable.hasObservers();
                const hasStayObservers = this.onCollisionStayObservable.hasObservers();
                const hasExitObservers = this.onCollisionExitObservable.hasObservers();
                if (hasEnterObservers || hasStayObservers || hasExitObservers) {
                    let index = 0; // Note: Flag All Collision List Items For End Contact State
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        this._tmpCollisionContacts[index].reset = true;
                    }
                    // ..
                    // Parse Overlapping Body Contact Objects
                    // ..
                    let collisionCount = 0;
                    if (this._abstractMesh.physicsImpostor.tmpCollisionObjects != null) {
                        const tmpCollisionObjectMap = this._abstractMesh.physicsImpostor.tmpCollisionObjects;
                        for (const contactKey in tmpCollisionObjectMap) {
                            let foundindex = -1;
                            const contactMesh = tmpCollisionObjectMap[contactKey];
                            for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                const check = this._tmpCollisionContacts[index];
                                if (check.mesh != null && check.mesh === contactMesh) {
                                    check.state = 1;
                                    check.reset = false;
                                    foundindex = index;
                                    break;
                                }
                            }
                            if (foundindex === -1) {
                                for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                    const insert = this._tmpCollisionContacts[index];
                                    if (insert.mesh == null) {
                                        insert.mesh = contactMesh;
                                        insert.state = 0;
                                        insert.reset = false;
                                        break;
                                    }
                                }
                            }
                            collisionCount++;
                            if (collisionCount > this._maxCollisions)
                                break;
                        }
                    }
                    // ..
                    // Dispatch Body Collision Contact State
                    // ..
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        const info = this._tmpCollisionContacts[index];
                        if (info.reset === true) {
                            // Dispatch On Collision Exit Event
                            if (hasExitObservers && info.mesh != null) {
                                this.onCollisionExitObservable.notifyObservers(info.mesh);
                            }
                            // Reset Collision Contact Info Item
                            info.mesh = null;
                            info.state = 0;
                            info.reset = false;
                        }
                        else {
                            if (info.state === 0) {
                                // Dispatch On Collision Enter Event
                                if (hasEnterObservers && info.mesh != null) {
                                    this.onCollisionEnterObservable.notifyObservers(info.mesh);
                                }
                            }
                            else {
                                // Dispatch On Collision Stay Event
                                if (hasStayObservers && info.mesh != null) {
                                    this.onCollisionStayObservable.notifyObservers(info.mesh);
                                }
                            }
                        }
                    }
                }
            }
        }
        resetBodyCollisionContacts() {
            if (this._isPhysicsReady === true) {
                const hasEnterObservers = this.onCollisionEnterObservable.hasObservers();
                const hasStayObservers = this.onCollisionStayObservable.hasObservers();
                const hasExitObservers = this.onCollisionExitObservable.hasObservers();
                if (hasEnterObservers || hasStayObservers || hasExitObservers) {
                    this._abstractMesh.physicsImpostor.tmpCollisionObjects = {};
                }
                else {
                    this._abstractMesh.physicsImpostor.tmpCollisionObjects = null;
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Gravity Advanced Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Sets entity gravity value using physics impostor body. */
        setGravity(gravity) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setGravity) {
                if (gravity != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(gravity.x, gravity.y, gravity.z);
                    this._abstractMesh.physicsImpostor.physicsBody.setGravity(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        /** Gets entity gravity value using physics impostor body. */
        getGravity() {
            const result = new BABYLON.Vector3(0, 0, 0);
            this.getGravityToRef(result);
            return result;
        }
        /** Gets entity gravity value using physics impostor body. */
        getGravityToRef(result) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getGravity) {
                const gravity = this._abstractMesh.physicsImpostor.physicsBody.getGravity();
                BABYLON.Utilities.ConvertAmmoVector3ToRef(gravity, result);
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Impostor Helper Functions -  TODO - Use Native Physics API - ???
        ////////////////////////////////////////////////////////////////////////////////////
        /** Gets mass of entity using physics impostor. */
        getMass() {
            let result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.mass;
            }
            return result;
        }
        /** Sets mass to entity using physics impostor. */
        setMass(mass) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (this._abstractMesh.physicsImpostor.mass !== mass) {
                    this._abstractMesh.physicsImpostor.mass = mass;
                }
            }
        }
        /** Gets entity friction level using physics impostor. */
        getFriction() {
            let result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.friction;
            }
            return result;
        }
        /** Applies friction to entity using physics impostor. */
        setFriction(friction) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (this._abstractMesh.physicsImpostor.friction !== friction) {
                    this._abstractMesh.physicsImpostor.friction = friction;
                }
            }
        }
        /** Gets restitution of entity using physics impostor. */
        getRestitution() {
            let result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.restitution;
            }
            return result;
        }
        /** Sets restitution to entity using physics impostor. */
        setRestitution(restitution) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (this._abstractMesh.physicsImpostor.restitution !== restitution) {
                    this._abstractMesh.physicsImpostor.restitution = restitution;
                }
            }
        }
        /** Gets entity linear velocity using physics impostor. */
        getLinearVelocity() {
            let result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.getLinearVelocity();
            }
            return result;
        }
        /** Sets entity linear velocity using physics impostor. */
        setLinearVelocity(velocity) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (velocity != null)
                    this._abstractMesh.physicsImpostor.setLinearVelocity(velocity);
            }
        }
        /** Gets entity angular velocity using physics impostor. */
        getAngularVelocity() {
            let result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.getAngularVelocity();
            }
            return result;
        }
        /** Sets entity angular velocity using physics impostor. */
        setAngularVelocity(velocity) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (velocity != null)
                    this._abstractMesh.physicsImpostor.setAngularVelocity(velocity);
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Transform Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Gets the native physics world transform object using physics impostor body. (Ammo.btTransform) */
        getWorldTransform() {
            let result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.getWorldTransform) {
                    result = this._collisionObject.getWorldTransform();
                }
            }
            return result;
        }
        /** sets the native physics world transform object using physics impostor body. (Ammo.btTransform) */
        setWorldTransform(btTransform) {
            let result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.setWorldTransform) {
                    this._collisionObject.setWorldTransform(btTransform);
                }
                if (this._abstractMesh.physicsImpostor.mass === 0 && this._abstractMesh.physicsImpostor.physicsBody.getMotionState) {
                    const motionState = this._abstractMesh.physicsImpostor.physicsBody.getMotionState();
                    if (motionState != null && motionState.setWorldTransform) {
                        motionState.setWorldTransform(btTransform);
                    }
                }
            }
            return result;
        }
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Applied Physics Movement Functions
        ////////////////////////////////////////////////////////////////////////////////////
        clearForces() {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.clearForces) {
                this._abstractMesh.physicsImpostor.physicsBody.clearForces();
            }
        }
        ////////////////////////////////////////////////// 
        // TODO - Use Function Specific Temp Ammo Buffer //
        ////////////////////////////////////////////////// 
        applyTorque(torque) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyTorque) {
                if (torque != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(torque.x, torque.y, torque.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyTorque(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        applyLocalTorque(torque) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyLocalTorque) {
                if (torque != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(torque.x, torque.y, torque.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyLocalTorque(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        applyImpulse(impulse, rel_pos) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyImpulse) {
                if (impulse != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    if (BABYLON.RigidbodyPhysics.TempAmmoVectorAux == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVectorAux = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(impulse.x, impulse.y, impulse.z);
                    BABYLON.RigidbodyPhysics.TempAmmoVectorAux.setValue(rel_pos.x, rel_pos.y, rel_pos.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyImpulse(BABYLON.RigidbodyPhysics.TempAmmoVector, BABYLON.RigidbodyPhysics.TempAmmoVectorAux);
                }
            }
        }
        applyCentralImpulse(impulse) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyCentralImpulse) {
                if (impulse != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(impulse.x, impulse.y, impulse.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyCentralImpulse(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        applyTorqueImpulse(torque) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyTorqueImpulse) {
                if (torque != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(torque.x, torque.y, torque.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyTorqueImpulse(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        applyForce(force, rel_pos) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyForce) {
                if (force != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    if (BABYLON.RigidbodyPhysics.TempAmmoVectorAux == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVectorAux = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(force.x, force.y, force.z);
                    BABYLON.RigidbodyPhysics.TempAmmoVectorAux.setValue(rel_pos.x, rel_pos.y, rel_pos.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyForce(BABYLON.RigidbodyPhysics.TempAmmoVector, BABYLON.RigidbodyPhysics.TempAmmoVectorAux);
                }
            }
        }
        applyCentralForce(force) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyCentralForce) {
                if (force != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(force.x, force.y, force.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyCentralForce(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        applyCentralLocalForce(force) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyCentralLocalForce) {
                if (force != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(force.x, force.y, force.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyCentralLocalForce(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        }
        /** gets rigidbody center of mass */
        getCenterOfMassTransform() {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getCenterOfMassTransform) {
                const bttransform = this._abstractMesh.physicsImpostor.physicsBody.getCenterOfMassTransform();
                const btposition = bttransform.getOrigin();
                this._tmpCenterOfMass.set(btposition.x(), btposition.y(), btposition.z());
            }
            return this._tmpCenterOfMass;
        }
        /** Sets rigidbody center of mass */
        setCenterOfMassTransform(center) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setCenterOfMassTransform) {
                if (center != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(center.x, center.y, center.z);
                    if (BABYLON.RigidbodyPhysics.TempCenterTransform == null)
                        BABYLON.RigidbodyPhysics.TempCenterTransform = new Ammo.btTransform();
                    BABYLON.RigidbodyPhysics.TempCenterTransform.setIdentity();
                    BABYLON.RigidbodyPhysics.TempCenterTransform.setOrigin(BABYLON.RigidbodyPhysics.TempAmmoVector);
                    this._abstractMesh.physicsImpostor.physicsBody.setCenterOfMassTransform(BABYLON.RigidbodyPhysics.TempCenterTransform);
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Native Body Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Gets entity linear factor using physics impostor body. */
        getLinearFactor() {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getLinearFactor) {
                const linearFactor = this._abstractMesh.physicsImpostor.physicsBody.getLinearFactor();
                this._tmpLinearFactor.set(linearFactor.x(), linearFactor.y(), linearFactor.z());
            }
            return this._tmpLinearFactor;
        }
        /** Sets entity linear factor using physics impostor body. */
        setLinearFactor(factor) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setLinearFactor) {
                if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                    BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(factor.x, factor.y, factor.z);
                this._abstractMesh.physicsImpostor.physicsBody.setLinearFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
            }
        }
        /** Gets entity angular factor using physics impostor body. */
        getAngularFactor() {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getAngularFactor) {
                const angularFactor = this._abstractMesh.physicsImpostor.physicsBody.getAngularFactor();
                this._tmpAngularFactor.set(angularFactor.x(), angularFactor.y(), angularFactor.z());
            }
            return this._tmpAngularFactor;
        }
        /** Sets entity angular factor using physics impostor body. */
        setAngularFactor(factor) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setAngularFactor) {
                if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                    BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(factor.x, factor.y, factor.z);
                this._abstractMesh.physicsImpostor.physicsBody.setAngularFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
            }
        }
        /** Gets entity angular damping using physics impostor body. */
        getAngularDamping() {
            let result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getAngularDamping) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getAngularDamping();
            }
            return result;
        }
        /** Gets entity linear damping using physics impostor body. */
        getLinearDamping() {
            let result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getLinearDamping) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getLinearDamping();
            }
            return result;
        }
        /** Sets entity drag damping using physics impostor body. */
        setDamping(linear, angular) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setDamping) {
                this._abstractMesh.physicsImpostor.physicsBody.setDamping(linear, angular);
            }
        }
        /** Sets entity sleeping threshold using physics impostor body. */
        setSleepingThresholds(linear, angular) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setSleepingThresholds) {
                this._abstractMesh.physicsImpostor.physicsBody.setSleepingThresholds(linear, angular);
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Native Advanced Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Checks if rigidbody has wheel collider metadata for the entity. Note: Wheel collider metadata informaion is required for vehicle control. */
        hasWheelColliders() {
            return (this._isPhysicsReady === true && this._abstractMesh.metadata != null && this._abstractMesh.metadata.unity != null && this._abstractMesh.metadata.unity.wheels != null);
        }
        /** Sets the maximum number of simultaneous contact notfications to dispatch per frame. Defaults value is 4. (Advanved Use Only) */
        setMaxNotifications(max) {
            this._maxCollisions = max;
            this._tmpCollisionContacts = [];
            for (let index = 0; index < this._maxCollisions; index++) {
                this._tmpCollisionContacts.push(new CollisionContactInfo());
            }
        }
        /** Sets entity collision activation state using physics impostor body. (Advanved Use Only) */
        setActivationState(state) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.setActivationState) {
                    this._collisionObject.setActivationState(state);
                }
            }
        }
        /** Gets entity collision filter group using physics impostor body. (Advanved Use Only) */
        getCollisionFilterGroup() {
            let result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().get_m_collisionFilterGroup();
            }
            return result;
        }
        /** Sets entity collision filter group using physics impostor body. (Advanved Use Only) */
        setCollisionFilterGroup(group) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().set_m_collisionFilterGroup(group);
            }
        }
        /** Gets entity collision filter mask using physics impostor body. (Advanved Use Only) */
        getCollisionFilterMask() {
            let result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().get_m_collisionFilterMask();
            }
            return result;
        }
        /** Sets entity collision filter mask using physics impostor body. (Advanved Use Only) */
        setCollisionFilterMask(mask) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().set_m_collisionFilterMask(mask);
            }
        }
        /** Gets the entity collision shape type using physics impostor body. (Advanved Use Only) */
        getCollisionShapeType() {
            let result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null) {
                    const collisionShape = this._collisionObject.getCollisionShape();
                    if (collisionShape != null && collisionShape.getShapeType) {
                        result = collisionShape.getShapeType();
                    }
                }
            }
            return result;
        }
        /** Gets the entity collision shape margin using physics impostor body. (Advanved Use Only) */
        getCollisionShapeMargin() {
            let result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null) {
                    const collisionShape = this._collisionObject.getCollisionShape();
                    if (collisionShape != null && collisionShape.getMargin) {
                        result = collisionShape.getMargin();
                    }
                }
            }
            return result;
        }
        /** Sets entity collision shape margin using physics impostor body. (Advanved Use Only) */
        setCollisionShapeMargin(margin) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null) {
                    const collisionShape = this._collisionObject.getCollisionShape();
                    if (collisionShape != null && collisionShape.setMargin) {
                        collisionShape.setMargin(margin);
                    }
                }
            }
        }
        /** Gets the entity contact processing threshold using physics impostor body. (Advanved Use Only) */
        /* DEPRECIATED: TODO - Must Expose This Function In Ammo.idl
        public getContactProcessingThreshold():number {
            let result:number = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null) this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.getContactProcessingThreshold) {
                    result = this._collisionObject.getContactProcessingThreshold();
                }
            }
            return result;
        }*/
        /** Sets entity contact processing threshold using physics impostor body. (Advanved Use Only) */
        setContactProcessingThreshold(threshold) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.setContactProcessingThreshold) {
                    this._collisionObject.setContactProcessingThreshold(threshold);
                }
            }
        }
        // ************************************ //
        // * Physics Physics Helper Functions * //
        // ************************************ //
        /** TODO */
        static CreatePhysicsMetadata(mass, drag = 0.0, angularDrag = 0.05, centerMass = null) {
            const center = (centerMass != null) ? centerMass : new BABYLON.Vector3(0, 0, 0);
            return {
                "type": "rigidbody",
                "mass": mass,
                "ldrag": drag,
                "adrag": angularDrag,
                "center": {
                    "x": center.x,
                    "y": center.y,
                    "z": center.z
                }
            };
        }
        /** TODO */
        static CreateCollisionMetadata(type, trigger = false, convexmesh = false, restitution = 0.0, dynamicfriction = 0.6, staticfriction = 0.6) {
            return {
                "type": type,
                "trigger": trigger,
                "convexmesh": convexmesh,
                "restitution": restitution,
                "dynamicfriction": dynamicfriction,
                "staticfriction": staticfriction,
                "wheelinformation": null
            };
        }
        /** TODO */
        static CreatePhysicsProperties(mass, drag = 0.0, angularDrag = 0.05, useGravity = true, isKinematic = false) {
            return {
                "mass": mass,
                "drag": drag,
                "angularDrag": angularDrag,
                "useGravity": useGravity,
                "isKinematic": isKinematic
            };
        }
        /** TODO */
        static SetupPhysicsComponent(scene, entity) {
            // console.warn("Setup Physics Component: " + entity.name);
            // console.log(entity);
            const metadata = (entity.metadata != null && entity.metadata.unity != null) ? entity.metadata.unity : null;
            if (metadata != null && (metadata.physics != null || metadata.collision != null)) {
                // Physics Metadata
                const hasphysics = (metadata.physics != null);
                const isroot = (metadata.physics != null && metadata.physics.root != null) ? metadata.physics.root : false;
                const mass = (metadata.physics != null && metadata.physics.mass != null) ? metadata.physics.mass : 0;
                const isstatic = (mass === 0);
                // Create Physics Impostor Node
                if (hasphysics === true) {
                    if (isroot) {
                        let fwheels = null;
                        let fdynamicfriction = 0;
                        let fstaticfriction = 0;
                        let frestitution = 0;
                        let ftrigger = false;
                        let fcount = 0;
                        // Note: Bullet Physics Center Mass Must Offset Meshes (No Working Set Center Mass Property Support)
                        const center = (metadata.physics != null && metadata.physics.center != null) ? BABYLON.Utilities.ParseVector3(metadata.physics.center, BABYLON.Vector3.Zero()) : BABYLON.Vector3.Zero();
                        let centernodes = entity.getChildren(null, true);
                        if (centernodes != null && centernodes.length > 0) {
                            centernodes.forEach((centernode) => { centernode.position.subtractInPlace(center); });
                        }
                        let childnodes = entity.getChildren(null, false);
                        if (childnodes != null && childnodes.length > 0) {
                            childnodes.forEach((childnode) => {
                                if (childnode.metadata != null && childnode.metadata.unity != null) {
                                    if (childnode.metadata.unity.collision != null) {
                                        const ccollision = childnode.metadata.unity.collision;
                                        const cwheelinformation = (ccollision.wheelinformation != null) ? ccollision.wheelinformation : null;
                                        if (cwheelinformation != null) {
                                            // Trace Wheel Collider
                                            // BABYLON.SceneManager.LogWarning(">>> Setup raycast wheel collider: " + childnode.name + " --> on to: " + entity.name);
                                            if (fwheels == null)
                                                fwheels = [];
                                            fwheels.push(cwheelinformation);
                                        }
                                        else {
                                            const cdynamicfriction = (ccollision.dynamicfriction != null) ? ccollision.dynamicfriction : 0.6;
                                            const cstaticfriction = (ccollision.staticfriction != null) ? ccollision.staticfriction : 0.6;
                                            const crestitution = (ccollision.restitution != null) ? ccollision.restitution : 0;
                                            const cistrigger = (ccollision.trigger != null) ? ccollision.trigger : false;
                                            const ccollider = (ccollision.type != null) ? ccollision.type : "BoxCollider";
                                            let cimpostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                                            if (ccollider === "MeshCollider") {
                                                // Note: Always Force Convex Hull Impostor Usage
                                                cimpostortype = BABYLON.PhysicsImpostor.ConvexHullImpostor;
                                            }
                                            else if (ccollider === "CapsuleCollider") {
                                                cimpostortype = BABYLON.PhysicsImpostor.CapsuleImpostor;
                                            }
                                            else if (ccollider === "SphereCollider") {
                                                cimpostortype = BABYLON.PhysicsImpostor.SphereImpostor;
                                            }
                                            else {
                                                cimpostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                                            }
                                            if (cdynamicfriction > fdynamicfriction)
                                                fdynamicfriction = cdynamicfriction;
                                            if (cstaticfriction > fstaticfriction)
                                                fstaticfriction = cstaticfriction;
                                            if (crestitution > frestitution)
                                                frestitution = crestitution;
                                            if (cistrigger == true)
                                                ftrigger = true;
                                            // Trace Compound Collider
                                            // BABYLON.SceneManager.LogWarning(">>> Setup " + BABYLON.SceneManager.GetPhysicsImposterType(cimpostortype).toLowerCase() + " compound imposter for: " + childnode.name);
                                            BABYLON.SceneManager.CreatePhysicsImpostor(scene, childnode, cimpostortype, { mass: 0, friction: 0, restitution: 0 });
                                            BABYLON.RigidbodyPhysics.ConfigRigidbodyPhysics(scene, childnode, true, false, metadata.physics);
                                            fcount++;
                                        }
                                    }
                                }
                            });
                        }
                        if (fcount > 0) {
                            // Trace Physics Root
                            // BABYLON.SceneManager.LogWarning(">>> Setup physics root no imposter for: " + entity.name);
                            BABYLON.SceneManager.CreatePhysicsImpostor(scene, entity, BABYLON.PhysicsImpostor.NoImpostor, { mass: mass, friction: fdynamicfriction, restitution: frestitution });
                            BABYLON.RigidbodyPhysics.ConfigRigidbodyPhysics(scene, entity, false, ftrigger, metadata.physics);
                        }
                        if (fwheels != null && fwheels.length > 0) {
                            if (entity.metadata == null)
                                entity.metadata = {};
                            if (entity.metadata.unity == null)
                                entity.metadata.unity = {};
                            entity.metadata.unity.wheels = fwheels;
                        }
                        childnodes = null;
                    }
                    else if (metadata.collision != null) {
                        const collider = (metadata.collision.type != null) ? metadata.collision.type : "BoxCollider";
                        const convexmesh = (metadata.collision.convexmesh != null) ? metadata.collision.convexmesh : false;
                        const dynamicfriction = (metadata.collision.dynamicfriction != null) ? metadata.collision.dynamicfriction : 0.6;
                        const staticfriction = (metadata.collision.staticfriction != null) ? metadata.collision.staticfriction : 0.6;
                        const restitution = (metadata.collision.restitution != null) ? metadata.collision.restitution : 0;
                        const istrigger = (metadata.collision.trigger != null) ? metadata.collision.trigger : false;
                        let impostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                        // Config Physics Impostor
                        if (collider === "MeshCollider") {
                            impostortype = (convexmesh === true) ? BABYLON.PhysicsImpostor.ConvexHullImpostor : BABYLON.PhysicsImpostor.MeshImpostor;
                        }
                        else if (collider === "CapsuleCollider") {
                            impostortype = BABYLON.PhysicsImpostor.CapsuleImpostor;
                        }
                        else if (collider === "SphereCollider") {
                            impostortype = BABYLON.PhysicsImpostor.SphereImpostor;
                        }
                        else {
                            impostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                        }
                        // Trace Physics Impostor
                        // BABYLON.SceneManager.LogWarning(">>> Setup " + BABYLON.SceneManager.GetPhysicsImposterType(impostortype).toLowerCase() + " physics impostor for: " + entity.name);
                        BABYLON.SceneManager.CreatePhysicsImpostor(scene, entity, impostortype, { mass: mass, friction: (isstatic) ? staticfriction : dynamicfriction, restitution: restitution });
                        BABYLON.RigidbodyPhysics.ConfigRigidbodyPhysics(scene, entity, false, istrigger, metadata.physics);
                    }
                }
            }
        }
        static ConfigRigidbodyPhysics(scene, entity, child, trigger, physics) {
            if (entity == null)
                return;
            if (entity.physicsImpostor != null) {
                entity.physicsImpostor.executeNativeFunction((word, body) => {
                    if (body.activate)
                        body.activate();
                    const colobj = Ammo.castObject(body, Ammo.btCollisionObject);
                    colobj.entity = entity;
                    // ..
                    // Legacy Edge Contact (DEPRECIATED: KEEP FOR REFERENCE)
                    // ..
                    //const world:any = BABYLON.SceneManager.GetPhysicsWorld(scene);
                    //if (world != null && world.generateInternalEdgeInfo) {
                    //    const collisionShape:any = colobj.getCollisionShape();
                    //    if (collisionShape != null && collisionShape.getShapeType) {
                    //        const shapeType:number = collisionShape.getShapeType();
                    //        if (shapeType === 21) { // TRIANGLE_MESH_SHAPE_PROXYTYPE
                    //            const triangleShape:any = Ammo.castObject(collisionShape, Ammo.btBvhTriangleMeshShape);
                    //            if (triangleShape != null) {
                    //                colobj.triangleMapInfo = new Ammo.btTriangleInfoMap();
                    //                world.generateInternalEdgeInfo(triangleShape, colobj.triangleMapInfo);
                    //            }
                    //        }
                    //    }
                    //}
                    // ..
                    // Setup Main Gravity
                    // ..
                    const gravity = (physics != null && physics.gravity != null) ? physics.gravity : true;
                    if (gravity === false) {
                        if (body.setGravity) {
                            if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                                BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                            BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(0, 0, 0);
                            body.setGravity(BABYLON.RigidbodyPhysics.TempAmmoVector);
                        }
                        else {
                            BABYLON.Tools.Warn("Physics engine set gravity override not supported for: " + entity.name);
                        }
                    }
                    // ..
                    // Setup Drag Damping
                    // ..
                    if (body.setDamping) {
                        const ldrag = (physics != null && physics.ldrag != null) ? physics.ldrag : 0;
                        const adrag = (physics != null && physics.adrag != null) ? physics.adrag : 0.05;
                        body.setDamping(ldrag, adrag);
                    }
                    else {
                        BABYLON.Tools.Warn("Physics engine set drag damping not supported for: " + entity.name);
                    }
                    // ..
                    // Setup Collision Flags
                    // ..
                    if (body.setCollisionFlags && body.getCollisionFlags) {
                        // DEPRECIATED: if (trigger === true) body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_NO_CONTACT_RESPONSE | BABYLON.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK);
                        // DEPRECIATED: else body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK);
                        // TODO: if (mass === 0) body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_KINEMATIC_OBJECT); // STATIC_OBJECT
                        if (trigger === true)
                            body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_NO_CONTACT_RESPONSE); // TRIGGER_OBJECT
                        body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK); // CUSTOM_MATERIAL
                    }
                    else {
                        BABYLON.Tools.Warn("Physics engine set collision flags not supported for: " + entity.name);
                    }
                    // ..
                    // Setup Freeze Constraints
                    // ..
                    const freeze = (physics != null && physics.freeze != null) ? physics.freeze : null;
                    if (freeze != null) {
                        if (body.setLinearFactor) {
                            const freeze_pos_x = (freeze.positionx != null && freeze.positionx === true) ? 0 : 1;
                            const freeze_pos_y = (freeze.positiony != null && freeze.positiony === true) ? 0 : 1;
                            const freeze_pos_z = (freeze.positionz != null && freeze.positionz === true) ? 0 : 1;
                            if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                                BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                            BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(freeze_pos_x, freeze_pos_y, freeze_pos_z);
                            body.setLinearFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
                        }
                        else {
                            BABYLON.Tools.Warn("Physics engine set linear factor not supported for: " + entity.name);
                        }
                        if (body.setAngularFactor) {
                            const freeze_rot_x = (freeze.rotationx != null && freeze.rotationx === true) ? 0 : 1;
                            const freeze_rot_y = (freeze.rotationy != null && freeze.rotationy === true) ? 0 : 1;
                            const freeze_rot_z = (freeze.rotationz != null && freeze.rotationz === true) ? 0 : 1;
                            if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                                BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                            BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(freeze_rot_x, freeze_rot_y, freeze_rot_z);
                            body.setAngularFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
                        }
                        else {
                            BABYLON.Tools.Warn("Physics engine set angular factor not supported for: " + entity.name);
                        }
                    }
                });
            }
            else {
                BABYLON.Tools.Warn("No valid physics impostor to setup for " + entity.name);
            }
        }
    }
    RigidbodyPhysics.TempAmmoVector = null;
    RigidbodyPhysics.TempAmmoVectorAux = null;
    RigidbodyPhysics.TempCenterTransform = null;
    BABYLON.RigidbodyPhysics = RigidbodyPhysics;
    /**
     * Babylon collision contact info pro class (Native Bullet Physics 2.82)
     * @class CollisionContactInfo - All rights reserved (c) 2020 Mackey Kinard
     */
    class CollisionContactInfo {
        constructor() {
            this.mesh = null;
            this.state = 0;
            this.reset = false;
        }
    }
    BABYLON.CollisionContactInfo = CollisionContactInfo;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon shuriken particle system pro class (Unity Style Shuriken Particle System)
     * @class ShurikenParticles - All rights reserved (c) 2020 Mackey Kinard
     */
    class ShurikenParticles extends BABYLON.ScriptComponent {
        awake() { }
        start() { }
        ready() { }
        update() { }
        late() { }
        after() { }
        fixed() { }
        destroy() { }
    }
    BABYLON.ShurikenParticles = ShurikenParticles;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon terrain building system pro class (Unity Style Terrain Building System)
     * @class TerrainGenerator - All rights reserved (c) 2020 Mackey Kinard
     */
    class TerrainGenerator extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this.treeInstances = null;
        }
        awake() {
            /* Init component function */
            // TESTING ONLY: const trees = this.getChildNode("_trees", BABYLON.SearchType.EndsWith, true);
            // TESTING ONLY: if (trees != null) this.treeInstances = trees.getChildren(null, true) as BABYLON.TransformNode[];
            console.log("Terrain Generator: " + this.transform.name);
            console.log(this);
        }
        start() {
            /* Start render loop function */
        }
        ready() {
            /* Execute when ready function */
        }
        update() {
            /* Update render loop function */
        }
        late() {
            /* Late update render loop function */
        }
        after() {
            /* After update render loop function */
        }
        fixed() {
            /* Fixed update physics step function */
        }
        destroy() {
            /* Destroy component function */
        }
    }
    BABYLON.TerrainGenerator = TerrainGenerator;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon web video player pro class (Unity Style Shuriken Particle System)
     * @class WebVideoPlayer - All rights reserved (c) 2020 Mackey Kinard
     */
    class WebVideoPlayer extends BABYLON.ScriptComponent {
        constructor() {
            super(...arguments);
            this.videoLoop = false;
            this.videoMuted = false;
            this.videoAlpha = false;
            this.videoFaded = false;
            this.videoPoster = null;
            this.videoInvert = true;
            this.videoSample = 3;
            this.videoVolume = 1.0;
            this.videoMipmaps = false;
            this.videoPlayback = 1.0;
            this.videoPlayOnAwake = true;
            this.videoPreloaderUrl = null;
            this.videoBlobUrl = null;
            this.videoPreload = false;
            this._initializedReadyInstance = false;
            /** Register handler that is triggered when the video clip is ready */
            this.onReadyObservable = new BABYLON.Observable();
            this.m_abstractMesh = null;
            this.m_videoTexture = null;
            this.m_videoMaterial = null;
            this.m_diffuseIntensity = 1.0;
        }
        getVideoMaterial() { return this.m_videoMaterial; }
        getVideoTexture() { return this.m_videoTexture; }
        getVideoElement() { return (this.m_videoTexture != null) ? this.m_videoTexture.video : null; }
        getVideoScreen() { return this.m_abstractMesh; }
        getVideoBlobUrl() { return this.videoBlobUrl; }
        awake() { this.awakeWebVideoPlayer(); }
        destroy() { this.destroyWebVideoPlayer(); }
        awakeWebVideoPlayer() {
            this.videoLoop = this.getProperty("looping", false);
            this.videoMuted = this.getProperty("muted", false);
            this.videoInvert = this.getProperty("inverty", true);
            this.videoSample = this.getProperty("sampling", 3);
            this.videoVolume = this.getProperty("volume", 1.0);
            this.videoMipmaps = this.getProperty("mipmaps", false);
            this.videoAlpha = this.getProperty("texturealpha", false);
            this.videoFaded = this.getProperty("diffusealpha", false);
            this.videoPlayback = this.getProperty("playbackspeed", 1.0);
            this.videoPlayOnAwake = this.getProperty("playonawake", true);
            this.videoPreload = this.getProperty("preload", this.videoPreload);
            this.m_diffuseIntensity = this.getProperty("intensity", 1.0);
            this.m_abstractMesh = this.getAbstractMesh();
            // ..
            const setPoster = this.getProperty("poster");
            if (setPoster === true && this.m_abstractMesh != null && this.m_abstractMesh.material != null) {
                if (this.m_abstractMesh.material instanceof BABYLON.PBRMaterial) {
                    if (this.m_abstractMesh.material.albedoTexture != null && this.m_abstractMesh.material.albedoTexture.url != null && this.m_abstractMesh.material.albedoTexture.url !== "") {
                        this.videoPoster = this.m_abstractMesh.material.albedoTexture.url.replace("data:", "");
                    }
                }
                else if (this.m_abstractMesh.material instanceof BABYLON.StandardMaterial) {
                    if (this.m_abstractMesh.material.diffuseTexture != null && this.m_abstractMesh.material.diffuseTexture.url != null && this.m_abstractMesh.material.diffuseTexture.url !== "") {
                        this.videoPoster = this.m_abstractMesh.material.diffuseTexture.url.replace("data:", "");
                    }
                }
            }
            // ..
            const videoUrl = this.getProperty("url", null);
            const videoSrc = this.getProperty("source", null);
            let playUrl = videoUrl;
            if (videoSrc != null && videoSrc.filename != null && videoSrc.filename !== "") {
                const rootUrl = BABYLON.SceneManager.GetRootUrl(this.scene);
                playUrl = (rootUrl + videoSrc.filename);
            }
            if (playUrl != null && playUrl !== "") {
                if (this.videoPreload === true) {
                    this.videoPreloaderUrl = playUrl;
                }
                else {
                    this.setDataSource(playUrl);
                }
            }
        }
        destroyWebVideoPlayer() {
            this.m_abstractMesh = null;
            if (this.m_videoTexture != null) {
                this.m_videoTexture.dispose();
                this.m_videoTexture = null;
            }
            if (this.m_videoMaterial != null) {
                this.m_videoMaterial.dispose();
                this.m_videoMaterial = null;
            }
            this.revokeVideoBlobUrl();
        }
        /**
         * Gets the video ready status
         */
        isReady() {
            return (this.getVideoElement() != null);
        }
        /**
         * Gets the video playing status
         */
        isPlaying() {
            let result = false;
            const video = this.getVideoElement();
            if (video != null) {
                result = (video.paused === false);
            }
            return result;
        }
        /**
         * Gets the video paused status
         */
        isPaused() {
            let result = false;
            const video = this.getVideoElement();
            if (video != null) {
                result = (video.paused === true);
            }
            return result;
        }
        /**
         * Play the video track
         */
        play() {
            if (BABYLON.SceneManager.HasAudioContext()) {
                this.internalPlay();
            }
            else {
                BABYLON.Engine.audioEngine.onAudioUnlockedObservable.addOnce(() => { this.internalPlay(); });
            }
            return true;
        }
        internalPlay() {
            if (this._initializedReadyInstance === true) {
                this.checkedPlay();
            }
            else {
                this.onReadyObservable.addOnce(() => { this.checkedPlay(); });
            }
        }
        checkedPlay() {
            const video = this.getVideoElement();
            if (video != null) {
                video.play().then(() => {
                    if (video.paused === true) {
                        this.checkedRePlay();
                    }
                });
            }
        }
        checkedRePlay() {
            const video = this.getVideoElement();
            if (video != null) {
                video.play().then(() => { });
            }
        }
        /**
         * Pause the video track
         */
        pause() {
            let result = false;
            const video = this.getVideoElement();
            if (video != null) {
                video.pause();
                result = true;
            }
            return result;
        }
        /**
         * Mute the video track
         */
        mute() {
            let result = false;
            const video = this.getVideoElement();
            if (video != null) {
                video.muted = true;
                result = true;
            }
            return result;
        }
        /**
         * Unmute the video track
         */
        unmute() {
            let result = false;
            const video = this.getVideoElement();
            if (video != null) {
                video.muted = false;
                result = true;
            }
            return result;
        }
        /**
         * Gets the video volume
         */
        getVolume() {
            let result = 0;
            const video = this.getVideoElement();
            if (video != null) {
                result = video.volume;
            }
            return result;
        }
        /**
         * Sets the video volume
         * @param volume Define the new volume of the sound
         */
        setVolume(volume) {
            let result = false;
            const video = this.getVideoElement();
            if (video != null) {
                video.volume = volume;
                result = true;
            }
            return result;
        }
        /** Set video data source */
        setDataSource(source) {
            if (this.m_abstractMesh != null) {
                // ..
                // Create Video Material
                // ..
                if (this.m_videoMaterial == null) {
                    this.m_videoMaterial = new BABYLON.StandardMaterial(this.transform.name + ".VideoMat", this.scene);
                    this.m_videoMaterial.roughness = 1;
                    this.m_videoMaterial.diffuseColor = new BABYLON.Color3(1, 1, 1);
                    this.m_videoMaterial.emissiveColor = new BABYLON.Color3(1, 1, 1);
                    this.m_videoMaterial.useAlphaFromDiffuseTexture = this.videoFaded;
                    this.m_abstractMesh.material = this.m_videoMaterial;
                }
                // ..
                // Setup Video Texture
                // ..
                if (this.m_videoMaterial != null) {
                    this.m_videoMaterial.diffuseTexture = null;
                    if (this.m_videoTexture != null) {
                        this.m_videoTexture.dispose();
                        this.m_videoTexture = null;
                    }
                    this._initializedReadyInstance = false;
                    this.m_videoTexture = new BABYLON.VideoTexture(this.transform.name + ".VideoTex", source, this.scene, this.videoMipmaps, this.videoInvert, this.videoSample, { autoUpdateTexture: true, poster: this.videoPoster });
                    if (this.m_videoTexture != null) {
                        this.m_videoTexture.hasAlpha = this.videoAlpha;
                        if (this.m_videoTexture.video != null) {
                            this.m_videoTexture.video.loop = this.videoLoop;
                            this.m_videoTexture.video.muted = this.videoMuted;
                            this.m_videoTexture.video.volume = this.videoVolume;
                            this.m_videoTexture.video.playbackRate = this.videoPlayback;
                            this.m_videoTexture.video.addEventListener("loadeddata", () => {
                                this._initializedReadyInstance = true;
                                if (this.onReadyObservable.hasObservers() === true) {
                                    this.onReadyObservable.notifyObservers(this.m_videoTexture);
                                }
                                if (this.videoPlayOnAwake === true) {
                                    this.play();
                                }
                            });
                            this.m_videoTexture.video.load();
                        }
                    }
                    if (this.m_videoTexture != null) {
                        this.m_videoTexture.level = this.m_diffuseIntensity;
                        this.m_videoMaterial.diffuseTexture = this.m_videoTexture;
                    }
                }
                else {
                    BABYLON.Tools.Warn("No video mesh or material available for: " + this.transform.name);
                }
            }
        }
        /** Revokes the current video blob url and releases resouces */
        revokeVideoBlobUrl() {
            if (this.videoBlobUrl != null) {
                URL.revokeObjectURL(this.videoBlobUrl);
                this.videoBlobUrl = null;
            }
        }
        /** Add video preloader asset tasks (https://doc.babylonjs.com/divingDeeper/importers/assetManager) */
        addPreloaderTasks(assetsManager) {
            if (this.videoPreload === true) {
                const assetTask = assetsManager.addBinaryFileTask((this.transform.name + ".VideoTask"), this.videoPreloaderUrl);
                assetTask.onSuccess = (task) => {
                    this.revokeVideoBlobUrl();
                    this.videoBlobUrl = URL.createObjectURL(new Blob([task.data]));
                    this.setDataSource(this.videoBlobUrl);
                };
                assetTask.onError = (task, message, exception) => { console.error(message, exception); };
            }
        }
    }
    BABYLON.WebVideoPlayer = WebVideoPlayer;
})(BABYLON || (BABYLON = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFieWxvbmpzX0V4cG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL0Fzc2V0cy9bQmFieWxvbl0vW1Byb10vQW5pbWF0aW9uU3RhdGUudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL0F1ZGlvU291cmNlLnRzIiwiLi4vQXNzZXRzL1tCYWJ5bG9uXS9bUHJvXS9DaGFyYWN0ZXJDb250cm9sbGVyLnRzIiwiLi4vQXNzZXRzL1tCYWJ5bG9uXS9bUHJvXS9OYXZpZ2F0aW9uQWdlbnQudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL1JheWNhc3RWZWhpY2xlLnRzIiwiLi4vQXNzZXRzL1tCYWJ5bG9uXS9bUHJvXS9SZWFsdGltZVJlZmxlY3Rpb24udHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL1JpZ2lkYm9keVBoeXNpY3MudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL1NodXJpa2VuUGFydGljbGVzLnRzIiwiLi4vQXNzZXRzL1tCYWJ5bG9uXS9bUHJvXS9UZXJyYWluR2VuZXJhdG9yLnRzIiwiLi4vQXNzZXRzL1tCYWJ5bG9uXS9bUHJvXS9XZWJWaWRlb1BsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFPLE9BQU8sQ0E0NkRiO0FBNTZERCxXQUFPLE9BQU87SUFDVjs7O09BR0c7SUFDSCxNQUFhLGNBQWUsU0FBUSxPQUFPLENBQUMsZUFBZTtRQUEzRDs7WUFNWSxlQUFVLEdBQVUsQ0FBQyxDQUFDO1lBQ3RCLGdCQUFXLEdBQVUsQ0FBQyxDQUFDO1lBQ3ZCLGdCQUFXLEdBQVUsQ0FBQyxDQUFDLENBQWEsK0VBQStFO1lBQ25ILG1CQUFjLEdBQVcsS0FBSyxDQUFDO1lBQy9CLHNCQUFpQixHQUFXLEtBQUssQ0FBQztZQUNsQywyQkFBc0IsR0FBVyxLQUFLLENBQUM7WUFDdkMsMkJBQXNCLEdBQVcsS0FBSyxDQUFDO1lBQ3ZDLDBCQUFxQixHQUFVLENBQUMsQ0FBQztZQUNqQywyQkFB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QyxLQUFLLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLENB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aUJBQWlCLENBQUMsYUFBMEM7WUFDL0QsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtnQkFDNUIsTUFBTSxTQUFTLEdBQStCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUM1SSxTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBZ0MsRUFBRSxFQUFFO29CQUN2RCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztvQkFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzFDLENBQUMsQ0FBQztnQkFDRixTQUFTLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBaUMsRUFBRSxPQUFnQixFQUFFLFNBQWUsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEk7UUFDTCxDQUFDO0tBQ0o7SUExUlksc0JBQWMsaUJBMFIxQixDQUFBO0FBQ0wsQ0FBQyxFQWhTTSxPQUFPLEtBQVAsT0FBTyxRQWdTYiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBCQUJZTE9OIHtcbiAgICAvKipcbiAgICAgKiBCYWJ5bG9uIGFuaW1hdGlvbiBzdGF0ZSBwcm8gY2xhc3MgKFVuaXR5IFN0eWxlIE1lY2hhbmltIEFuaW1hdGlvbiBTeXN0ZW0pXG4gICAgICogQGNsYXNzIEFuaW1hdGlvblN0YXRlIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXG4gICAgICovXG4gICAgZXhwb3J0IGNsYXNzIEFuaW1hdGlvblN0YXRlIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBGUFM6bnVtYmVyID0gMzA7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIEVYSVQ6c3RyaW5nID0gXCJbRVhJVF1cIjtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVElNRTpudW1iZXIgPSAxOyAgICAgICAgICAgICAvLyBOb3RlOiBNdXN0IEJlIE9uZSBTZWNvbmQgTm9ybWFsaXplZCBUaW1lXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFNQRUVEOm51bWJlciA9IDEuMDI1OyAgICAgICAgLy8gTm90ZTogQW5pbWF0aW9uIFN0YXRlIEJsZW5kIFNwZWVkIEZhY3RvclxuXG4gICAgICAgIHByaXZhdGUgX2ZyYW1ldGltZTpudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIF9sYXllcmNvdW50Om51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX3VwZGF0ZW1vZGU6bnVtYmVyID0gMDsgICAgICAgICAgICAgLy8gTm90ZTogMCAtIFRyYW5zZm9ybSBOb2RlIHwgMSAtIENoYWNyYWN0ZXIgQ29udHJvbGxlciB8IDIgLSBVbnNjYWxlZCBUaW1lID8/P1xuICAgICAgICBwcml2YXRlIF9oYXNyb290bW90aW9uOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfYW5pbWF0aW9ucGxheWluZzpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX2luaXRpYWx0YXJnZXRibGVuZGluZzpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX2hhc3RyYW5zZm9ybWhpZXJhcmNoeTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX2xlZnRmZWV0Ym90dG9taGVpZ2h0Om51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX3JpZ2h0ZmVldGJvdHRvbWhlaWdodDpudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIF9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ydW50aW1lY29udHJvbGxlcjpzdHJpbmcgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9leGVjdXRlZDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX2NoZWNrZXJzOkJBQllMT04uVHJhbnNpdGlvbkNoZWNrID0gbmV3IEJBQllMT04uVHJhbnNpdGlvbkNoZWNrKCk7XG4gICAgICAgIHByaXZhdGUgX3NvdXJjZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwcml2YXRlIF9tYWNoaW5lOmFueSA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfZGVsdGFQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfZGVsdGFSb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICBwcml2YXRlIF9wb3NpdGlvbldlaWdodDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX3Jvb3RCb25lV2VpZ2h0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfcm90YXRpb25XZWlnaHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9yb290UXVhdFdlaWdodDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX2FuZ3VsYXJWZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfcG9zaXRpb25Ib2xkZXI6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgIHByaXZhdGUgX3Jvb3RCb25lSG9sZGVyOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICBwcml2YXRlIF9yb3RhdGlvbkhvbGRlcjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICBwcml2YXRlIF9yb290UXVhdEhvbGRlcjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICBwcml2YXRlIF9yb290TW90aW9uTWF0cml4OkJBQllMT04uTWF0cml4ID0gQkFCWUxPTi5NYXRyaXguWmVybygpO1xuICAgICAgICBwcml2YXRlIF9yb290TW90aW9uU2NhbGluZzpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfcm9vdE1vdGlvblJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XG4gICAgICAgIHByaXZhdGUgX3Jvb3RNb3Rpb25Qb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfbGFzdE1vdGlvblJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XG4gICAgICAgIHByaXZhdGUgX2xhc3RNb3Rpb25Qb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfZGVsdGFQb3NpdGlvbkZpeGVkOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICBwcml2YXRlIF9kZWx0YVBvc2l0aW9uTWF0cml4OkJBQllMT04uTWF0cml4ID0gbmV3IEJBQllMT04uTWF0cml4KCk7XG4gICAgICAgIHByaXZhdGUgX3NhdmVEZWx0YVBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICBwcml2YXRlIF9zYXZlRGVsdGFSb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICBwcml2YXRlIF9kaXJ0eU1vdGlvbk1hdHJpeDphbnkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9kaXJ0eUJsZW5kZXJNYXRyaXg6YW55ID0gbnVsbDtcbiAgICAgICAgLy9wcml2YXRlIF9ib2R5T3JpZW50YXRpb25BbmdsZVk6bnVtYmVyID0gMDtcblxuICAgICAgICAvL3ByaXZhdGUgdHJhbnNmb3JtRm9yd2FyZFZlY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgLy9wcml2YXRlIHRyYW5zZm9ybVJpZ2h0VmVjdG9yOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICAvL3ByaXZhdGUgZGVzaXJlZEZvcndhcmRWZWN0b3I6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgIC8vcHJpdmF0ZSBkZXNpcmVkUmlnaHRWZWN0b3I6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG5cbiAgICAgICAgcHJpdmF0ZSBfdGFyZ2V0UG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgIHByaXZhdGUgX3RhcmdldFJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XG4gICAgICAgIHByaXZhdGUgX3RhcmdldFNjYWxpbmc6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygxLDEsMSk7XG4gICAgICAgIHByaXZhdGUgX3VwZGF0ZU1hdHJpeDpCQUJZTE9OLk1hdHJpeCA9IEJBQllMT04uTWF0cml4Llplcm8oKTtcbiAgICAgICAgcHJpdmF0ZSBfYmxlbmRlck1hdHJpeDpCQUJZTE9OLk1hdHJpeCA9IEJBQllMT04uTWF0cml4Llplcm8oKTtcbiAgICAgICAgcHJpdmF0ZSBfYmxlbmRXZWlnaHRzOkJBQllMT04uQmxlbmRpbmdXZWlnaHRzID0gbmV3IEJBQllMT04uQmxlbmRpbmdXZWlnaHRzKCk7XG4gICAgICAgIHByaXZhdGUgX2VtcHR5U2NhbGluZzpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDEsMSwxKTtcbiAgICAgICAgcHJpdmF0ZSBfZW1wdHlQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfZW1wdHlSb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICBwcml2YXRlIF9pa0ZyYW1lRWFuYmxlZDpib29sZWFuID0gZmFsc2U7XG5cbiAgICAgICAgcHJpdmF0ZSBfZGF0YTpNYXA8c3RyaW5nLCBCQUJZTE9OLk1hY2hpbmVTdGF0ZT4gPSBuZXcgTWFwPHN0cmluZywgQkFCWUxPTi5NYWNoaW5lU3RhdGU+KCk7XG4gICAgICAgIHByaXZhdGUgX2FuaW1zOk1hcDxzdHJpbmcsIEJBQllMT04uQW5pbWF0aW9uR3JvdXA+ID0gbmV3IE1hcDxzdHJpbmcsIEJBQllMT04uQW5pbWF0aW9uR3JvdXA+KCk7XG4gICAgICAgIHByaXZhdGUgX251bWJlcnM6TWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbiAgICAgICAgcHJpdmF0ZSBfYm9vbGVhbnM6TWFwPHN0cmluZywgYm9vbGVhbj4gPSBuZXcgTWFwKCk7XG4gICAgICAgIHByaXZhdGUgX3RyaWdnZXJzOk1hcDxzdHJpbmcsIGJvb2xlYW4+ID0gbmV3IE1hcCgpO1xuICAgICAgICBwcml2YXRlIF9wYXJhbWV0ZXJzOk1hcDxzdHJpbmcsIEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlPiA9IG5ldyBNYXA8c3RyaW5nLCBCQUJZTE9OLkFuaW1hdG9yUGFyYW1ldGVyVHlwZT4oKTtcbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBzcGVlZFJhdGlvOm51bWJlciA9IDEuMDtcbiAgICAgICAgcHVibGljIGFwcGx5Um9vdE1vdGlvbiA9IGZhbHNlO1xuICAgICAgICBwdWJsaWMgZGVsYXlVcGRhdGVVbnRpbFJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgcHVibGljIGVuYWJsZUFuaW1hdGlvbjpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHVibGljIHVwZGF0ZVJvb3RNb3Rpb25Qb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICBwdWJsaWMgdXBkYXRlUm9vdE1vdGlvblJvdGF0aW9uID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyBoYXNSb290TW90aW9uKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLl9oYXNyb290bW90aW9uIH1cbiAgICAgICAgcHVibGljIGlrRnJhbWVFbmFibGVkKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLl9pa0ZyYW1lRWFuYmxlZDsgfVxuICAgICAgICBwdWJsaWMgZ2V0QW5pbWF0aW9uVGltZSgpOm51bWJlciB7IHJldHVybiB0aGlzLl9mcmFtZXRpbWU7IH1cbiAgICAgICAgcHVibGljIGdldEFuaW1hdGlvblBsYXlpbmcoKTpib29sZWFuIHsgcmV0dXJuIHRoaXMuX2FuaW1hdGlvbnBsYXlpbmc7IH1cbiAgICAgICAgcHVibGljIGdldFJvb3RNb3Rpb25BbmdsZSgpOm51bWJlciB7IHJldHVybiB0aGlzLl9hbmd1bGFyVmVsb2NpdHkueTsgfVxuICAgICAgICBwdWJsaWMgZ2V0Um9vdE1vdGlvblNwZWVkKCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuX2RlbHRhUG9zaXRpb24ubGVuZ3RoKCk7IH1cbiAgICAgICAgcHVibGljIGdldFJvb3RNb3Rpb25Qb3NpdGlvbigpOkJBQllMT04uVmVjdG9yMyB7IHJldHVybiB0aGlzLl9kZWx0YVBvc2l0aW9uRml4ZWQ7IH1cbiAgICAgICAgcHVibGljIGdldFJvb3RNb3Rpb25Sb3RhdGlvbigpOkJBQllMT04uUXVhdGVybmlvbiB7IHJldHVybiB0aGlzLl9kZWx0YVJvdGF0aW9uOyB9XG4gICAgICAgIHB1YmxpYyBnZXRDaGFyYWN0ZXJDb250cm9sbGVyKCk6QkFCWUxPTi5DaGFyYWN0ZXJDb250cm9sbGVyIHsgcmV0dXJuIHRoaXMubV9jaGFyYWN0ZXJDb250cm9sbGVyOyB9XG4gICAgICAgIHB1YmxpYyBnZXRSdW50aW1lQ29udHJvbGxlcigpOnN0cmluZyB7IHJldHVybiB0aGlzLl9ydW50aW1lY29udHJvbGxlcjsgfVxuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhbmltYXRpb24gaWsgc2V0dXAgaGFzIGJlZW4gdHJpZ2dlcmVkICovXG4gICAgICAgIHB1YmxpYyBvbkFuaW1hdGlvbklLT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8bnVtYmVyPigpO1xuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhbmltYXRpb24gZW5kIGhhcyBiZWVuIHRyaWdnZXJlZCAqL1xuICAgICAgICBwdWJsaWMgb25BbmltYXRpb25FbmRPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxudW1iZXI+KCk7XG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGFuaW1hdGlvbiBsb29wIGhhcyBiZWVuIHRyaWdnZXJlZCAqL1xuICAgICAgICBwdWJsaWMgb25BbmltYXRpb25Mb29wT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8bnVtYmVyPigpO1xuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhbmltYXRpb24gZXZlbnQgaGFzIGJlZW4gdHJpZ2dlcmVkICovXG4gICAgICAgIHB1YmxpYyBvbkFuaW1hdGlvbkV2ZW50T2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5JQW5pbWF0b3JFdmVudD4oKTtcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGZyYW1lIGhhcyBiZWVuIHVwZGF0ZWQgKi9cbiAgICAgICAgcHVibGljIG9uQW5pbWF0aW9uVXBkYXRlT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xuXG4gICAgICAgIHByb3RlY3RlZCBtX2RlZmF1bHRHcm91cDpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fYW5pbWF0aW9uVGFyZ2V0czpCQUJZTE9OLlRhcmdldGVkQW5pbWF0aW9uW10gPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9jaGFyYWN0ZXJDb250cm9sbGVyOkJBQllMT04uQ2hhcmFjdGVyQ29udHJvbGxlciA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7IHRoaXMuYXdha2VTdGF0ZU1hY2hpbmUoKTsgfVxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6IHZvaWQgeyB0aGlzLnVwZGF0ZVN0YXRlTWFjaGluZSgpOyB9XG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQgeyB0aGlzLmRlc3Ryb3lTdGF0ZU1hY2hpbmUoKTsgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gU3RhdGUgTWFjaGluZSBGdW5jdGlvbnNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBcbiAgICAgICAgcHVibGljIHBsYXlBbmltYXRpb24oc3RhdGU6c3RyaW5nLCB0cmFuc2l0aW9uRHVyYXRpb246bnVtYmVyID0gMCwgYW5pbWF0aW9uTGF5ZXI6bnVtYmVyID0gMCwgZnJhbWVSYXRlOm51bWJlciA9IG51bGwpOmJvb2xlYW4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiBhbmltYXRpb25MYXllcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyID0gdGhpcy5fbWFjaGluZS5sYXllcnNbYW5pbWF0aW9uTGF5ZXJdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kRnJhbWVSYXRlOm51bWJlciA9IChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUgIT0gbnVsbCkgPyAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLnJhdGUgfHwgQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5GUFMpIDogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5GUFM7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxlbmRpbmdTcGVlZDpudW1iZXIgPSAodHJhbnNpdGlvbkR1cmF0aW9uID4gMCkgPyBCQUJZTE9OLlV0aWxpdGllcy5Db21wdXRlQmxlbmRpbmdTcGVlZChmcmFtZVJhdGUgfHwgYmxlbmRGcmFtZVJhdGUsIHRyYW5zaXRpb25EdXJhdGlvbikgOiAwO1xuICAgICAgICAgICAgICAgIHRoaXMucGxheUN1cnJlbnRBbmltYXRpb25TdGF0ZShsYXllciwgc3RhdGUsIGJsZW5kaW5nU3BlZWQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIGFuaW1hdGlvbiBzdGF0ZSBsYXllcnMgb24gXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHN0b3BBbmltYXRpb24oYW5pbWF0aW9uTGF5ZXI6bnVtYmVyID0gMCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYWNoaW5lLmxheWVycyAhPSBudWxsICYmIHRoaXMuX21hY2hpbmUubGF5ZXJzLmxlbmd0aCA+IGFuaW1hdGlvbkxheWVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIgPSB0aGlzLl9tYWNoaW5lLmxheWVyc1thbmltYXRpb25MYXllcl07XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQ3VycmVudEFuaW1hdGlvblN0YXRlKGxheWVyKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyBhbmltYXRpb24gc3RhdGUgbGF5ZXJzIG9uIFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBTdGF0ZSBNYWNoaW5lIEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgcHVibGljIGdldEJvb2wobmFtZTpzdHJpbmcpOmJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jvb2xlYW5zLmdldChuYW1lKSB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0Qm9vbChuYW1lOnN0cmluZywgdmFsdWU6Ym9vbGVhbik6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9ib29sZWFucy5zZXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXRGbG9hdChuYW1lOnN0cmluZyk6ZmxvYXQge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlcnMuZ2V0KG5hbWUpIHx8IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldEZsb2F0KG5hbWU6c3RyaW5nLCB2YWx1ZTpmbG9hdCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9udW1iZXJzLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldEludGVnZXIobmFtZTpzdHJpbmcpOmludCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVycy5nZXQobmFtZSkgfHwgMDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0SW50ZWdlcihuYW1lOnN0cmluZywgdmFsdWU6aW50KTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX251bWJlcnMuc2V0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0VHJpZ2dlcihuYW1lOnN0cmluZyk6Ym9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJpZ2dlcnMuZ2V0KG5hbWUpIHx8IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXRUcmlnZ2VyKG5hbWU6c3RyaW5nKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJzLnNldChuYW1lLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgcmVzZXRUcmlnZ2VyKG5hbWU6c3RyaW5nKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJzLnNldChuYW1lLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldFNtb290aEZsb2F0KG5hbWU6c3RyaW5nLCB0YXJnZXRWYWx1ZTpmbG9hdCwgZGFtcFRpbWU6bnVtYmVyLCBkZWx0YVRpbWU6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZTpudW1iZXIgPSB0aGlzLmdldEZsb2F0KG5hbWUpO1xuICAgICAgICAgICAgY29uc3QgZ3JhZGllbnRWYWx1ZTpudW1iZXIgPSBCQUJZTE9OLlNjYWxhci5MZXJwKGN1cnJlbnRWYWx1ZSwgdGFyZ2V0VmFsdWUsIChkYW1wVGltZSAqIGRlbHRhVGltZSkpO1xuICAgICAgICAgICAgdGhpcy5fbnVtYmVycy5zZXQobmFtZSwgZ3JhZGllbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldFNtb290aEludGVnZXIobmFtZTpzdHJpbmcsIHRhcmdldFZhbHVlOmludCwgZGFtcFRpbWU6bnVtYmVyLCBkZWx0YVRpbWU6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZTpudW1iZXIgPSB0aGlzLmdldEludGVnZXIobmFtZSk7XG4gICAgICAgICAgICBjb25zdCBncmFkaWVudFZhbHVlOm51bWJlciA9IEJBQllMT04uU2NhbGFyLkxlcnAoY3VycmVudFZhbHVlLCB0YXJnZXRWYWx1ZSwgKGRhbXBUaW1lICogZGVsdGFUaW1lKSk7XG4gICAgICAgICAgICB0aGlzLl9udW1iZXJzLnNldChuYW1lLCBncmFkaWVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIGdldE1hY2hpbmVTdGF0ZShuYW1lOnN0cmluZyk6QkFCWUxPTi5NYWNoaW5lU3RhdGUge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgc2V0TWFjaGluZVN0YXRlKG5hbWU6c3RyaW5nLCB2YWx1ZTpCQUJZTE9OLk1hY2hpbmVTdGF0ZSk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldEN1cnJlbnRTdGF0ZShsYXllcjpudW1iZXIpOkJBQllMT04uTWFjaGluZVN0YXRlIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiBsYXllcikgPyB0aGlzLl9tYWNoaW5lLmxheWVyc1tsYXllcl0uYW5pbWF0aW9uU3RhdGVNYWNoaW5lIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0QW5pbWF0aW9uR3JvdXAobmFtZTpzdHJpbmcpOkJBQllMT04uQW5pbWF0aW9uR3JvdXAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1zLmdldChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0QW5pbWF0aW9uR3JvdXBzKCk6TWFwPHN0cmluZywgQkFCWUxPTi5BbmltYXRpb25Hcm91cD57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbXM7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBwdWJsaWMgc2V0QW5pbWF0aW9uR3JvdXBzKGdyb3VwczpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwW10sIHJlbWFwVGFyZ2V0czpib29sZWFuID0gZmFsc2UpOnZvaWQge1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIC8vIFRPRE8gLSBIYW5kbGUgUmVtYXAgQW5pbWF0aW9uIFRhcmdldHNcbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICBpZiAoZ3JvdXBzICE9IG51bGwgJiYgZ3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltcyA9IG5ldyBNYXA8c3RyaW5nLCBCQUJZTE9OLkFuaW1hdGlvbkdyb3VwPigpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9hbmltYXRpb25UYXJnZXRzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5tX2RlZmF1bHRHcm91cCA9IGdyb3Vwc1swXTtcbiAgICAgICAgICAgICAgICBncm91cHMuZm9yRWFjaCgoZ3JvdXA6QkFCWUxPTi5BbmltYXRpb25Hcm91cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZ3JvdXA6YW55ID0gZ3JvdXA7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7IGdyb3VwLnN0b3AoKTsgfSBjYXRjaCB7fVxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAudGFyZ2V0ZWRBbmltYXRpb25zICE9IG51bGwgJiYgZ3JvdXAudGFyZ2V0ZWRBbmltYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLnRhcmdldGVkQW5pbWF0aW9ucy5mb3JFYWNoKCh0YXJnZXRlZEFuaW1hdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IEZvciBMb29wIEZhc3RlciBUaGFuIEluZGV4T2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXhPZlRhcmdldDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubV9hbmltYXRpb25UYXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldGVkQW5pbWF0aW9uLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZlRhcmdldCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleE9mVGFyZ2V0IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cy5wdXNoKHRhcmdldGVkQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldGVkQW5pbWF0aW9uLnRhcmdldC5tZXRhZGF0YSA9PSBudWxsKSB0YXJnZXRlZEFuaW1hdGlvbi50YXJnZXQubWV0YWRhdGEgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ZWRBbmltYXRpb24udGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5WYWxpZGF0ZVRyYW5zZm9ybVF1YXRlcm5pb24odGFyZ2V0ZWRBbmltYXRpb24udGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyTWl4ZXJzOkJBQllMT04uQW5pbWF0aW9uTWl4ZXJbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2xheWVyY291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllck1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBuZXcgQkFCWUxPTi5BbmltYXRpb25NaXhlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTWl4ZXIucG9zaXRpb25CdWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTWl4ZXIucm90YXRpb25CdWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTWl4ZXIuc2NhbGluZ0J1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5vcmlnaW5hbE1hdHJpeCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5ibGVuZGluZ0ZhY3RvciA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5ibGVuZGluZ1NwZWVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck1peGVyLnJvb3RQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5yb290Um90YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTWl4ZXJzLnB1c2gobGF5ZXJNaXhlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRlZEFuaW1hdGlvbi50YXJnZXQubWV0YWRhdGEubWl4ZXIgPSBsYXllck1peGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRlZEFuaW1hdGlvbi50YXJnZXQgaW5zdGFuY2VvZiBCQUJZTE9OLk1vcnBoVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3JwaExheWVyTWl4ZXJzOkJBQllMT04uQW5pbWF0aW9uTWl4ZXJbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2xheWVyY291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3JwaExheWVyTWl4ZXI6QkFCWUxPTi5BbmltYXRpb25NaXhlciA9IG5ldyBCQUJZTE9OLkFuaW1hdGlvbk1peGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhMYXllck1peGVyLmluZmx1ZW5jZUJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhMYXllck1peGVycy5wdXNoKG1vcnBoTGF5ZXJNaXhlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoPGFueT50YXJnZXRlZEFuaW1hdGlvbi50YXJnZXQpLm1ldGFkYXRhLm1peGVyID0gbW9ycGhMYXllck1peGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkuY2xpcCAhPSBudWxsICYmIGFncm91cC5tZXRhZGF0YS51bml0eS5jbGlwICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltcy5zZXQoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmNsaXAsIGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogQW5pbWF0aW9uIENvbnRyb2xsZXIgU3RhdGUgTWFjaGluZSBGdW5jdGlvbnMgKi9cbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgYXdha2VTdGF0ZU1hY2hpbmUoKTp2b2lkIHtcbiAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5tX2RlZmF1bHRHcm91cCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1fY2hhcmFjdGVyQ29udHJvbGxlciA9IHRoaXMuZ2V0Q29tcG9uZW50KFwiQkFCWUxPTi5DaGFyYWN0ZXJDb250cm9sbGVyXCIpO1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZSA9ICh0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YSAhPSBudWxsICYmIHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgdGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEudW5pdHkuYW5pbWF0b3IgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS51bml0eS5hbmltYXRvciAhPT0gXCJcIikgPyB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS51bml0eS5hbmltYXRvciA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9tYWNoaW5lID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1hY2hpbmVcIiwgdGhpcy5fbWFjaGluZSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVtb2RlID0gdGhpcy5nZXRQcm9wZXJ0eShcInVwZGF0ZW1vZGVcIiwgdGhpcy5fdXBkYXRlbW9kZSk7XG4gICAgICAgICAgICB0aGlzLl9oYXNyb290bW90aW9uID0gdGhpcy5nZXRQcm9wZXJ0eShcImhhc3Jvb3Rtb3Rpb25cIiwgdGhpcy5faGFzcm9vdG1vdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9ydW50aW1lY29udHJvbGxlciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJydW50aW1lY29udHJvbGxlclwiLCB0aGlzLl9ydW50aW1lY29udHJvbGxlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXN0cmFuc2Zvcm1oaWVyYXJjaHkgPSB0aGlzLmdldFByb3BlcnR5KFwiaGFzdHJhbnNmb3JtaGllcmFyY2h5XCIsIHRoaXMuX2hhc3RyYW5zZm9ybWhpZXJhcmNoeSk7XG4gICAgICAgICAgICB0aGlzLl9sZWZ0ZmVldGJvdHRvbWhlaWdodCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJsZWZ0ZmVldGJvdHRvbWhlaWdodFwiLCB0aGlzLl9sZWZ0ZmVldGJvdHRvbWhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLl9yaWdodGZlZXRib3R0b21oZWlnaHQgPSB0aGlzLmdldFByb3BlcnR5KFwicmlnaHRmZWV0Ym90dG9taGVpZ2h0XCIsIHRoaXMuX3JpZ2h0ZmVldGJvdHRvbWhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLmFwcGx5Um9vdE1vdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhcHBseXJvb3Rtb3Rpb25cIiwgdGhpcy5hcHBseVJvb3RNb3Rpb24pO1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIGlmICh0aGlzLl9tYWNoaW5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5zcGVlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlZWRSYXRpbyA9IHRoaXMuX21hY2hpbmUuc3BlZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYWNoaW5lLnBhcmFtZXRlcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLnBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGlzdDphbnlbXSA9IHRoaXMuX21hY2hpbmUucGFyYW1ldGVycztcbiAgICAgICAgICAgICAgICAgICAgcGxpc3QuZm9yRWFjaCgocGFyYW1ldGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lOnN0cmluZyA9IHBhcmFtZXRlci5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZTpCQUJZTE9OLkFuaW1hdG9yUGFyYW1ldGVyVHlwZSA9IHBhcmFtZXRlci50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VydmU6Ym9vbGVhbiA9IHBhcmFtZXRlci5jdXJ2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRGbG9hdDpudW1iZXIgPSBwYXJhbWV0ZXIuZGVmYXVsdEZsb2F0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdEJvb2w6Ym9vbGVhbiA9IHBhcmFtZXRlci5kZWZhdWx0Qm9vbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRJbnQ6bnVtYmVyID0gcGFyYW1ldGVyLmRlZmF1bHRJbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzLnNldChuYW1lLCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBCQUJZTE9OLkFuaW1hdG9yUGFyYW1ldGVyVHlwZS5Cb29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRCb29sKG5hbWUsIGRlZmF1bHRCb29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUuRmxvYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZsb2F0KG5hbWUsIGRlZmF1bHRGbG9hdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SW50ZWdlcihuYW1lLCBkZWZhdWx0SW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUuVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRUcmlnZ2VyKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIE1hY2hpbmUgU3RhdGUgTGF5ZXJzXG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheWVyY291bnQgPSB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvcnQgSW4gQXNjZW5kaW5nIE9yZGVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLnNvcnQoKGxlZnQsIHJpZ2h0KTogbnVtYmVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0LmluZGV4IDwgcmlnaHQuaW5kZXgpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0LmluZGV4ID4gcmlnaHQuaW5kZXgpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBTdGF0ZSBNYWNoaW5lIExheWVyc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWNoaW5lLmxheWVycy5mb3JFYWNoKChsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IExheWVyIEF2YXRhciBNYXNrIFRyYW5zZm9ybSBQYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25NYXNrTWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hdmF0YXJNYXNrICE9IG51bGwgJiYgbGF5ZXIuYXZhdGFyTWFzay50cmFuc2Zvcm1QYXRocyAhPSBudWxsICYmIGxheWVyLmF2YXRhck1hc2sudHJhbnNmb3JtUGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXIuYXZhdGFyTWFzay50cmFuc2Zvcm1QYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25NYXNrTWFwLnNldChsYXllci5hdmF0YXJNYXNrLnRyYW5zZm9ybVBhdGhzW2ldLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2UgIT0gbnVsbCAmJiB0aGlzLl9zb3VyY2UgIT09IFwiXCIgJiYgdGhpcy5zY2VuZS5hbmltYXRpb25Hcm91cHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBzb3VyY2VhbmltczpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwW10gPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgLy8gVE9ETyAtIE9wdGltaXplIFNlYXJjaGluZyBHbG9iYWwgQW5pbWF0aW9uIEdyb3VwcyAtID8/P1xuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5hbmltYXRpb25Hcm91cHMuZm9yRWFjaCgoZ3JvdXA6QkFCWUxPTi5BbmltYXRpb25Hcm91cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZ3JvdXA6YW55ID0gZ3JvdXA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc291cmNlICE9IG51bGwgJiYgYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNvdXJjZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFncm91cC5tZXRhZGF0YS51bml0eS5zb3VyY2UgPT09IHRoaXMuX3NvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VhbmltcyA9PSBudWxsKSBzb3VyY2VhbmltcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZWFuaW1zLnB1c2goZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZWFuaW1zICE9IG51bGwgJiYgc291cmNlYW5pbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFuaW1hdGlvbkdyb3Vwcyhzb3VyY2Vhbmltcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIC8vIE1hcCBTdGF0ZSBNYWNoaW5lIFRyYWNrcyAoQW5pbWF0aW9uIEdyb3VwcylcbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZSAhPSBudWxsICYmIHRoaXMuX21hY2hpbmUuc3RhdGVzICE9IG51bGwgJiYgdGhpcy5fbWFjaGluZS5zdGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUuc3RhdGVzLmZvckVhY2goKHN0YXRlOkJBQllMT04uTWFjaGluZVN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAhPSBudWxsICYmIHN0YXRlLm5hbWUgIT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBDdXN0b20gQW5pbWF0aW9uIEN1cnZlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNjdXJ2ZXMgIT0gbnVsbCAmJiBzdGF0ZS5jY3VydmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jY3VydmVzLmZvckVhY2goKGN1cnZlOkJBQllMT04uSVVuaXR5Q3VydmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnZlLmFuaW1hdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltOkJBQllMT04uQW5pbWF0aW9uID0gQkFCWUxPTi5BbmltYXRpb24uUGFyc2UoY3VydmUuYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGN1cnZlcyA9PSBudWxsKSBzdGF0ZS50Y3VydmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudGN1cnZlcy5wdXNoKGFuaW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBBbmltYXRpb24gU3RhdGUgTWFjaGluZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUcmVlQnJhbmNoZXMoc3RhdGUuYmxlbmR0cmVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TWFjaGluZVN0YXRlKHN0YXRlLm5hbWUsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gLi4gXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJBbmltYXRpb24gU3RhdGUgTWFoaW5lOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgICAgICAvLyBTTS5TZXRXaW5kb3dTdGF0ZSh0aGlzLnRyYW5zZm9ybS5uYW1lLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgdXBkYXRlU3RhdGVNYWNoaW5lKGRlbHRhVGltZTpudW1iZXIgPSBudWxsKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGF5VXBkYXRlVW50aWxSZWFkeSA9PT0gZmFsc2UgfHwgKHRoaXMuZGVsYXlVcGRhdGVVbnRpbFJlYWR5ID09PSB0cnVlICYmIHRoaXMuZ2V0UmVhZHlTdGF0ZSgpID09PSB0cnVlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9leGVjdXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhlY3V0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWNoaW5lLmxheWVycy5mb3JFYWNoKChsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheUN1cnJlbnRBbmltYXRpb25TdGF0ZShsYXllciwgbGF5ZXIuZW50cnksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlQW5pbWF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lRGVsdGFUaW1lOm51bWJlciA9IGRlbHRhVGltZSB8fCB0aGlzLmdldERlbHRhU2Vjb25kcygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFuaW1hdGlvblN0YXRlKGZyYW1lRGVsdGFUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25UYXJnZXRzKGZyYW1lRGVsdGFUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25VcGRhdGVPYnNlcnZhYmxlLmhhc09ic2VydmVycygpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uVXBkYXRlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgZGVzdHJveVN0YXRlTWFjaGluZSgpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9hbmltcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9udW1iZXJzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2Jvb2xlYW5zID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlcnMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fbWFjaGluZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uSUtPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uSUtPYnNlcnZhYmxlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25FbmRPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uRW5kT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uTG9vcE9ic2VydmFibGUuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25Mb29wT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uRXZlbnRPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uRXZlbnRPYnNlcnZhYmxlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25VcGRhdGVPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uVXBkYXRlT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBBbmltYXRpb24gQ29udHJvbGxlciBQcml2YXRlIFVwZGF0ZSBGdW5jdGlvbnMgKi9cblxuICAgICAgICBwcml2YXRlIHVwZGF0ZUFuaW1hdGlvblN0YXRlKGRlbHRhVGltZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21hY2hpbmUubGF5ZXJzICE9IG51bGwgJiYgdGhpcy5fbWFjaGluZS5sYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLmZvckVhY2goKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTdGF0ZU1hY2hpbmUobGF5ZXIsIGRlbHRhVGltZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgdXBkYXRlQW5pbWF0aW9uVGFyZ2V0cyhkZWx0YVRpbWU6bnVtYmVyKSA6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9pa0ZyYW1lRWFuYmxlZCA9IGZhbHNlOyAgIC8vIFJlc2V0IEN1cnJlbnQgSW52ZXJzZSBLaW5lbWF0aWNzXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25wbGF5aW5nID0gZmFsc2U7IC8vIFJlc2V0IEN1cnJlbnQgQW5pbWF0aW9uIElzIFBsYXlpbmdcbiAgICAgICAgICAgIC8vdGhpcy5fYm9keU9yaWVudGF0aW9uQW5nbGVZID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vdGhpcy5fYm9keU9yaWVudGF0aW9uQW5nbGVZID0gdGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uLnRvRXVsZXJBbmdsZXMoKS55OyAvLyBUT0RPIC0gT1BUSU1JWkUgVEhJU1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy90aGlzLl9ib2R5T3JpZW50YXRpb25BbmdsZVkgPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX21hY2hpbmUubGF5ZXJzICE9IG51bGwgJiYgdGhpcy5fbWFjaGluZS5sYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLmZvckVhY2goKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5pbmRleCA9PT0gMCkgdGhpcy5fZnJhbWV0aW1lID0gbGF5ZXIuYW5pbWF0aW9uVGltZTsgICAvLyBOb3RlOiBVcGRhdGUgTWFzdGVyIEFuaW1hdGlvbiBGcmFtZSBUaW1lXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUgIT0gbnVsbCAmJiBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUuYmxlbmR0cmVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5pS1Bhc3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmlLT25GZWV0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lrRnJhbWVFYW5ibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25JS09ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbklLT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMobGF5ZXIuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyU3RhdGU6QkFCWUxPTi5NYWNoaW5lU3RhdGUgPSBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJTdGF0ZS50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuQ2xpcCAmJiBsYXllclN0YXRlLnBsYXllZCAhPT0gLTEpIGxheWVyU3RhdGUucGxheWVkICs9IGRlbHRhVGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllclN0YXRlLmJsZW5kdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIGxheWVyU3RhdGUuYmxlbmR0cmVlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmltYXJ5QmxlbmRUcmVlOkJBQllMT04uSUJsZW5kVHJlZUNoaWxkID0gbGF5ZXJTdGF0ZS5ibGVuZHRyZWUuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByaW1hcnlCbGVuZFRyZWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJTdGF0ZS5ibGVuZHRyZWUuYmxlbmRUeXBlID09IEJBQllMT04uQmxlbmRUcmVlVHlwZS5DbGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25UcmFjazpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwID0gcHJpbWFyeUJsZW5kVHJlZS50cmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UcmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRpbzpudW1iZXIgPSAoQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FIC8gYW5pbWF0aW9uVHJhY2sudG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdGlvbiBDbGlwIEFuaW1hdGlvbiBEZWx0YSBUaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uVGltZSArPSAoZGVsdGFUaW1lICogZnJhbWVSYXRpbyAqIE1hdGguYWJzKGxheWVyU3RhdGUuc3BlZWQpICogTWF0aC5hYnModGhpcy5zcGVlZFJhdGlvKSAqIEJBQllMT04uQW5pbWF0aW9uU3RhdGUuU1BFRUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25UaW1lID4gQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FKSBsYXllci5hbmltYXRpb25UaW1lID0gQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdGlvbiBDbGlwIEFuaW1hdGlvbiBOb3JtYWxpemVkIFRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAobGF5ZXIuYW5pbWF0aW9uVGltZSAvIEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSk7ICAgICAgICAvLyBOb3RlOiBOb3JtYWxpemUgTGF5ZXIgRnJhbWUgVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlVGltZTpudW1iZXIgPSAobGF5ZXIuYW5pbWF0aW9uTm9ybWFsID4gMC45OSkgPyAxIDogbGF5ZXIuYW5pbWF0aW9uTm9ybWFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFRpbWU6bnVtYmVyID0gTWF0aC5yb3VuZCh2YWxpZGF0ZVRpbWUgKiAxMDApIC8gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllclN0YXRlLnNwZWVkIDwgMCkgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsID0gKDEgLSBsYXllci5hbmltYXRpb25Ob3JtYWwpOyAgICAgIC8vIE5vdGU6IFJldmVyc2UgTm9ybWFsaXplZCBGcmFtZSBUaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uRnJhbWVUaW1lOm51bWJlciA9IChhbmltYXRpb25UcmFjay50byAqIGxheWVyLmFuaW1hdGlvbk5vcm1hbCk7ICAgICAgLy8gTm90ZTogRGVub3JtYWxpemUgQW5pbWF0aW9uIEZyYW1lIFRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgYWRkaXRpdmVyZWZlcmVuY2Vwb3NlY2xpcDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBhZGRpdGl2ZXJlZmVyZW5jZXBvc2V0aW1lOm51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgaGFzYWRkaXRpdmVyZWZlcmVuY2Vwb3NlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgc3RhcnR0aW1lOm51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgc3RvcHRpbWU6bnVtYmVyID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBtaXJyb3I6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZXZlbDpudW1iZXIgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHhzcGVlZDpudW1iZXIgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHpzcGVlZDpudW1iZXIgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3B0aW1lOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBsb29wYmxlbmQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGN5Y2xlb2Zmc2V0Om51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBoZWlnaHRmcm9tZmVldDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9ub2Zmc2V0eTpudW1iZXIgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFsb3JpZW50YXRpb246Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFscG9zaXRpb255OmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGtlZXBvcmlnaW5hbHBvc2l0aW9ueHo6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZG9yaWVudGF0aW9uOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb29wYmxlbmRwb3NpdGlvbnk6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZHBvc2l0aW9ueHo6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWdyb3VwOmFueSA9IGFuaW1hdGlvblRyYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAubWV0YWRhdGEgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c3BlZWQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZC54ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZC54IDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpzcGVlZCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuYXZlcmFnZXNwZWVkLnogIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuYXZlcmFnZXNwZWVkLnogOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxldmVsICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxldmVsIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3B0aW1lID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wdGltZSAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wdGltZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IGxvb3BibGVuZCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZCA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IGN5Y2xlb2Zmc2V0ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5jeWNsZW9mZnNldCAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5jeWNsZW9mZnNldCA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogaGVpZ2h0ZnJvbWZlZXQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmhlaWdodGZyb21mZWV0ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmhlaWdodGZyb21mZWV0IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbm9mZnNldHkgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLm9yaWVudGF0aW9ub2Zmc2V0eSAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5vcmllbnRhdGlvbm9mZnNldHkgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IGtlZXBvcmlnaW5hbG9yaWVudGF0aW9uID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxvcmllbnRhdGlvbiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxvcmllbnRhdGlvbiA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDoga2VlcG9yaWdpbmFscG9zaXRpb255ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxwb3NpdGlvbnkgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb255IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBrZWVwb3JpZ2luYWxwb3NpdGlvbnh6ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxwb3NpdGlvbnh6ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmtlZXBvcmlnaW5hbHBvc2l0aW9ueHogOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcGJsZW5kb3JpZW50YXRpb24gPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZG9yaWVudGF0aW9uICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZG9yaWVudGF0aW9uIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BibGVuZHBvc2l0aW9ueSA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kcG9zaXRpb255ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZHBvc2l0aW9ueSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wYmxlbmRwb3NpdGlvbnh6ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRwb3NpdGlvbnh6ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZHBvc2l0aW9ueHogOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuaXR5IEludmVydHMgUm9vdCBNb3Rpb24gQW5pbWF0aW9uIE9mZnNldHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbm9mZnNldHkgPSBCQUJZTE9OLlRvb2xzLlRvUmFkaWFucyhvcmllbnRhdGlvbm9mZnNldHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBvcmllbnRhdGlvbm9mZnNldHkgKj0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNwZWVkID0gTWF0aC5hYnMoeHNwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6c3BlZWQgPSBNYXRoLmFicyh6c3BlZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsICo9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25UaW1lID49IEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25GaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9vcHRpbWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25Mb29wT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25Mb29wT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMobGF5ZXIuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvbkVuZEZyYW1lID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkVuZEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkFuaW1hdGlvbkVuZE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkVuZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGxheWVyLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvbkZpcnN0UnVuID09PSB0cnVlIHx8IGxvb3B0aW1lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbnBsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UcmFjay50YXJnZXRlZEFuaW1hdGlvbnMuZm9yRWFjaCgodGFyZ2V0ZWRBbmltOkJBQllMT04uVGFyZ2V0ZWRBbmltYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRlZEFuaW0udGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpcFRhcmdldDpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSB0YXJnZXRlZEFuaW0udGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5pbmRleCA9PT0gMCB8fCBsYXllci5hdmF0YXJNYXNrID09IG51bGwgfHwgdGhpcy5maWx0ZXJUYXJnZXRBdmF0YXJNYXNrKGxheWVyLCBjbGlwVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRSb290Qm9uZTpib29sZWFuID0gKGNsaXBUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgY2xpcFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290Ym9uZSAhPSBudWxsKSA/IGNsaXBUYXJnZXQubWV0YWRhdGEudW5pdHkucm9vdGJvbmUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RCb25lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RQb3M6bnVtYmVyW10gPSAoY2xpcFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGNsaXBUYXJnZXQubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Rwb3MgIT0gbnVsbCkgPyBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Rwb3MgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290UG9zICE9IG51bGwpIHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uID0gQkFCWUxPTi5WZWN0b3IzLkZyb21BcnJheSh0YXJnZXRSb290UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJBIC0gSW5pdCBSb290IEJvbmUgUG9zaXRpb246IFwiICsgY2xpcFRhcmdldC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RSb3Q6bnVtYmVyW10gPSAoY2xpcFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGNsaXBUYXJnZXQubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Ryb3QgIT0gbnVsbCkgPyBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Ryb3QgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Um90ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVhdDpCQUJZTE9OLlF1YXRlcm5pb24gPSBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUFycmF5KHRhcmdldFJvb3RSb3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9IHF1YXQudG9FdWxlckFuZ2xlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJBIC0gSW5pdCBSb290IEJvbmUgUm90YXRpb246IFwiICsgY2xpcFRhcmdldC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLm1peGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBUYXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyID0gY2xpcFRhcmdldC5tZXRhZGF0YS5taXhlcltsYXllci5pbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpcFRhcmdldE1peGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ZWRBbmltLmFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSA9PT0gXCJwb3NpdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFBvc2l0aW9uID0gQkFCWUxPTi5VdGlsaXRpZXMuU2FtcGxlQW5pbWF0aW9uVmVjdG9yMyh0YXJnZXRlZEFuaW0uYW5pbWF0aW9uLCBhbmltYXRpb25GcmFtZVRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgUm9vdCBNb3Rpb24gKFBvc2l0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Um9vdEJvbmUgPT09IHRydWUgJiYgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25Ib2xkZXIuY29weUZyb20odGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVXZWlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lSG9sZGVyLnNldCgwLDAsMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hcHBseVJvb3RNb3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9vcGJsZW5kcG9zaXRpb255ID09PSB0cnVlICYmIGxvb3BibGVuZHBvc2l0aW9ueHogPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWVogSW50byBQb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uSG9sZGVyLnNldCh0aGlzLl90YXJnZXRQb3NpdGlvbi54LCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb29wYmxlbmRwb3NpdGlvbnkgPT09IGZhbHNlICYmIGxvb3BibGVuZHBvc2l0aW9ueHogPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIFVzZSBYWVogQXMgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVIb2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsICh0aGlzLl90YXJnZXRQb3NpdGlvbi55ICsgbGV2ZWwpLCB0aGlzLl90YXJnZXRQb3NpdGlvbi56KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvb3BibGVuZHBvc2l0aW9ueSA9PT0gdHJ1ZSAmJiBsb29wYmxlbmRwb3NpdGlvbnh6ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFkgSW50byBQb3NlIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uLnopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZVdlaWdodCA9IHRydWU7ICAgICAgICAvLyBVc2UgWFogQXMgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVIb2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsIDAsIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgLSA/Pz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvb3BibGVuZHBvc2l0aW9ueHogPT09IHRydWUgJiYgbG9vcGJsZW5kcG9zaXRpb255ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFhaIEludG8gUG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIFVzZSBZIEFzIFJvb3QgTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lSG9sZGVyLnNldCgwLCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgMCk7IC8vIE1BWUJFOiBVc2UgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueHogLSA/Pz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uV2VpZ2h0ID0gdHJ1ZTsgICAgICAgICAgICAvLyBCYWtlIFhZWiBPcmlnaW5hbCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBQb3NpdGlvbiBIb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wb3NpdGlvbldlaWdodCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlwVGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRWZWN0b3IzVmFsdWUoY2xpcFRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyLCB0aGlzLl9wb3NpdGlvbkhvbGRlciwgMS4wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgUm9vdCBCb25lIEhvbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5yb290UG9zaXRpb24gPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnJvb3RQb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKGNsaXBUYXJnZXRNaXhlci5yb290UG9zaXRpb24sIHRoaXMuX3Jvb3RCb25lSG9sZGVyLCAxLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBOb3JtYWwgUG9zZSBQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciA9PSBudWxsKSBjbGlwVGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKGNsaXBUYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciwgdGhpcy5fdGFyZ2V0UG9zaXRpb24sIDEuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldGVkQW5pbS5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgPT09IFwicm90YXRpb25RdWF0ZXJuaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0Um90YXRpb24gPSBCQUJZTE9OLlV0aWxpdGllcy5TYW1wbGVBbmltYXRpb25RdWF0ZXJuaW9uKHRhcmdldGVkQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBSb290IE1vdGlvbiAoUm90YXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Qm9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb25XZWlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uSG9sZGVyLnNldCgwLDAsMCwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RRdWF0V2VpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290UXVhdEhvbGRlci5zZXQoMCwwLDAsMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gT1BUSU1JWkUgVE8gRVVMRVIgQU5HTEVTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBldWxlckFuZ2xlOkJBQllMT04uVmVjdG9yMyA9IHRoaXMuX3RhcmdldFJvdGF0aW9uLnRvRXVsZXJBbmdsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uQW5nbGVZOm51bWJlciA9IGV1bGVyQW5nbGUueTsgLy8oa2VlcG9yaWdpbmFsb3JpZW50YXRpb24gPT09IHRydWUpID8gZXVsZXJBbmdsZS55IDogdGhpcy5fYm9keU9yaWVudGF0aW9uQW5nbGVZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IFJvb3QgTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwbHlSb290TW90aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3BibGVuZG9yaWVudGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIEJha2UgWFlaIEludG8gUG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoZXVsZXJBbmdsZS54LCAob3JpZW50YXRpb25BbmdsZVkgKyBvcmllbnRhdGlvbm9mZnNldHkpLCBldWxlckFuZ2xlLnosIHRoaXMuX3JvdGF0aW9uSG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFhaIEludG8gUG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoZXVsZXJBbmdsZS54LCB0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbi55LCBldWxlckFuZ2xlLnosIHRoaXMuX3JvdGF0aW9uSG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFkgQXMgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5RdWF0ZXJuaW9uLkZyb21FdWxlckFuZ2xlc1RvUmVmKDAsIChvcmllbnRhdGlvbkFuZ2xlWSArIG9yaWVudGF0aW9ub2Zmc2V0eSksIDAsIHRoaXMuX3Jvb3RRdWF0SG9sZGVyKTsgLy8gTUFZQkU6IFVzZSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi54eiAtID8/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgICAgIC8vIEJha2UgWFlaIEludG8gUG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZihldWxlckFuZ2xlLngsIChvcmllbnRhdGlvbkFuZ2xlWSArIG9yaWVudGF0aW9ub2Zmc2V0eSksIGV1bGVyQW5nbGUueiwgdGhpcy5fcm90YXRpb25Ib2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBSb3RhdGlvbiBIb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb3RhdGlvbldlaWdodCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlwVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLDAsMCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFF1YXRlcm5pb25WYWx1ZShjbGlwVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIsIHRoaXMuX3JvdGF0aW9uSG9sZGVyLCAxLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBSb290IEJvbmUgUm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb290UXVhdFdlaWdodCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlwVGFyZ2V0TWl4ZXIucm9vdFJvdGF0aW9uID09IG51bGwpIGNsaXBUYXJnZXRNaXhlci5yb290Um90YXRpb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kUXVhdGVybmlvblZhbHVlKGNsaXBUYXJnZXRNaXhlci5yb290Um90YXRpb24sIHRoaXMuX3Jvb3RRdWF0SG9sZGVyLCAxLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBOb3JtYWwgUG9zZSBSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9PSBudWxsKSBjbGlwVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRRdWF0ZXJuaW9uVmFsdWUoY2xpcFRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyLCB0aGlzLl90YXJnZXRSb3RhdGlvbiwgMS4wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ZWRBbmltLmFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSA9PT0gXCJzY2FsaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0U2NhbGluZyA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvblZlY3RvcjModGFyZ2V0ZWRBbmltLmFuaW1hdGlvbiwgYW5pbWF0aW9uRnJhbWVUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyID09IG51bGwpIGNsaXBUYXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyID0gbmV3IEJBQllMT04uVmVjdG9yMygxLDEsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKGNsaXBUYXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyLCB0aGlzLl90YXJnZXRTY2FsaW5nLCAxLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ZWRBbmltLnRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uTW9ycGhUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3JwaFRhcmdldDphbnkgPSB0YXJnZXRlZEFuaW0udGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb3JwaFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIG1vcnBoVGFyZ2V0Lm1ldGFkYXRhLm1peGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9ycGhUYXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyID0gbW9ycGhUYXJnZXQubWV0YWRhdGEubWl4ZXJbbGF5ZXIuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ZWRBbmltLmFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSA9PT0gXCJpbmZsdWVuY2VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxvYXRWYWx1ZSA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvbkZsb2F0KHRhcmdldGVkQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9ycGhUYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIgPT0gbnVsbCkgbW9ycGhUYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhUYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIgPSBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZEZsb2F0VmFsdWUobW9ycGhUYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIsIGZsb2F0VmFsdWUsIDEuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBMYXllciBBbmltYXRpb24gQ3VydmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS50Y3VydmVzICE9IG51bGwgJiYgbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLnRjdXJ2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGN1cnZlcy5mb3JFYWNoKChhbmltYXRpb246QkFCWUxPTi5BbmltYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24udGFyZ2V0UHJvcGVydHkgIT0gbnVsbCAmJiBhbmltYXRpb24udGFyZ2V0UHJvcGVydHkgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzYW1wbGU6bnVtYmVyID0gQkFCWUxPTi5VdGlsaXRpZXMuU2FtcGxlQW5pbWF0aW9uRmxvYXQoYW5pbWF0aW9uLCBsYXllci5hbmltYXRpb25Ob3JtYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxvYXQoYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5LCBzYW1wbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgTGF5ZXIgQW5pbWF0aW9uIEV2ZW50cyAoVE9ETyAtIFBhc3MgTGF5ZXIgSW5kZXggUHJvcGVydGllcyBUbyBPYnNlcnZlcnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMgIT0gbnVsbCAmJiBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUuZXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmV2ZW50cy5mb3JFYWNoKChhbmltYXRvckV2ZW50OkJBQllMT04uSUFuaW1hdG9yRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRvckV2ZW50LnRpbWUgPT09IGZvcm1hdHRlZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltRXZlbnRLZXk6c3RyaW5nID0gYW5pbWF0b3JFdmVudC5mdW5jdGlvbiArIFwiX1wiICsgYW5pbWF0b3JFdmVudC50aW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID09IG51bGwpIGxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHNbYW5pbUV2ZW50S2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzW2FuaW1FdmVudEtleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkJsZW5kIFRyZWUgQW5pbWF0aW9uIEV2ZW50OiBcIiArIGFuaW1hdG9yRXZlbnQudGltZSArIFwiID4+IFwiICsgYW5pbWF0b3JFdmVudC5jbGlwICsgXCIgPj4gXCIgKyBhbmltYXRvckV2ZW50LmZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25FdmVudE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25FdmVudE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGFuaW1hdG9yRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RlcCBNb3Rpb24gQ2xpcCBBbmltYXRpb24gVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25Mb29wRnJhbWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbk5vcm1hbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIj4+PiBObyBNb3Rpb24gQ2xpcCBBbmltYXRpb24gVHJhY2sgRm91bmQgRm9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9ucGxheWluZyA9IHRydWU7IC8vIE5vdGU6IEJsZW5kIFRyZWUgQXJlIEFsd2F5cyBQbGF5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9ibGVuZE1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxlbmRXZWlnaHRzLnNlY29uZGFyeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZWRXZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaW1hcnlCbGVuZFRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlID0gbGF5ZXJTdGF0ZS5ibGVuZHRyZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlVHJlZUJyYW5jaGVzKGxheWVyLCBwcmltYXJ5QmxlbmRUcmVlLCAxLjAsIHNjYWxlZFdlaWdodExpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRpbzpudW1iZXIgPSB0aGlzLmNvbXB1dGVXZWlnaHRlZEZyYW1lUmF0aW8oc2NhbGVkV2VpZ2h0TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsZW5kIFRyZWUgQW5pbWF0aW9uIERlbHRhIFRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uVGltZSArPSAoZGVsdGFUaW1lICogZnJhbWVSYXRpbyAqIE1hdGguYWJzKGxheWVyU3RhdGUuc3BlZWQpICogTWF0aC5hYnModGhpcy5zcGVlZFJhdGlvKSAqIEJBQllMT04uQW5pbWF0aW9uU3RhdGUuU1BFRUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblRpbWUgPiBCQUJZTE9OLkFuaW1hdGlvblN0YXRlLlRJTUUpIGxheWVyLmFuaW1hdGlvblRpbWUgPSBCQUJZTE9OLkFuaW1hdGlvblN0YXRlLlRJTUU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsZW5kIFRyZWUgQW5pbWF0aW9uIE5vcm1hbGl6ZWQgVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAobGF5ZXIuYW5pbWF0aW9uVGltZSAvIEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSk7ICAgICAgICAvLyBOb3RlOiBOb3JtYWxpemUgTGF5ZXIgRnJhbWUgVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGVUaW1lOm51bWJlciA9IChsYXllci5hbmltYXRpb25Ob3JtYWwgPiAwLjk5KSA/IDEgOiBsYXllci5hbmltYXRpb25Ob3JtYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRUaW1lOm51bWJlciA9IE1hdGgucm91bmQodmFsaWRhdGVUaW1lICogMTAwKSAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllclN0YXRlLnNwZWVkIDwgMCkgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsID0gKDEgLSBsYXllci5hbmltYXRpb25Ob3JtYWwpOyAgICAgIC8vIE5vdGU6IFJldmVyc2UgTm9ybWFsaXplZCBGcmFtZSBUaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZGluZ05vcm1hbFRpbWU6bnVtYmVyID0gbGF5ZXIuYW5pbWF0aW9uTm9ybWFsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBEZW5vcm1hbGl6ZSBBbmltYXRpb24gRnJhbWUgVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uVGltZSA+PSBCQUJZTE9OLkFuaW1hdGlvblN0YXRlLlRJTUUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25GaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BGcmFtZSA9IHRydWU7IC8vIE5vdGU6IE5vIExvb3AgT3IgRW5kIEV2ZW50cyBGb3IgQmxlbmQgVHJlZXMgLSA/Pz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFzdGVyQW5pbWF0aW9uVHJhY2s6QkFCWUxPTi5BbmltYXRpb25Hcm91cCA9IChzY2FsZWRXZWlnaHRMaXN0ICE9IG51bGwgJiYgc2NhbGVkV2VpZ2h0TGlzdC5sZW5ndGggPiAwICYmIHNjYWxlZFdlaWdodExpc3RbMF0udHJhY2sgIT0gbnVsbCkgPyBzY2FsZWRXZWlnaHRMaXN0WzBdLnRyYWNrIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXN0ZXJBbmltYXRpb25UcmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q291bnQ6bnVtYmVyID0gbWFzdGVyQW5pbWF0aW9uVHJhY2sudGFyZ2V0ZWRBbmltYXRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0YXJnZXRJbmRleDpudW1iZXIgPSAwOyB0YXJnZXRJbmRleCA8IHRhcmdldENvdW50OyB0YXJnZXRJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hc3RlckFuaW1pbWF0aW9uOkJBQllMT04uVGFyZ2V0ZWRBbmltYXRpb24gPSBtYXN0ZXJBbmltYXRpb25UcmFjay50YXJnZXRlZEFuaW1hdGlvbnNbdGFyZ2V0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzdGVyQW5pbWltYXRpb24udGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZFRhcmdldDpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBtYXN0ZXJBbmltaW1hdGlvbi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuaW5kZXggPT09IDAgfHwgbGF5ZXIuYXZhdGFyTWFzayA9PSBudWxsIHx8IHRoaXMuZmlsdGVyVGFyZ2V0QXZhdGFyTWFzayhsYXllciwgYmxlbmRUYXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Um9vdEJvbmU6Ym9vbGVhbiA9IChibGVuZFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgYmxlbmRUYXJnZXQubWV0YWRhdGEudW5pdHkucm9vdGJvbmUgIT0gbnVsbCkgPyBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290Ym9uZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Qm9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Um9vdFBvczpudW1iZXJbXSA9IChibGVuZFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgYmxlbmRUYXJnZXQubWV0YWRhdGEudW5pdHkucm9vdHBvcyAhPSBudWxsKSA/IGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Rwb3MgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RQb3MgIT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPSBCQUJZTE9OLlZlY3RvcjMuRnJvbUFycmF5KHRhcmdldFJvb3RQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uID09IG51bGwpIHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJCIC0gSW5pdCBSb290IEJvbmUgUG9zaXRpb246IFwiICsgYmxlbmRUYXJnZXQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxSb290Qm9uZVJvdGF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RSb3Q6bnVtYmVyW10gPSAoYmxlbmRUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Ryb3QgIT0gbnVsbCkgPyBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290cm90IDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Um90ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWF0OkJBQllMT04uUXVhdGVybmlvbiA9IEJBQllMT04uUXVhdGVybmlvbi5Gcm9tQXJyYXkodGFyZ2V0Um9vdFJvdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPSBxdWF0LnRvRXVsZXJBbmdsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9PSBudWxsKSB0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiQiAtIEluaXQgUm9vdCBCb25lIFJvdGF0aW9uOiBcIiArIGJsZW5kVGFyZ2V0Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibGVuZFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLm1peGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbHRhcmdldGJsZW5kaW5nID0gdHJ1ZTsgLy8gTm90ZTogUmVzZXQgRmlyc3QgVGFyZ2V0IEJsZW5kaW5nIEJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZFRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBibGVuZFRhcmdldC5tZXRhZGF0YS5taXhlcltsYXllci5pbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmxlbmRhYmxlVGFyZ2V0cyhkZWx0YVRpbWUsIGxheWVyLCBwcmltYXJ5QmxlbmRUcmVlLCBtYXN0ZXJBbmltaW1hdGlvbiwgdGFyZ2V0SW5kZXgsIGJsZW5kVGFyZ2V0TWl4ZXIsIGJsZW5kaW5nTm9ybWFsVGltZSwgdGFyZ2V0Um9vdEJvbmUsIGJsZW5kVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIj4+PiBObyBCbGVuZCBUcmVlIE1hc3RlciBBbmltYXRpb24gVHJhY2sgRm91bmQgRm9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBMYXllciBBbmltYXRpb24gQ3VydmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGN1cnZlcyAhPSBudWxsICYmIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS50Y3VydmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGN1cnZlcy5mb3JFYWNoKChhbmltYXRpb246QkFCWUxPTi5BbmltYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSAhPSBudWxsICYmIGFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FtcGxlOm51bWJlciA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvbkZsb2F0KGFuaW1hdGlvbiwgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxvYXQoYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5LCBzYW1wbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIExheWVyIEFuaW1hdGlvbiBFdmVudHMgKFRPRE8gLSBQYXNzIExheWVyIEluZGV4IEFuZCBDbGlwIEJsZW5kZWQgV2VpZ2h0IFByb3BlcnRpZXMgVG8gT2JzZXJ2ZXJzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmV2ZW50cyAhPSBudWxsICYmIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMuZm9yRWFjaCgoYW5pbWF0b3JFdmVudDpCQUJZTE9OLklBbmltYXRvckV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRvckV2ZW50LnRpbWUgPT09IGZvcm1hdHRlZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1FdmVudEtleTpzdHJpbmcgPSBhbmltYXRvckV2ZW50LmZ1bmN0aW9uICsgXCJfXCIgKyBhbmltYXRvckV2ZW50LnRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uTG9vcEV2ZW50cyA9PSBudWxsKSBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHNbYW5pbUV2ZW50S2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHNbYW5pbUV2ZW50S2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJCbGVuZCBUcmVlIEFuaW1hdGlvbiBFdmVudDogXCIgKyBhbmltYXRvckV2ZW50LnRpbWUgKyBcIiA+PiBcIiArIGFuaW1hdG9yRXZlbnQuY2xpcCArIFwiID4+IFwiICsgYW5pbWF0b3JFdmVudC5mdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25FdmVudE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkV2ZW50T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoYW5pbWF0b3JFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0ZXAgQmxlbmQgVHJlZSBBbmltYXRpb24gVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uTG9vcEZyYW1lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRnJhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maW5hbGl6ZUFuaW1hdGlvblRhcmdldHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByaXZhdGUgX2JsZW5kTWVzc2FnZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwcml2YXRlIHVwZGF0ZUJsZW5kYWJsZVRhcmdldHMoZGVsdGFUaW1lOm51bWJlciwgbGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBtYXN0ZXJBbmltYXRpb246QkFCWUxPTi5UYXJnZXRlZEFuaW1hdGlvbiwgdGFyZ2V0SW5kZXg6bnVtYmVyLCB0YXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyLCBub3JtYWxpemVkRnJhbWVUaW1lOm51bWJlciwgdGFyZ2V0Um9vdEJvbmU6Ym9vbGVhbiwgYmxlbmRUYXJnZXQ6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlciAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4gIT0gbnVsbCAmJiB0cmVlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdHJlZS5jaGlsZHJlbi5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQgPSB0cmVlLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLndlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuQ2xpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50cmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgYWRkaXRpdmVyZWZlcmVuY2Vwb3NlY2xpcDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgYWRkaXRpdmVyZWZlcmVuY2Vwb3NldGltZTpudW1iZXIgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBoYXNhZGRpdGl2ZXJlZmVyZW5jZXBvc2U6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgc3RhcnR0aW1lOm51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHN0b3B0aW1lOm51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IG1pcnJvcjpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbG9vcHRpbWU6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGV2ZWw6bnVtYmVyID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeHNwZWVkOm51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHpzcGVlZDpudW1iZXIgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGxvb3BibGVuZDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGN5Y2xlb2Zmc2V0Om51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQgaGVpZ2h0ZnJvbWZlZXQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZW50YXRpb25vZmZzZXR5Om51bWJlciA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFsb3JpZW50YXRpb246Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGtlZXBvcmlnaW5hbHBvc2l0aW9ueTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFscG9zaXRpb254ejpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZG9yaWVudGF0aW9uOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9vcGJsZW5kcG9zaXRpb255OmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9vcGJsZW5kcG9zaXRpb254ejpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFncm91cDphbnkgPSBjaGlsZC50cmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFncm91cC5tZXRhZGF0YSAhPSBudWxsICYmIGFncm91cC5tZXRhZGF0YS51bml0eSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNwZWVkID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5hdmVyYWdlc3BlZWQueCAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5hdmVyYWdlc3BlZWQueCA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenNwZWVkID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5hdmVyYWdlc3BlZWQueiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5hdmVyYWdlc3BlZWQueiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubGV2ZWwgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubGV2ZWwgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBsb29wYmxlbmQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZCAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmQgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogY3ljbGVvZmZzZXQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmN5Y2xlb2Zmc2V0ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmN5Y2xlb2Zmc2V0IDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogaGVpZ2h0ZnJvbWZlZXQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmhlaWdodGZyb21mZWV0ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmhlaWdodGZyb21mZWV0IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25vZmZzZXR5ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5vcmllbnRhdGlvbm9mZnNldHkgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mub3JpZW50YXRpb25vZmZzZXR5IDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDoga2VlcG9yaWdpbmFsb3JpZW50YXRpb24gPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmtlZXBvcmlnaW5hbG9yaWVudGF0aW9uICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmtlZXBvcmlnaW5hbG9yaWVudGF0aW9uIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDoga2VlcG9yaWdpbmFscG9zaXRpb255ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxwb3NpdGlvbnkgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb255IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDoga2VlcG9yaWdpbmFscG9zaXRpb254eiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb254eiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxwb3NpdGlvbnh6IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wYmxlbmRvcmllbnRhdGlvbiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kb3JpZW50YXRpb24gIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kb3JpZW50YXRpb24gOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BibGVuZHBvc2l0aW9ueSA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kcG9zaXRpb255ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZHBvc2l0aW9ueSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcGJsZW5kcG9zaXRpb254eiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kcG9zaXRpb254eiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRwb3NpdGlvbnh6IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5pdHkgSW52ZXJ0cyBSb290IE1vdGlvbiBBbmltYXRpb24gT2Zmc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25vZmZzZXR5ID0gQkFCWUxPTi5Ub29scy5Ub1JhZGlhbnMob3JpZW50YXRpb25vZmZzZXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IG9yaWVudGF0aW9ub2Zmc2V0eSAqPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNwZWVkID0gTWF0aC5hYnMoeHNwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenNwZWVkID0gTWF0aC5hYnMoenNwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgKj0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9ibGVuZE1lc3NhZ2UgKz0gKFwiID4+PiBcIiArIGNoaWxkLm1vdGlvbiArIFwiOiBcIiArIGNoaWxkLndlaWdodC50b0ZpeGVkKDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gR2V0IGJsZW5kYWJsZSBhbmltYXRpb24gZnJvbSB0YXJnZXQgbWFwIC0gPz8/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kYWJsZUFuaW06QkFCWUxPTi5UYXJnZXRlZEFuaW1hdGlvbiA9IGNoaWxkLnRyYWNrLnRhcmdldGVkQW5pbWF0aW9uc1t0YXJnZXRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kYWJsZVdlaWdodDpudW1iZXIgPSAodGhpcy5faW5pdGlhbHRhcmdldGJsZW5kaW5nID09PSB0cnVlKSA/IDEuMCA6IHBhcnNlRmxvYXQoY2hpbGQud2VpZ2h0LnRvRml4ZWQoMikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsdGFyZ2V0YmxlbmRpbmcgPSBmYWxzZTsgLy8gTm90ZTogQ2xlYXIgRmlyc3QgVGFyZ2V0IEJsZW5kaW5nIEJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxlbmRhYmxlQW5pbS50YXJnZXQgPT09IG1hc3RlckFuaW1hdGlvbi50YXJnZXQgJiYgYmxlbmRhYmxlQW5pbS5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgPT09IG1hc3RlckFuaW1hdGlvbi5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWRqdXN0ZWRGcmFtZVRpbWU6bnVtYmVyID0gbm9ybWFsaXplZEZyYW1lVGltZTsgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBBZGp1c3QgTm9ybWFsaXplZCBGcmFtZSBUaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudGltZXNjYWxlIDwgMCkgYWRqdXN0ZWRGcmFtZVRpbWUgPSAoMSAtIGFkanVzdGVkRnJhbWVUaW1lKTsgICAvLyBOb3RlOiBSZXZlcnNlIE5vcm1hbGl6ZWQgRnJhbWUgVGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uRnJhbWVUaW1lOm51bWJlciA9IChjaGlsZC50cmFjay50byAqIGFkanVzdGVkRnJhbWVUaW1lKTsgLy8gTm90ZTogRGVub3JtYWxpemUgQW5pbWF0aW9uIEZyYW1lIFRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc3QgYW5pbWF0aW9uRnJhbWVUaW1lOm51bWJlciA9IChNYXRoLnJvdW5kKChjaGlsZC50cmFjay50byAqIGFkanVzdGVkRnJhbWVUaW1lKSAqIDEwMCkgLyAxMDApOyAgLy8gTm90ZTogRGVub3JtYWxpemUgQW5pbWF0aW9uIEZyYW1lIFRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXN0ZXJBbmltYXRpb24uYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5ID09PSBcInBvc2l0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRQb3NpdGlvbiA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvblZlY3RvcjMoYmxlbmRhYmxlQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb290IFRyYW5zZm9ybSBQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RCb25lID09PSB0cnVlICYmIHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5jb3B5RnJvbSh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lSG9sZGVyLnNldCgwLDAsMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IFJvb3QgTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFwcGx5Um9vdE1vdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3BibGVuZHBvc2l0aW9ueSA9PT0gdHJ1ZSAmJiBsb29wYmxlbmRwb3NpdGlvbnh6ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWVogSW50byBQb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25Ib2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsICh0aGlzLl90YXJnZXRQb3NpdGlvbi55ICsgbGV2ZWwpLCB0aGlzLl90YXJnZXRQb3NpdGlvbi56KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9vcGJsZW5kcG9zaXRpb255ID09PSBmYWxzZSAmJiBsb29wYmxlbmRwb3NpdGlvbnh6ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIFVzZSBYWVogQXMgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZUhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb29wYmxlbmRwb3NpdGlvbnkgPT09IHRydWUgJiYgbG9vcGJsZW5kcG9zaXRpb254eiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFkgSW50byBQb3NlIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uSG9sZGVyLnNldCh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbi54LCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFhaIEFzIFJvb3QgTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVIb2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsIDAsIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgLSA/Pz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9vcGJsZW5kcG9zaXRpb254eiA9PT0gdHJ1ZSAmJiBsb29wYmxlbmRwb3NpdGlvbnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWiBJbnRvIFBvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFkgQXMgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZUhvbGRlci5zZXQoMCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIDApOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnh6IC0gPz8/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFhZWiBPcmlnaW5hbCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uSG9sZGVyLnNldCh0aGlzLl90YXJnZXRQb3NpdGlvbi54LCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBQb3NpdGlvbiBIb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Bvc2l0aW9uV2VpZ2h0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgPT0gbnVsbCkgdGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKHRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyLCB0aGlzLl9wb3NpdGlvbkhvbGRlciwgYmxlbmRhYmxlV2VpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWtlIFJvb3QgQm9uZSBIb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWl4ZXIucm9vdFBvc2l0aW9uID09IG51bGwpIHRhcmdldE1peGVyLnJvb3RQb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRWZWN0b3IzVmFsdWUodGFyZ2V0TWl4ZXIucm9vdFBvc2l0aW9uLCB0aGlzLl9yb290Qm9uZUhvbGRlciwgYmxlbmRhYmxlV2VpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgTm9ybWFsIFBvc2UgUG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyID09IG51bGwpIHRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKHRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyLCB0aGlzLl90YXJnZXRQb3NpdGlvbiwgYmxlbmRhYmxlV2VpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hc3RlckFuaW1hdGlvbi5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgPT09IFwicm90YXRpb25RdWF0ZXJuaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRSb3RhdGlvbiA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvblF1YXRlcm5pb24oYmxlbmRhYmxlQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb290IFRyYW5zZm9ybSBSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RCb25lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uSG9sZGVyLnNldCgwLDAsMCwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRXZWlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRIb2xkZXIuc2V0KDAsMCwwLDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBldWxlckFuZ2xlOkJBQllMT04uVmVjdG9yMyA9IHRoaXMuX3RhcmdldFJvdGF0aW9uLnRvRXVsZXJBbmdsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb25BbmdsZVk6bnVtYmVyID0gZXVsZXJBbmdsZS55OyAvLyhrZWVwb3JpZ2luYWxvcmllbnRhdGlvbiA9PT0gdHJ1ZSkgPyBldWxlckFuZ2xlLnkgOiB0aGlzLl9ib2R5T3JpZW50YXRpb25BbmdsZVk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IFJvb3QgTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFwcGx5Um9vdE1vdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3BibGVuZG9yaWVudGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWVogSW50byBQb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5RdWF0ZXJuaW9uLkZyb21FdWxlckFuZ2xlc1RvUmVmKGV1bGVyQW5nbGUueCwgKG9yaWVudGF0aW9uQW5nbGVZICsgb3JpZW50YXRpb25vZmZzZXR5KSwgZXVsZXJBbmdsZS56LCB0aGlzLl9yb3RhdGlvbkhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIEJha2UgWFogSW50byBQb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5RdWF0ZXJuaW9uLkZyb21FdWxlckFuZ2xlc1RvUmVmKGV1bGVyQW5nbGUueCwgdGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24ueSwgZXVsZXJBbmdsZS56LCB0aGlzLl9yb3RhdGlvbkhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFkgQXMgUm9vdCBNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoMCwgKG9yaWVudGF0aW9uQW5nbGVZICsgb3JpZW50YXRpb25vZmZzZXR5KSwgMCwgdGhpcy5fcm9vdFF1YXRIb2xkZXIpOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uLnh6IC0gPz8/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAgICAgLy8gQmFrZSBYWVogSW50byBQb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoZXVsZXJBbmdsZS54LCAob3JpZW50YXRpb25BbmdsZVkgKyBvcmllbnRhdGlvbm9mZnNldHkpLCBldWxlckFuZ2xlLnosIHRoaXMuX3JvdGF0aW9uSG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWtlIFJvdGF0aW9uIEhvbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcm90YXRpb25XZWlnaHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9PSBudWxsKSB0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFF1YXRlcm5pb25WYWx1ZSh0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciwgdGhpcy5fcm90YXRpb25Ib2xkZXIsIGJsZW5kYWJsZVdlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBSb290IEJvbmUgUm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jvb3RRdWF0V2VpZ2h0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWl4ZXIucm9vdFJvdGF0aW9uID09IG51bGwpIHRhcmdldE1peGVyLnJvb3RSb3RhdGlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFF1YXRlcm5pb25WYWx1ZSh0YXJnZXRNaXhlci5yb290Um90YXRpb24sIHRoaXMuX3Jvb3RRdWF0SG9sZGVyLCBibGVuZGFibGVXZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBOb3JtYWwgUG9zZSBSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPT0gbnVsbCkgdGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFF1YXRlcm5pb25WYWx1ZSh0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciwgdGhpcy5fdGFyZ2V0Um90YXRpb24sIGJsZW5kYWJsZVdlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXN0ZXJBbmltYXRpb24uYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5ID09PSBcInNjYWxpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFNjYWxpbmcgPSBCQUJZTE9OLlV0aWxpdGllcy5TYW1wbGVBbmltYXRpb25WZWN0b3IzKGJsZW5kYWJsZUFuaW0uYW5pbWF0aW9uLCBhbmltYXRpb25GcmFtZVRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyID09IG51bGwpIHRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDEsMSwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFZlY3RvcjNWYWx1ZSh0YXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyLCB0aGlzLl90YXJnZXRTY2FsaW5nLCBibGVuZGFibGVXZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKHRyZWUubmFtZSArIFwiIC0gXCIgKyBjaGlsZC50cmFjay5uYW1lICArIFwiIGJsZW5kIHRyZWUgbWlzbWF0Y2ggKFwiICsgdGFyZ2V0SW5kZXggKyBcIik6IFwiICsgbWFzdGVyQW5pbWF0aW9uLnRhcmdldC5uYW1lICsgXCIgPj4+IFwiICsgYmxlbmRhYmxlQW5pbS50YXJnZXQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5UcmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCbGVuZGFibGVUYXJnZXRzKGRlbHRhVGltZSwgbGF5ZXIsIGNoaWxkLnN1YnRyZWUsIG1hc3RlckFuaW1hdGlvbiwgdGFyZ2V0SW5kZXgsIHRhcmdldE1peGVyLCBub3JtYWxpemVkRnJhbWVUaW1lLCB0YXJnZXRSb290Qm9uZSwgYmxlbmRUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pZiAodGFyZ2V0SW5kZXggPT09IDApIEJBQllMT04uVXRpbGl0aWVzLlByaW50VG9TY3JlZW4odGhpcy5fYmxlbmRNZXNzYWdlLCBcInJlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZmluYWxpemVBbmltYXRpb25UYXJnZXRzKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9kZWx0YVBvc2l0aW9uLnNldCgwLDAsMCk7XG4gICAgICAgICAgICB0aGlzLl9kZWx0YVJvdGF0aW9uLnNldCgwLDAsMCwxKTtcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhUG9zaXRpb25GaXhlZC5zZXQoMCwwLDApO1xuICAgICAgICAgICAgdGhpcy5fZGlydHlNb3Rpb25NYXRyaXggPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMubV9hbmltYXRpb25UYXJnZXRzICE9IG51bGwgJiYgdGhpcy5tX2FuaW1hdGlvblRhcmdldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMubV9hbmltYXRpb25UYXJnZXRzLmZvckVhY2goKHRhcmdldGVkQW5pbTpCQUJZTE9OLlRhcmdldGVkQW5pbWF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRhcmdldDphbnkgPSB0YXJnZXRlZEFuaW0udGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgRGlyZWN0IFRyYW5zZm9ybSBUYXJnZXRzIEZvciBFYWNoIExheWVyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBhbmltYXRpb25UYXJnZXQubWV0YWRhdGEubWl4ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hY2hpbmUubGF5ZXJzICE9IG51bGwgJiYgdGhpcy5fbWFjaGluZS5sYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kZXJNYXRyaXgucmVzZXQoKTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eUJsZW5kZXJNYXRyaXggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLmZvckVhY2goKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBhbmltYXRpb25UYXJnZXQubWV0YWRhdGEubWl4ZXJbbGF5ZXIuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uVHJhbnNmb3JtTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIERpcnR5IFRyYW5zZm9ybSBNYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciAhPSBudWxsIHx8IGFuaW1hdGlvblRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyICE9IG51bGwgfHwgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuc2NhbGluZ0J1ZmZlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uTWF0cml4LkNvbXBvc2VUb1JlZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyIHx8IGFuaW1hdGlvblRhcmdldC5zY2FsaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciB8fCBhbmltYXRpb25UYXJnZXQucm90YXRpb25RdWF0ZXJuaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciB8fCBhbmltYXRpb25UYXJnZXQucG9zaXRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlTWF0cml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ1NwZWVkID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgPD0gMS4wICYmIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5vcmlnaW5hbE1hdHJpeCA9IEJBQllMT04uTWF0cml4LkNvbXBvc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXQuc2NhbGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXQucm90YXRpb25RdWF0ZXJuaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFuaW1hdGlvblRhcmdldC5wb3NpdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yIDw9IDEuMCAmJiBhbmltYXRpb25UYXJnZXRNaXhlci5vcmlnaW5hbE1hdHJpeCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuRmFzdE1hdHJpeFNsZXJwKGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4LCB0aGlzLl91cGRhdGVNYXRyaXgsIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yLCB0aGlzLl91cGRhdGVNYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yICs9IGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nU3BlZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuRmFzdE1hdHJpeFNsZXJwKHRoaXMuX2JsZW5kZXJNYXRyaXgsIHRoaXMuX3VwZGF0ZU1hdHJpeCwgbGF5ZXIuZGVmYXVsdFdlaWdodCwgdGhpcy5fYmxlbmRlck1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpcnR5QmxlbmRlck1hdHJpeCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgRGlydHkgUm9vdCBNb3Rpb24gTWF0cml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucm9vdFBvc2l0aW9uICE9IG51bGwgfHwgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucm9vdFJvdGF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5NYXRyaXguQ29tcG9zZVRvUmVmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2VtcHR5U2NhbGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucm9vdFJvdGF0aW9uIHx8IHRoaXMuX2VtcHR5Um90YXRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFuaW1hdGlvblRhcmdldE1peGVyLnJvb3RQb3NpdGlvbiB8fCB0aGlzLl9lbXB0eVBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1hdHJpeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gTWF5IE5lZWQgU2VwZXJhdGUgQmxlbmRpbmcgU3BlZWQgUHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBNaWdodCBGaXggTGFyZ2UgUm9vdCBNb3Rpb24gRGVsdGEgSXNzdWUgLSA/Pz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nU3BlZWQgPiAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ0ZhY3RvciA8PSAxLjAgJiYgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ID0gQkFCWUxPTi5NYXRyaXguQ29tcG9zZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudHJhbnNmb3JtLnNjYWxpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgPD0gMS4wICYmIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5GYXN0TWF0cml4U2xlcnAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXgsIHRoaXMuX3VwZGF0ZU1hdHJpeCwgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IsIHRoaXMuX3VwZGF0ZU1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgKz0gYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdTcGVlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5GYXN0TWF0cml4U2xlcnAodGhpcy5fcm9vdE1vdGlvbk1hdHJpeCwgdGhpcy5fdXBkYXRlTWF0cml4LCBsYXllci5kZWZhdWx0V2VpZ2h0LCB0aGlzLl9yb290TW90aW9uTWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlydHlNb3Rpb25NYXRyaXggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5yb290UG9zaXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5yb290Um90YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uVGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5Nb3JwaFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXQuaW5mbHVlbmNlID0gQkFCWUxPTi5TY2FsYXIuTGVycChhbmltYXRpb25UYXJnZXQuaW5mbHVlbmNlLCBhbmltYXRpb25UYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIsIGxheWVyLmRlZmF1bHRXZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXJ0eUJsZW5kZXJNYXRyaXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZGVyTWF0cml4LmRlY29tcG9zZShhbmltYXRpb25UYXJnZXQuc2NhbGluZywgYW5pbWF0aW9uVGFyZ2V0LnJvdGF0aW9uUXVhdGVybmlvbiwgYW5pbWF0aW9uVGFyZ2V0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICBpZiAodGhpcy5hcHBseVJvb3RNb3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlydHlNb3Rpb25NYXRyaXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290TW90aW9uTWF0cml4LmRlY29tcG9zZSh0aGlzLl9yb290TW90aW9uU2NhbGluZywgdGhpcy5fcm9vdE1vdGlvblJvdGF0aW9uLCB0aGlzLl9yb290TW90aW9uUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWV0aW1lID09PSAwKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdE1vdGlvblBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuX3Jvb3RNb3Rpb25Qb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0TW90aW9uUm90YXRpb24uY29weUZyb20odGhpcy5fcm9vdE1vdGlvblJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQ3VycmVudCBEZWx0YSBQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290TW90aW9uUG9zaXRpb24uc3VidHJhY3RUb1JlZih0aGlzLl9sYXN0TW90aW9uUG9zaXRpb24sIHRoaXMuX2RlbHRhUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQ3VycmVudCBEZWx0YSBSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5RdWF0ZXJuaW9uRGlmZlRvUmVmKHRoaXMuX3Jvb3RNb3Rpb25Sb3RhdGlvbiwgdGhpcy5fbGFzdE1vdGlvblJvdGF0aW9uLCB0aGlzLl9kZWx0YVJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsdGFSb3RhdGlvbi50b0V1bGVyQW5nbGVzVG9SZWYodGhpcy5fYW5ndWxhclZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIExhc3QgUm9vdCBNb3Rpb24gRGVsdGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVEZWx0YVBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuX2RlbHRhUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYXZlRGVsdGFSb3RhdGlvbi5jb3B5RnJvbSh0aGlzLl9kZWx0YVJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdE1vdGlvblBvc2l0aW9uLmFkZEluUGxhY2UodGhpcy5fZGVsdGFQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RNb3Rpb25Sb3RhdGlvbi5tdWx0aXBseUluUGxhY2UodGhpcy5fZGVsdGFSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBSb290IE1vdGlvbiBUcmFuc2Zvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24udG9Sb3RhdGlvbk1hdHJpeCh0aGlzLl9kZWx0YVBvc2l0aW9uTWF0cml4KTsgLy8gVE9ETzogT3B0aW1pemUgUm90YXRpb24gTWF0cml4IElzIERpcnR5IC0gPz8/XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVmVjdG9yMy5UcmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmKHRoaXMuX2RlbHRhUG9zaXRpb24sIHRoaXMuX2RlbHRhUG9zaXRpb25NYXRyaXgsIHRoaXMuX2RlbHRhUG9zaXRpb25GaXhlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIFRyYW5zZm9ybSBEZWx0YSBSb3RhdGlvblxuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlUm9vdE1vdGlvblJvdGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLmFkZFJvdGF0aW9uKDAsIHRoaXMuX2FuZ3VsYXJWZWxvY2l0eS55LCAwKTsgLy8gTm90ZTogQWx3YXlzIFJvdGF0ZSBUaGUgVHJhbnNmb3JtIE5vZGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVHJhbnNmb3JtIERlbHRhIFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy51cGRhdGVSb290TW90aW9uUG9zaXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZW1vZGUgPT09IDEgJiYgdGhpcy5tX2NoYXJhY3RlckNvbnRyb2xsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogVXNlIENoYXJhY3RlciBDb250cm9sbGVyIFRvIE1vdmUgRW50aXR5IC0gPz8/XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2NoYXJhY3RlckNvbnRyb2xsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFNldCBDaGFyYWN0ZXIgQ29udHJvbGxlciBVcGRhdGUgUG9zaXRpb24gQW5kIFN5bmMgV2l0aCBUcmFuc2Zvcm0gKElmIEV4aXN0cylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZEluUGxhY2UodGhpcy5fZGVsdGFQb3NpdGlvbkZpeGVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgY2hlY2tTdGF0ZU1hY2hpbmUobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIGRlbHRhVGltZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMucmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrZXJzLm9mZmVzdCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9jaGVja2Vycy5ibGVuZGluZyA9IDA7XG4gICAgICAgICAgICB0aGlzLl9jaGVja2Vycy50cmlnZ2VyZWQgPSBbXTtcbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAvLyBDaGVjayBBbmltYXRpb24gU3RhdGUgVHJhbnNpdGlvbnNcbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGltZSArPSBkZWx0YVRpbWU7IC8vIFVwZGF0ZSBTdGF0ZSBUaW1lclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIExvY2FsIFRyYW5zaXRpb24gQ29uZGl0aW9uc1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTdGF0ZVRyYW5zaXRpb25zKGxheWVyLCBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudHJhbnNpdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIEFueSBTdGF0ZSBUcmFuc2l0aW9uIENvbmRpdGlvbnNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2hlY2tlcnMucmVzdWx0ID09IG51bGwgJiYgdGhpcy5fbWFjaGluZS50cmFuc2l0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTdGF0ZVRyYW5zaXRpb25zKGxheWVyLCB0aGlzLl9tYWNoaW5lLnRyYW5zaXRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgLy8gUmVzZXQgVHJhbnNpdGlvbiBDb25kaXRpb24gVHJpZ2dlcnNcbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICBpZiAodGhpcy5fY2hlY2tlcnMudHJpZ2dlcmVkICE9IG51bGwgJiYgdGhpcy5fY2hlY2tlcnMudHJpZ2dlcmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2Vycy50cmlnZ2VyZWQuZm9yRWFjaCgodHJpZ2dlcikgPT4geyB0aGlzLnJlc2V0VHJpZ2dlcih0cmlnZ2VyKTsgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMudHJpZ2dlcmVkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAvLyBTZXQgQ3VycmVudCBNYWNoaW5lIFN0YXRlIFJlc3VsdFxuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2Vycy5yZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGxheUN1cnJlbnRBbmltYXRpb25TdGF0ZShsYXllciwgdGhpcy5fY2hlY2tlcnMucmVzdWx0LCB0aGlzLl9jaGVja2Vycy5ibGVuZGluZywgdGhpcy5fY2hlY2tlcnMub2ZmZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIGNoZWNrU3RhdGVUcmFuc2l0aW9ucyhsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllciwgdHJhbnNpdGlvbnM6QkFCWUxPTi5JVHJhbnNpdGlvbltdKTphbnkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRBbmltYXRpb25SYXRlOm51bWJlciA9IGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5yYXRlO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRBbmltYXRpb25MZW5ndGg6bnVtYmVyID0gbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9ucyAhPSBudWxsICYmIHRyYW5zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgaTpudW1iZXIgPSAwOyBsZXQgaWk6bnVtYmVyID0gMDsgbGV0IHNvbG86bnVtYmVyID0gLTE7XG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBIYXMgU29sbyBUcmFuc2l0aW9uc1xuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdHJhbnNpdGlvbnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uc1tpXS5zb2xvID09PSB0cnVlICYmIHRyYW5zaXRpb25zW2ldLm11dGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb2xvID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgU3RhdGUgTWFjaGluZSBUcmFuc2l0aW9uc1xuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdHJhbnNpdGlvbnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb246QkFCWUxPTi5JVHJhbnNpdGlvbiA9IHRyYW5zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNpdGlvbi5sYXllckluZGV4ICE9PSBsYXllci5pbmRleCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uLm11dGUgPT09IHRydWUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc29sbyA+PSAwICYmIHNvbG8gIT09IGkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNpdGlvbk9rOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgSGFzIFRyYW5zaXRpb24gRXhpdCBUaW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIGxldCBleGl0VGltZVNlY3M6bnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGV4aXRUaW1lRXhwaXJlZDpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24uZXhpdFRpbWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0VGltZVNlY3MgPSAoY3VycmVudEFuaW1hdGlvbkxlbmd0aCAqIHRyYW5zaXRpb24uZXhpdFRpbWUpOyAvLyBOb3RlOiBJcyBOb3JtYWxpemVkIFRyYW5zaXRpb24gRXhpdCBUaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0VGltZUV4cGlyZWQgPSAodHJhbnNpdGlvbi5oYXNFeGl0VGltZSA9PT0gdHJ1ZSkgPyAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLnRpbWUgPj0gZXhpdFRpbWVTZWNzKSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24uaGFzRXhpdFRpbWUgPT09IHRydWUgJiYgdHJhbnNpdGlvbi5pbnRTb3VyY2UgPT0gQkFCWUxPTi5JbnRlcnJ1cHRpb25Tb3VyY2UuTm9uZSAmJiBleGl0VGltZUV4cGlyZWQgPT09IGZhbHNlKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgQWxsIFRyYW5zaXRpb24gQ29uZGl0aW9uc1xuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNpdGlvbi5jb25kaXRpb25zICE9IG51bGwgJiYgdHJhbnNpdGlvbi5jb25kaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXNzZWQ6bnVtYmVyID0gMDsgbGV0IGNoZWNrczpudW1iZXIgPSB0cmFuc2l0aW9uLmNvbmRpdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5jb25kaXRpb25zLmZvckVhY2goKGNvbmRpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB0eXBlOkJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlID0gdGhpcy5fcGFyYW1ldGVycy5nZXQoY29uZGl0aW9uLnBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB0eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB0eXBlID09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkZsb2F0IHx8IHB0eXBlID09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtVmFsdWU6bnVtYmVyID0gcGFyc2VGbG9hdCh0aGlzLmdldEZsb2F0KGNvbmRpdGlvbi5wYXJhbWV0ZXIpLnRvRml4ZWQoMikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi5tb2RlID09PSBCQUJZTE9OLkNvbmRpdGlvbk1vZGUuR3JlYXRlciAmJiBudW1WYWx1ZSA+IGNvbmRpdGlvbi50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLm1vZGUgPT09IEJBQllMT04uQ29uZGl0aW9uTW9kZS5MZXNzICYmIG51bVZhbHVlIDwgY29uZGl0aW9uLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24ubW9kZSA9PT0gQkFCWUxPTi5Db25kaXRpb25Nb2RlLkVxdWFscyAmJiBudW1WYWx1ZSA9PT0gY29uZGl0aW9uLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24ubW9kZSA9PT0gQkFCWUxPTi5Db25kaXRpb25Nb2RlLk5vdEVxdWFsICYmIG51bVZhbHVlICE9PSBjb25kaXRpb24udGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHR5cGUgPT0gQkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUuQm9vbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9vbFZhbHVlOmJvb2xlYW4gPSB0aGlzLmdldEJvb2woY29uZGl0aW9uLnBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uLm1vZGUgPT09IEJBQllMT04uQ29uZGl0aW9uTW9kZS5JZiAmJiBib29sVmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLm1vZGUgPT09IEJBQllMT04uQ29uZGl0aW9uTW9kZS5JZk5vdCAmJiBib29sVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHR5cGUgPT0gQkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUuVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpZ2dlclZhbHVlOmJvb2xlYW4gPSB0aGlzLmdldFRyaWdnZXIoY29uZGl0aW9uLnBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlclZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogRm9yIExvb3AgRmFzdGVyIFRoYW4gSW5kZXhPZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleE9mVHJpZ2dlcjpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoZWNrZXJzLnRyaWdnZXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2hlY2tlcnMudHJpZ2dlcmVkW2ldID09PSBjb25kaXRpb24ucGFyYW1ldGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mVHJpZ2dlciA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleE9mVHJpZ2dlciA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMudHJpZ2dlcmVkLnB1c2goY29uZGl0aW9uLnBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNpdGlvbi5oYXNFeGl0VGltZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAtIENIRUNLIFRSQU5TSVRJT04gSU5URVJVUFRJT04gU09VUkNFIFNUQVRVU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgVHJhbnNpdGlvbiBIYXMgRXhpdCBUaW1lIEFuZCBBbGwgQ29uZGl0aW9ucyBQYXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uT2sgPSAoZXhpdFRpbWVFeHBpcmVkID09PSB0cnVlICYmIHBhc3NlZCA9PT0gY2hlY2tzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgQWxsIFRyYW5zaXRpb24gQ29uZGl0aW9ucyBQYXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uT2sgPSAocGFzc2VkID09PSBjaGVja3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgVHJhbnNpdGlvbiBIYXMgRXhwaXJlZCBFeGl0IFRpbWUgT25seVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbk9rID0gKHRyYW5zaXRpb24uaGFzRXhpdFRpbWUgPT09IHRydWUgJiYgZXhpdFRpbWVFeHBpcmVkID09PSB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBDdXJyZW50IFRyYW5zaXRpb24gRGVzdGluYXRpb24gQ2hhbmdlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uT2sgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kUmF0ZTpudW1iZXIgPSAoY3VycmVudEFuaW1hdGlvblJhdGUgPiAwKSA/IGN1cnJlbnRBbmltYXRpb25SYXRlIDogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5GUFM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0U3RhdGU6c3RyaW5nID0gKHRyYW5zaXRpb24uaXNFeGl0ID09PSBmYWxzZSkgPyB0cmFuc2l0aW9uLmRlc3RpbmF0aW9uIDogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5FWElUO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb25TZWNzOm51bWJlciA9ICh0cmFuc2l0aW9uLmZpeGVkRHVyYXRpb24gPT09IHRydWUpID8gdHJhbnNpdGlvbi5kdXJhdGlvbiA6IEJBQllMT04uU2NhbGFyLkRlbm9ybWFsaXplKHRyYW5zaXRpb24uZHVyYXRpb24sIDAsIGN1cnJlbnRBbmltYXRpb25MZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxlbmRpbmdTcGVlZDpudW1iZXIgPSBCQUJZTE9OLlV0aWxpdGllcy5Db21wdXRlQmxlbmRpbmdTcGVlZChibGVuZFJhdGUsIGR1cmF0aW9uU2Vjcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkT2Zmc2V0Om51bWJlciA9IHRyYW5zaXRpb24ub2Zmc2V0OyAgLy8gTm90ZTogSXMgTm9ybWFsaXplZCBUcmFuc2l0aW9uIE9mZnNldCBUaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2Vycy5yZXN1bHQgPSBkZXN0U3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2Vycy5vZmZlc3QgPSBub3JtYWxpemVkT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMuYmxlbmRpbmcgPSBibGVuZGluZ1NwZWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBwbGF5Q3VycmVudEFuaW1hdGlvblN0YXRlKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyLCBuYW1lOnN0cmluZywgYmxlbmRpbmc6bnVtYmVyLCBub3JtYWxpemVkT2Zmc2V0Om51bWJlciA9IDApOnZvaWQge1xuICAgICAgICAgICAgaWYgKGxheWVyID09IG51bGwpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwgfHwgbmFtZSA9PT0gXCJcIiB8fCBuYW1lID09PSBCQUJZTE9OLkFuaW1hdGlvblN0YXRlLkVYSVQpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUgIT0gbnVsbCAmJiBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUubmFtZSA9PT0gbmFtZSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3Qgc3RhdGU6QkFCWUxPTi5NYWNoaW5lU3RhdGUgPSB0aGlzLmdldE1hY2hpbmVTdGF0ZShuYW1lKTtcbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAvLyBSZXNldCBBbmltYXRpb24gVGFyZ2V0IE1peGVyc1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIGlmICh0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cyAhPSBudWxsICYmIHRoaXMubV9hbmltYXRpb25UYXJnZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXRlZEFuaW06QkFCWUxPTi5UYXJnZXRlZEFuaW1hdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25UYXJnZXQ6YW55ID0gdGFyZ2V0ZWRBbmltLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGFuaW1hdGlvblRhcmdldC5tZXRhZGF0YS5taXhlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25UYXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyID0gYW5pbWF0aW9uVGFyZ2V0Lm1ldGFkYXRhLm1peGVyW2xheWVyLmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ1NwZWVkID0gYmxlbmRpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAvLyBQbGF5IEN1cnJlbnQgTGF5ZXIgQW5pbWF0aW9uIFN0YXRlXG4gICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgaWYgKHN0YXRlICE9IG51bGwgJiYgc3RhdGUubGF5ZXJJbmRleCA9PT0gbGF5ZXIuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS50aW1lID0gMDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5wbGF5ZWQgPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uVGltZSA9IEJBQllMT04uU2NhbGFyLkNsYW1wKG5vcm1hbGl6ZWRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbk5vcm1hbCA9IDA7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uRmlyc3RSdW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkVuZEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTG9vcEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTG9vcENvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCI+Pj4gUGxheSBBbmltYXRpb24gU3RhdGU6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiIC0tPiBcIiArIG5hbWUgKyBcIiAtLT4gRm9vdCBJSzogXCIgKyBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUuaUtPbkZlZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgc3RvcEN1cnJlbnRBbmltYXRpb25TdGF0ZShsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAobGF5ZXIgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIC8vIFJlc2V0IEFuaW1hdGlvbiBUYXJnZXQgTWl4ZXJzXG4gICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgaWYgKHRoaXMubV9hbmltYXRpb25UYXJnZXRzICE9IG51bGwgJiYgdGhpcy5tX2FuaW1hdGlvblRhcmdldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMubV9hbmltYXRpb25UYXJnZXRzLmZvckVhY2goKHRhcmdldGVkQW5pbTpCQUJZTE9OLlRhcmdldGVkQW5pbWF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRhcmdldDphbnkgPSB0YXJnZXRlZEFuaW0udGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0Lm1ldGFkYXRhICE9IG51bGwgJiYgYW5pbWF0aW9uVGFyZ2V0Lm1ldGFkYXRhLm1peGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBhbmltYXRpb25UYXJnZXQubWV0YWRhdGEubWl4ZXJbbGF5ZXIuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldE1peGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5vcmlnaW5hbE1hdHJpeCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nU3BlZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgLy8gU3RvcCBDdXJyZW50IExheWVyIEFuaW1hdGlvbiBTdGF0ZVxuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblRpbWUgPSAwO1xuICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsID0gMDtcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkZpcnN0UnVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkVuZEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRnJhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BDb3VudCA9IDA7XG4gICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBjaGVja0F2YXRhclRyYW5zZm9ybVBhdGgobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyYW5zZm9ybVBhdGg6c3RyaW5nKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvbk1hc2tNYXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybUluZGV4Om51bWJlciA9IGxheWVyLmFuaW1hdGlvbk1hc2tNYXAuZ2V0KHRyYW5zZm9ybVBhdGgpO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1JbmRleCAhPSBudWxsICYmIHRyYW5zZm9ybUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgZmlsdGVyVGFyZ2V0QXZhdGFyTWFzayhsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllciwgdGFyZ2V0OkJBQllMT04uVHJhbnNmb3JtTm9kZSk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiB0YXJnZXQubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiB0YXJnZXQubWV0YWRhdGEudW5pdHkuYm9uZSAhPSBudWxsICYmIHRhcmdldC5tZXRhZGF0YS51bml0eS5ib25lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtUGF0aDpzdHJpbmcgPSB0YXJnZXQubWV0YWRhdGEudW5pdHkuYm9uZTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNoZWNrQXZhdGFyVHJhbnNmb3JtUGF0aChsYXllciwgdHJhbnNmb3JtUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgc29ydFdlaWdodGVkQmxlbmRpbmdMaXN0KHdlaWdodExpc3Q6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXSk6dm9pZCB7XG4gICAgICAgICAgICBpZiAod2VpZ2h0TGlzdCAhPSBudWxsICYmIHdlaWdodExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFNvcnQgSW4gRGVzY2VuZGluZyBPcmRlclxuICAgICAgICAgICAgICAgIHdlaWdodExpc3Quc29ydCgobGVmdCwgcmlnaHQpOiBudW1iZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVmdC53ZWlnaHQgPCByaWdodC53ZWlnaHQpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVmdC53ZWlnaHQgPiByaWdodC53ZWlnaHQpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBjb21wdXRlV2VpZ2h0ZWRGcmFtZVJhdGlvKHdlaWdodExpc3Q6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXSk6bnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMS4wO1xuICAgICAgICAgICAgaWYgKHdlaWdodExpc3QgIT0gbnVsbCAmJiB3ZWlnaHRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRXZWlnaHRlZEJsZW5kaW5nTGlzdCh3ZWlnaHRMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZFdlaWdodHMucHJpbWFyeSA9IHdlaWdodExpc3RbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWFyeVdlaWdodDpudW1iZXIgPSB0aGlzLl9ibGVuZFdlaWdodHMucHJpbWFyeS53ZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlXZWlnaHQgPCAxLjAgJiYgd2VpZ2h0TGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kV2VpZ2h0cy5zZWNvbmRhcnkgPSB3ZWlnaHRMaXN0WzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ibGVuZFdlaWdodHMucHJpbWFyeSAhPSBudWxsICYmIHRoaXMuX2JsZW5kV2VpZ2h0cy5zZWNvbmRhcnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFtZVdlaWdodERlbHRhOm51bWJlciA9IEJBQllMT04uU2NhbGFyLkNsYW1wKHRoaXMuX2JsZW5kV2VpZ2h0cy5wcmltYXJ5LndlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEJBQllMT04uU2NhbGFyLkxlcnAodGhpcy5fYmxlbmRXZWlnaHRzLnNlY29uZGFyeS5yYXRpbywgdGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkucmF0aW8sIGZyYW1lV2VpZ2h0RGVsdGEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkgIT0gbnVsbCAmJiB0aGlzLl9ibGVuZFdlaWdodHMuc2Vjb25kYXJ5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkucmF0aW87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIEJsZW5kIFRyZWUgQnJhbmNoZXMgLSAgSGVscGVyIEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIHByaXZhdGUgc2V0dXBUcmVlQnJhbmNoZXModHJlZTpCQUJZTE9OLklCbGVuZFRyZWUpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRyZWUgIT0gbnVsbCAmJiB0cmVlLmNoaWxkcmVuICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLlRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUcmVlQnJhbmNoZXMoY2hpbGQuc3VidHJlZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLkNsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5tb3Rpb24gIT0gbnVsbCAmJiBjaGlsZC5tb3Rpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnJhdGlvID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC50cmFjayA9IHRoaXMuZ2V0QW5pbWF0aW9uR3JvdXAoY2hpbGQubW90aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHJhY2sgIT0gbnVsbCkgY2hpbGQucmF0aW8gPSAoQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FIC8gY2hpbGQudHJhY2sudG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBwYXJzZVRyZWVCcmFuY2hlcyhsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllciwgdHJlZTpCQUJZTE9OLklCbGVuZFRyZWUsIHBhcmVudFdlaWdodDpudW1iZXIsIHdlaWdodExpc3Q6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXSk6dm9pZCB7XG4gICAgICAgICAgICBpZiAodHJlZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJlZS52YWx1ZVBhcmFtZXRlclggPSAodHJlZS5ibGVuZFBhcmFtZXRlclggIT0gbnVsbCkgPyBwYXJzZUZsb2F0KHRoaXMuZ2V0RmxvYXQodHJlZS5ibGVuZFBhcmFtZXRlclgpLnRvRml4ZWQoMikpIDogMDtcbiAgICAgICAgICAgICAgICB0cmVlLnZhbHVlUGFyYW1ldGVyWSA9ICh0cmVlLmJsZW5kUGFyYW1ldGVyWSAhPSBudWxsKSA/IHBhcnNlRmxvYXQodGhpcy5nZXRGbG9hdCh0cmVlLmJsZW5kUGFyYW1ldGVyWSkudG9GaXhlZCgyKSkgOiAwO1xuICAgICAgICAgICAgICAgIHN3aXRjaCh0cmVlLmJsZW5kVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uQmxlbmRUcmVlVHlwZS5TaW1wbGUxRDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2UxRFNpbXBsZVRyZWVCcmFuY2hlcyhsYXllciwgdHJlZSwgcGFyZW50V2VpZ2h0LCB3ZWlnaHRMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uQmxlbmRUcmVlVHlwZS5TaW1wbGVEaXJlY3Rpb25hbDJEOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZTJEU2ltcGxlRGlyZWN0aW9uYWxUcmVlQnJhbmNoZXMobGF5ZXIsIHRyZWUsIHBhcmVudFdlaWdodCwgd2VpZ2h0TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCQUJZTE9OLkJsZW5kVHJlZVR5cGUuRnJlZWZvcm1EaXJlY3Rpb25hbDJEOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZTJERnJlZWZvcm1EaXJlY3Rpb25hbFRyZWVCcmFuY2hlcyhsYXllciwgdHJlZSwgcGFyZW50V2VpZ2h0LCB3ZWlnaHRMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uQmxlbmRUcmVlVHlwZS5GcmVlZm9ybUNhcnRlc2lhbjJEOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZTJERnJlZWZvcm1DYXJ0ZXNpYW5UcmVlQnJhbmNoZXMobGF5ZXIsIHRyZWUsIHBhcmVudFdlaWdodCwgd2VpZ2h0TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBwYXJzZTFEU2ltcGxlVHJlZUJyYW5jaGVzKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyLCB0cmVlOkJBQllMT04uSUJsZW5kVHJlZSwgcGFyZW50V2VpZ2h0Om51bWJlciwgd2VpZ2h0TGlzdDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZFtdKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0cmVlICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZUFycmF5IDogQkFCWUxPTi5CbGVuZFRyZWVWYWx1ZVtdID0gW107XG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgPSAwOyAvLyBOb3RlOiBSZXNldCBXZWlnaHQgVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogY2hpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb246IGNoaWxkLm1vdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc1g6IGNoaWxkLnRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc1k6IGNoaWxkLnRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogY2hpbGQud2VpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJsZW5kVHJlZUFycmF5LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uQ2FsY3VsYXRlMURTaW1wbGVCbGVuZFRyZWUodHJlZS52YWx1ZVBhcmFtZXRlclgsIGJsZW5kVHJlZUFycmF5KTtcbiAgICAgICAgICAgICAgICBibGVuZFRyZWVBcnJheS5mb3JFYWNoKChlbGVtZW50OkJBQllMT04uQmxlbmRUcmVlVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc291cmNlLndlaWdodCA9IGVsZW1lbnQud2VpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgKj0gcGFyZW50V2VpZ2h0OyAvLyBOb3RlOiBTY2FsZSBXZWlnaHQgVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5DbGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQud2VpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodExpc3QucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5UcmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlVHJlZUJyYW5jaGVzKGxheWVyLCBjaGlsZC5zdWJ0cmVlLCBjaGlsZC53ZWlnaHQsIHdlaWdodExpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBwYXJzZTJEU2ltcGxlRGlyZWN0aW9uYWxUcmVlQnJhbmNoZXMobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBwYXJlbnRXZWlnaHQ6bnVtYmVyLCB3ZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10pOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRyZWUgIT0gbnVsbCAmJiB0cmVlLmNoaWxkcmVuICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxlbmRUcmVlQXJyYXkgOiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10gPSBbXTtcbiAgICAgICAgICAgICAgICB0cmVlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkOkJBQllMT04uSUJsZW5kVHJlZUNoaWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLndlaWdodCA9IDA7IC8vIE5vdGU6IFJlc2V0IFdlaWdodCBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGlvbjogY2hpbGQubW90aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWDogY2hpbGQucG9zaXRpb25YLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWTogY2hpbGQucG9zaXRpb25ZLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBjaGlsZC53ZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUcmVlQXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5DYWxjdWxhdGUyREZyZWVmb3JtRGlyZWN0aW9uYWwodHJlZS52YWx1ZVBhcmFtZXRlclgsIHRyZWUudmFsdWVQYXJhbWV0ZXJZLCBibGVuZFRyZWVBcnJheSk7XG4gICAgICAgICAgICAgICAgYmxlbmRUcmVlQXJyYXkuZm9yRWFjaCgoZWxlbWVudDpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNvdXJjZS53ZWlnaHQgPSBlbGVtZW50LndlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQud2VpZ2h0ICo9IHBhcmVudFdlaWdodDsgLy8gTm90ZTogU2NhbGUgV2VpZ2h0IFZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuQ2xpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLndlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRMaXN0LnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuVHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVRyZWVCcmFuY2hlcyhsYXllciwgY2hpbGQuc3VidHJlZSwgY2hpbGQud2VpZ2h0LCB3ZWlnaHRMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgcGFyc2UyREZyZWVmb3JtRGlyZWN0aW9uYWxUcmVlQnJhbmNoZXMobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBwYXJlbnRXZWlnaHQ6bnVtYmVyLCB3ZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10pOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRyZWUgIT0gbnVsbCAmJiB0cmVlLmNoaWxkcmVuICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxlbmRUcmVlQXJyYXkgOiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10gPSBbXTtcbiAgICAgICAgICAgICAgICB0cmVlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkOkJBQllMT04uSUJsZW5kVHJlZUNoaWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLndlaWdodCA9IDA7IC8vIE5vdGU6IFJlc2V0IFdlaWdodCBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGlvbjogY2hpbGQubW90aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWDogY2hpbGQucG9zaXRpb25YLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWTogY2hpbGQucG9zaXRpb25ZLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBjaGlsZC53ZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUcmVlQXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5DYWxjdWxhdGUyREZyZWVmb3JtRGlyZWN0aW9uYWwodHJlZS52YWx1ZVBhcmFtZXRlclgsIHRyZWUudmFsdWVQYXJhbWV0ZXJZLCBibGVuZFRyZWVBcnJheSk7XG4gICAgICAgICAgICAgICAgYmxlbmRUcmVlQXJyYXkuZm9yRWFjaCgoZWxlbWVudDpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNvdXJjZS53ZWlnaHQgPSBlbGVtZW50LndlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQud2VpZ2h0ICo9IHBhcmVudFdlaWdodDsgLy8gTm90ZTogU2NhbGUgV2VpZ2h0IFZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuQ2xpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLndlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRMaXN0LnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuVHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVRyZWVCcmFuY2hlcyhsYXllciwgY2hpbGQuc3VidHJlZSwgY2hpbGQud2VpZ2h0LCB3ZWlnaHRMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgcGFyc2UyREZyZWVmb3JtQ2FydGVzaWFuVHJlZUJyYW5jaGVzKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyLCB0cmVlOkJBQllMT04uSUJsZW5kVHJlZSwgcGFyZW50V2VpZ2h0Om51bWJlciwgd2VpZ2h0TGlzdDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZFtdKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0cmVlICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZUFycmF5IDogQkFCWUxPTi5CbGVuZFRyZWVWYWx1ZVtdID0gW107XG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgPSAwOyAvLyBOb3RlOiBSZXNldCBXZWlnaHQgVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogY2hpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb246IGNoaWxkLm1vdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc1g6IGNoaWxkLnBvc2l0aW9uWCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc1k6IGNoaWxkLnBvc2l0aW9uWSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogY2hpbGQud2VpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJsZW5kVHJlZUFycmF5LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uQ2FsY3VsYXRlMkRGcmVlZm9ybUNhcnRlc2lhbih0cmVlLnZhbHVlUGFyYW1ldGVyWCwgdHJlZS52YWx1ZVBhcmFtZXRlclksIGJsZW5kVHJlZUFycmF5KTtcbiAgICAgICAgICAgICAgICBibGVuZFRyZWVBcnJheS5mb3JFYWNoKChlbGVtZW50OkJBQllMT04uQmxlbmRUcmVlVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc291cmNlLndlaWdodCA9IGVsZW1lbnQud2VpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgKj0gcGFyZW50V2VpZ2h0OyAvLyBOb3RlOiBTY2FsZSBXZWlnaHQgVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5DbGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQud2VpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodExpc3QucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5UcmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlVHJlZUJyYW5jaGVzKGxheWVyLCBjaGlsZC5zdWJ0cmVlLCBjaGlsZC53ZWlnaHQsIHdlaWdodExpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gU3VwcG9ydCBDbGFzc2VzLCBCbGVuZCBUcmVlIFV0aWxpdGllc1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGV4cG9ydCBjbGFzcyBCbGVuZFRyZWVWYWx1ZSB7XG4gICAgICAgIHB1YmxpYyBzb3VyY2U6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQ7XG4gICAgICAgIHB1YmxpYyBtb3Rpb246IHN0cmluZztcbiAgICAgICAgcHVibGljIHBvc1g6IG51bWJlcjtcbiAgICAgICAgcHVibGljIHBvc1k6IG51bWJlcjtcbiAgICAgICAgcHVibGljIHdlaWdodDogbnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb25maWc6IHsgc291cmNlOiBCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCwgbW90aW9uOiBzdHJpbmcsIHBvc1g/OiBudW1iZXIsIHBvc1k/OiBudW1iZXIsIHdlaWdodD86IG51bWJlciB9KSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IGNvbmZpZy5zb3VyY2U7XG4gICAgICAgICAgICB0aGlzLm1vdGlvbiA9IGNvbmZpZy5tb3Rpb247XG4gICAgICAgICAgICB0aGlzLnBvc1ggPSBjb25maWcucG9zWCB8fCAwO1xuICAgICAgICAgICAgdGhpcy5wb3NZID0gY29uZmlnLnBvc1kgfHwgMDtcbiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gY29uZmlnLndlaWdodCB8fCAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4cG9ydCBjbGFzcyBCbGVuZFRyZWVVdGlscyB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ2xhbXBWYWx1ZShudW06IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTpudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIG51bSA8PSBtaW4gPyBtaW4gOiBudW0gPj0gbWF4ID8gbWF4IDogbnVtO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0U2lnbmVkQW5nbGUoYTogQkFCWUxPTi5WZWN0b3IyLCBiOiBCQUJZTE9OLlZlY3RvcjIpOm51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hdGFuMihhLnggKiBiLnkgLSBhLnkgKiBiLngsIGEueCAqIGIueCArIGEueSAqIGIueSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHN0YXRpYyBHZXRMaW5lYXJJbnRlcnBvbGF0aW9uKHgwOiBudW1iZXIsIHkwOiBudW1iZXIsIHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHg6IG51bWJlcik6bnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB5MCArICh4IC0geDApICogKCh5MSAtIHkwKSAvICh4MSAtIHgwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHN0YXRpYyBHZXRSaWdodE5laWdoYm91ckluZGV4KGlucHV0WDogbnVtYmVyLCBibGVuZFRyZWVBcnJheTogQkFCWUxPTi5CbGVuZFRyZWVWYWx1ZVtdKTogbnVtYmVyIHtcbiAgICAgICAgICAgIGJsZW5kVHJlZUFycmF5LnNvcnQoKGE6IEJBQllMT04uQmxlbmRUcmVlVmFsdWUsIGI6IEJBQllMT04uQmxlbmRUcmVlVmFsdWUpID0+IHsgcmV0dXJuIChhLnBvc1ggLSBiLnBvc1gpOyB9KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxlbmRUcmVlQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoYmxlbmRUcmVlQXJyYXlbaV0ucG9zWCA+IGlucHV0WCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIEJsZW5kVHJlZVN5c3RlbSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ2FsY3VsYXRlMURTaW1wbGVCbGVuZFRyZWUoaW5wdXRYOiBudW1iZXIsIGJsZW5kVHJlZUFycmF5OiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10pOnZvaWQge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RCbGVuZFRyZWU6QkFCWUxPTi5CbGVuZFRyZWVWYWx1ZSA9IGJsZW5kVHJlZUFycmF5WzBdO1xuICAgICAgICAgICAgY29uc3QgbGFzdEJsZW5kVHJlZTpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlID0gYmxlbmRUcmVlQXJyYXlbYmxlbmRUcmVlQXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoaW5wdXRYIDw9IGZpcnN0QmxlbmRUcmVlLnBvc1gpIHtcbiAgICAgICAgICAgICAgICBmaXJzdEJsZW5kVHJlZS53ZWlnaHQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dFggPj0gbGFzdEJsZW5kVHJlZS5wb3NYKSB7XG4gICAgICAgICAgICAgICAgbGFzdEJsZW5kVHJlZS53ZWlnaHQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodE5laWdoYm91ckJsZW5kVHJlZUluZGV4Om51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlVXRpbHMuR2V0UmlnaHROZWlnaGJvdXJJbmRleChpbnB1dFgsIGJsZW5kVHJlZUFycmF5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0TmVpZ2hib3VyOkJBQllMT04uQmxlbmRUcmVlVmFsdWUgPSBibGVuZFRyZWVBcnJheVtyaWdodE5laWdoYm91ckJsZW5kVHJlZUluZGV4IC0gMV07XG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHROZWlnaGJvdXI6QkFCWUxPTi5CbGVuZFRyZWVWYWx1ZSA9IGJsZW5kVHJlZUFycmF5W3JpZ2h0TmVpZ2hib3VyQmxlbmRUcmVlSW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlVXRpbHMuR2V0TGluZWFySW50ZXJwb2xhdGlvbihsZWZ0TmVpZ2hib3VyLnBvc1gsIDEsIHJpZ2h0TmVpZ2hib3VyLnBvc1gsIDAsIGlucHV0WCk7XG4gICAgICAgICAgICAgICAgbGVmdE5laWdoYm91ci53ZWlnaHQgPSBpbnRlcnBvbGF0ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICByaWdodE5laWdoYm91ci53ZWlnaHQgPSAxIC0gbGVmdE5laWdoYm91ci53ZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHN0YXRpYyBDYWxjdWxhdGUyREZyZWVmb3JtRGlyZWN0aW9uYWwoaW5wdXRYOiBudW1iZXIsIGlucHV0WTogbnVtYmVyLCBibGVuZFRyZWVBcnJheTogQkFCWUxPTi5CbGVuZFRyZWVWYWx1ZVtdKTp2b2lkIHtcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX0lQLnNldChpbnB1dFgsIGlucHV0WSk7XG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLnNldCgwLDApO1xuICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSi5zZXQoMCwwKTtcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQLnNldCgwLDApO1xuICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSUouc2V0KDAsMCk7XG4gICAgICAgICAgICBjb25zdCBrRGlyU2NhbGU6bnVtYmVyID0gMjtcbiAgICAgICAgICAgIGxldCB0b3RhbFdlaWdodDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgbGV0IGlucHV0TGVuZ3RoOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX0lQLmxlbmd0aCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibGVuZFRyZWVBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZTpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlID0gYmxlbmRUcmVlQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSS5zZXQoYmxlbmRUcmVlLnBvc1gsIGJsZW5kVHJlZS5wb3NZKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NJTGVuZ3RoOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0kubGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRUb1Bvc0lMZW5ndGg6bnVtYmVyID0gKGlucHV0TGVuZ3RoIC0gcG9zSUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zSVRvSW5wdXRBbmdsZTpudW1iZXIgPSBCQUJZTE9OLkJsZW5kVHJlZVV0aWxzLkdldFNpZ25lZEFuZ2xlKEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0ksIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX0lQKTtcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0Om51bWJlciA9IDE7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBibGVuZFRyZWVBcnJheS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKLnNldChibGVuZFRyZWVBcnJheVtqXS5wb3NYLCBibGVuZFRyZWVBcnJheVtqXS5wb3NZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc0pMZW5ndGg6bnVtYmVyID0gQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSi5sZW5ndGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF2ZXJhZ2VMZW5ndGhPZklKOm51bWJlciA9IChwb3NJTGVuZ3RoICsgcG9zSkxlbmd0aCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFnT2ZQb3NJVG9JbnB1dFBvczpudW1iZXIgPSAoaW5wdXRUb1Bvc0lMZW5ndGggLyBhdmVyYWdlTGVuZ3RoT2ZJSik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYWdPZklKOm51bWJlciA9IChwb3NKTGVuZ3RoIC0gcG9zSUxlbmd0aCkgLyBhdmVyYWdlTGVuZ3RoT2ZJSjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlSUo6bnVtYmVyID0gQkFCWUxPTi5CbGVuZFRyZWVVdGlscy5HZXRTaWduZWRBbmdsZShCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLCBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQLnNldChtYWdPZlBvc0lUb0lucHV0UG9zLCBwb3NJVG9JbnB1dEFuZ2xlICoga0RpclNjYWxlKTsgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lKLnNldChtYWdPZklKLCBhbmdsZUlKICoga0RpclNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlblNxSUo6bnVtYmVyID0gQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSUoubGVuZ3RoU3F1YXJlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1dlaWdodDpudW1iZXIgPSBCQUJZTE9OLlZlY3RvcjIuRG90KEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQLCBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJSikgLyBsZW5TcUlKO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3V2VpZ2h0ID0gMSAtIG5ld1dlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dlaWdodCA9IEJBQllMT04uQmxlbmRUcmVlVXRpbHMuQ2xhbXBWYWx1ZShuZXdXZWlnaHQsIDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0ID0gTWF0aC5taW4obmV3V2VpZ2h0LCB3ZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJsZW5kVHJlZS53ZWlnaHQgPSB3ZWlnaHQ7XG4gICAgICAgICAgICAgICAgdG90YWxXZWlnaHQgKz0gd2VpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBibGVuZFRyZWUgb2YgYmxlbmRUcmVlQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBibGVuZFRyZWUud2VpZ2h0IC89IHRvdGFsV2VpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ2FsY3VsYXRlMkRGcmVlZm9ybUNhcnRlc2lhbihpbnB1dFg6IG51bWJlciwgaW5wdXRZOiBudW1iZXIsIGJsZW5kVHJlZUFycmF5OiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10pOnZvaWQge1xuICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfSVAuc2V0KGlucHV0WCwgaW5wdXRZKTtcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0kuc2V0KDAsMCk7XG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKLnNldCgwLDApO1xuICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSVAuc2V0KDAsMCk7XG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJSi5zZXQoMCwwKTtcbiAgICAgICAgICAgIGxldCB0b3RhbFdlaWdodDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibGVuZFRyZWVBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZTpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlID0gYmxlbmRUcmVlQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSS5zZXQoYmxlbmRUcmVlLnBvc1gsIGJsZW5kVHJlZS5wb3NZKTtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9JUC5zdWJ0cmFjdFRvUmVmKEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0ksIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQKTtcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0Om51bWJlciA9IDE7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBibGVuZFRyZWVBcnJheS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKLnNldChibGVuZFRyZWVBcnJheVtqXS5wb3NYLCBibGVuZFRyZWVBcnJheVtqXS5wb3NZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0ouc3VidHJhY3RUb1JlZihCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLCBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJSik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5TcUlKOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lKLmxlbmd0aFNxdWFyZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdXZWlnaHQ6bnVtYmVyID0gQkFCWUxPTi5WZWN0b3IyLkRvdChCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJUCwgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSUopIC8gbGVuU3FJSjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dlaWdodCA9IDEgLSBuZXdXZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdXZWlnaHQgPSBCQUJZTE9OLkJsZW5kVHJlZVV0aWxzLkNsYW1wVmFsdWUobmV3V2VpZ2h0LCAwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodCA9IE1hdGgubWluKHdlaWdodCwgbmV3V2VpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBibGVuZFRyZWUud2VpZ2h0ID0gd2VpZ2h0O1xuICAgICAgICAgICAgICAgIHRvdGFsV2VpZ2h0ICs9IHdlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgYmxlbmRUcmVlIG9mIGJsZW5kVHJlZUFycmF5KSB7XG4gICAgICAgICAgICAgICAgYmxlbmRUcmVlLndlaWdodCAvPSB0b3RhbFdlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZW1wVmVjdG9yMl9JUDpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIFRlbXBWZWN0b3IyX1BPU0k6QkFCWUxPTi5WZWN0b3IyID0gbmV3IEJBQllMT04uVmVjdG9yMigwLDApO1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZW1wVmVjdG9yMl9QT1NKOkJBQllMT04uVmVjdG9yMiA9IG5ldyBCQUJZTE9OLlZlY3RvcjIoMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcFZlY3RvcjJfUE9TSVA6QkFCWUxPTi5WZWN0b3IyID0gbmV3IEJBQllMT04uVmVjdG9yMigwLDApO1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZW1wVmVjdG9yMl9QT1NJSjpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1cHBvcnQgQ2xhc3NlcywgRW51bXMgQW5kIEludGVyZmFjZXNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBleHBvcnQgY2xhc3MgTWFjaGluZVN0YXRlIHtcbiAgICAgICAgcHVibGljIGhhc2g6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgbmFtZTpzdHJpbmc7XG4gICAgICAgIHB1YmxpYyB0YWc6c3RyaW5nO1xuICAgICAgICBwdWJsaWMgdGltZTpudW1iZXI7XG4gICAgICAgIHB1YmxpYyB0eXBlOkJBQllMT04uTW90aW9uVHlwZTtcbiAgICAgICAgcHVibGljIHJhdGU6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgbGVuZ3RoOm51bWJlcjtcbiAgICAgICAgcHVibGljIGxheWVyOnN0cmluZztcbiAgICAgICAgcHVibGljIGxheWVySW5kZXg6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgcGxheWVkOm51bWJlcjtcbiAgICAgICAgcHVibGljIG1hY2hpbmU6c3RyaW5nO1xuICAgICAgICBwdWJsaWMgbW90aW9uaWQ6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgaW50ZXJydXB0ZWQ6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIGFwcGFyZW50U3BlZWQ6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgYXZlcmFnZUFuZ3VsYXJTcGVlZDpudW1iZXI7XG4gICAgICAgIHB1YmxpYyBhdmVyYWdlRHVyYXRpb246bnVtYmVyO1xuICAgICAgICBwdWJsaWMgYXZlcmFnZVNwZWVkOm51bWJlcltdO1xuICAgICAgICBwdWJsaWMgY3ljbGVPZmZzZXQ6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgY3ljbGVPZmZzZXRQYXJhbWV0ZXI6c3RyaW5nO1xuICAgICAgICBwdWJsaWMgY3ljbGVPZmZzZXRQYXJhbWV0ZXJBY3RpdmU6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIGlLT25GZWV0OmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBtaXJyb3I6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIG1pcnJvclBhcmFtZXRlcjpzdHJpbmc7XG4gICAgICAgIHB1YmxpYyBtaXJyb3JQYXJhbWV0ZXJBY3RpdmU6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIHNwZWVkOm51bWJlcjtcbiAgICAgICAgcHVibGljIHNwZWVkUGFyYW1ldGVyOnN0cmluZztcbiAgICAgICAgcHVibGljIHNwZWVkUGFyYW1ldGVyQWN0aXZlOmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBibGVuZHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlO1xuICAgICAgICBwdWJsaWMgdHJhbnNpdGlvbnM6QkFCWUxPTi5JVHJhbnNpdGlvbltdO1xuICAgICAgICBwdWJsaWMgYmVoYXZpb3VyczpCQUJZTE9OLklCZWhhdmlvdXJbXTtcbiAgICAgICAgcHVibGljIGV2ZW50czpCQUJZTE9OLklBbmltYXRvckV2ZW50W107XG4gICAgICAgIHB1YmxpYyBjY3VydmVzOkJBQllMT04uSVVuaXR5Q3VydmVbXTtcbiAgICAgICAgcHVibGljIHRjdXJ2ZXM6QkFCWUxPTi5BbmltYXRpb25bXTtcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIFRyYW5zaXRpb25DaGVjayB7XG4gICAgICAgIHB1YmxpYyByZXN1bHQ6c3RyaW5nO1xuICAgICAgICBwdWJsaWMgb2ZmZXN0Om51bWJlcjtcbiAgICAgICAgcHVibGljIGJsZW5kaW5nOm51bWJlcjtcbiAgICAgICAgcHVibGljIHRyaWdnZXJlZDpzdHJpbmdbXTtcbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIEFuaW1hdGlvbk1peGVyIHtcbiAgICAgICAgcHVibGljIGluZmx1ZW5jZUJ1ZmZlcjpudW1iZXI7XG4gICAgICAgIHB1YmxpYyBwb3NpdGlvbkJ1ZmZlcjpCQUJZTE9OLlZlY3RvcjM7XG4gICAgICAgIHB1YmxpYyByb3RhdGlvbkJ1ZmZlcjpCQUJZTE9OLlF1YXRlcm5pb247XG4gICAgICAgIHB1YmxpYyBzY2FsaW5nQnVmZmVyOkJBQllMT04uVmVjdG9yMztcbiAgICAgICAgcHVibGljIG9yaWdpbmFsTWF0cml4OkJBQllMT04uTWF0cml4O1xuICAgICAgICBwdWJsaWMgYmxlbmRpbmdGYWN0b3I6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgYmxlbmRpbmdTcGVlZDpudW1iZXI7XG4gICAgICAgIHB1YmxpYyByb290UG9zaXRpb246QkFCWUxPTi5WZWN0b3IzO1xuICAgICAgICBwdWJsaWMgcm9vdFJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbjtcbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIEJsZW5kaW5nV2VpZ2h0cyB7XG4gICAgICAgIHB1YmxpYyBwcmltYXJ5OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkO1xuICAgICAgICBwdWJsaWMgc2Vjb25kYXJ5OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkO1xuICAgIH1cbiAgICBleHBvcnQgZW51bSBNb3Rpb25UeXBlIHtcbiAgICAgICAgQ2xpcCA9IDAsXG4gICAgICAgIFRyZWUgPSAxXG4gICAgfVxuICAgIGV4cG9ydCBlbnVtIENvbmRpdGlvbk1vZGUge1xuICAgICAgICBJZiA9IDEsXG4gICAgICAgIElmTm90ID0gMixcbiAgICAgICAgR3JlYXRlciA9IDMsXG4gICAgICAgIExlc3MgPSA0LFxuICAgICAgICBFcXVhbHMgPSA2LFxuICAgICAgICBOb3RFcXVhbCA9IDdcbiAgICB9XG4gICAgZXhwb3J0IGVudW0gSW50ZXJydXB0aW9uU291cmNlIHtcbiAgICAgICAgTm9uZSA9IDAsXG4gICAgICAgIFNvdXJjZSA9IDEsXG4gICAgICAgIERlc3RpbmF0aW9uID0gMixcbiAgICAgICAgU291cmNlVGhlbkRlc3RpbmF0aW9uID0gMyxcbiAgICAgICAgRGVzdGluYXRpb25UaGVuU291cmNlID0gNFxuICAgIH1cbiAgICBleHBvcnQgZW51bSBCbGVuZFRyZWVUeXBlIHtcbiAgICAgICAgU2ltcGxlMUQgPSAwLFxuICAgICAgICBTaW1wbGVEaXJlY3Rpb25hbDJEID0gMSxcbiAgICAgICAgRnJlZWZvcm1EaXJlY3Rpb25hbDJEID0gMixcbiAgICAgICAgRnJlZWZvcm1DYXJ0ZXNpYW4yRCA9IDMsXG4gICAgICAgIERpcmVjdCA9IDQsXG4gICAgICAgIENsaXAgPSA1XG4gICAgfVxuICAgIGV4cG9ydCBlbnVtIEJsZW5kVHJlZVBvc2l0aW9uIHtcbiAgICAgICAgTG93ZXIgPSAwLFxuICAgICAgICBVcHBlciA9IDEsXG4gICAgfVxuICAgIGV4cG9ydCBlbnVtIEFuaW1hdG9yUGFyYW1ldGVyVHlwZSB7XG4gICAgICAgIEZsb2F0ID0gMSxcbiAgICAgICAgSW50ID0gMyxcbiAgICAgICAgQm9vbCA9IDQsXG4gICAgICAgIFRyaWdnZXIgPSA5XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdG9yRXZlbnQge1xuICAgICAgICBpZDogbnVtYmVyO1xuICAgICAgICBjbGlwOiBzdHJpbmc7XG4gICAgICAgIHRpbWU6IG51bWJlcjtcbiAgICAgICAgZnVuY3Rpb246IHN0cmluZztcbiAgICAgICAgaW50UGFyYW1ldGVyOiBudW1iZXI7XG4gICAgICAgIGZsb2F0UGFyYW1ldGVyOiBudW1iZXI7XG4gICAgICAgIHN0cmluZ1BhcmFtZXRlcjogc3RyaW5nO1xuICAgICAgICBvYmplY3RJZFBhcmFtZXRlcjogc3RyaW5nO1xuICAgICAgICBvYmplY3ROYW1lUGFyYW1ldGVyOiBzdHJpbmc7XG4gICAgfSAgICBcbiAgICBleHBvcnQgaW50ZXJmYWNlIElBdmF0YXJNYXNrIHtcbiAgICAgICAgaGFzaDpudW1iZXI7XG4gICAgICAgIG1hc2tOYW1lOnN0cmluZztcbiAgICAgICAgbWFza1R5cGU6c3RyaW5nO1xuICAgICAgICB0cmFuc2Zvcm1Db3VudDpudW1iZXI7XG4gICAgICAgIHRyYW5zZm9ybVBhdGhzOnN0cmluZ1tdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElBbmltYXRpb25MYXllciB7XG4gICAgICAgIGhhc2g6bnVtYmVyO1xuICAgICAgICBuYW1lOnN0cmluZztcbiAgICAgICAgaW5kZXg6bnVtYmVyO1xuICAgICAgICBlbnRyeTpzdHJpbmc7XG4gICAgICAgIG1hY2hpbmU6c3RyaW5nO1xuICAgICAgICBpS1Bhc3M6Ym9vbGVhbjtcbiAgICAgICAgYXZhdGFyTWFzazpCQUJZTE9OLklBdmF0YXJNYXNrO1xuICAgICAgICBibGVuZGluZ01vZGU6bnVtYmVyO1xuICAgICAgICBkZWZhdWx0V2VpZ2h0Om51bWJlcjtcbiAgICAgICAgc3luY2VkTGF5ZXJJbmRleDpudW1iZXI7XG4gICAgICAgIHN5bmNlZExheWVyQWZmZWN0c1RpbWluZzpib29sZWFuO1xuICAgICAgICBhbmltYXRpb25UaW1lOm51bWJlcjtcbiAgICAgICAgYW5pbWF0aW9uTm9ybWFsOm51bWJlcjtcbiAgICAgICAgYW5pbWF0aW9uTWFza01hcDpNYXA8c3RyaW5nLCBudW1iZXI+O1xuICAgICAgICBhbmltYXRpb25GaXJzdFJ1bjpib29sZWFuO1xuICAgICAgICBhbmltYXRpb25FbmRGcmFtZTpib29sZWFuO1xuICAgICAgICBhbmltYXRpb25Mb29wRnJhbWU6Ym9vbGVhbjtcbiAgICAgICAgYW5pbWF0aW9uTG9vcENvdW50Om51bWJlcjsgICAgICAgIFxuICAgICAgICBhbmltYXRpb25Mb29wRXZlbnRzOmFueTtcbiAgICAgICAgYW5pbWF0aW9uU3RhdGVNYWNoaW5lOkJBQllMT04uTWFjaGluZVN0YXRlO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElBbmltYXRpb25DdXJ2ZSB7XG4gICAgICAgIGxlbmd0aDpudW1iZXI7XG4gICAgICAgIHByZVdyYXBNb2RlOnN0cmluZztcbiAgICAgICAgcG9zdFdyYXBNb2RlOnN0cmluZztcbiAgICAgICAga2V5ZnJhbWVzOkJBQllMT04uSUFuaW1hdGlvbktleWZyYW1lW107XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGlvbktleWZyYW1lIHtcbiAgICAgICAgdGltZTpudW1iZXI7XG4gICAgICAgIHZhbHVlOm51bWJlcjtcbiAgICAgICAgaW5UYW5nZW50Om51bWJlcjtcbiAgICAgICAgb3V0VGFuZ2VudDpudW1iZXI7XG4gICAgICAgIHRhbmdlbnRNb2RlOm51bWJlcjtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJQmVoYXZpb3VyIHtcbiAgICAgICAgaGFzaDpudW1iZXI7XG4gICAgICAgIG5hbWU6c3RyaW5nO1xuICAgICAgICBsYXllckluZGV4Om51bWJlcjtcbiAgICAgICAgcHJvcGVydGllczphbnk7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zaXRpb24ge1xuICAgICAgICBoYXNoOm51bWJlcjtcbiAgICAgICAgYW55U3RhdGU6Ym9vbGVhbjtcbiAgICAgICAgbGF5ZXJJbmRleDpudW1iZXI7XG4gICAgICAgIG1hY2hpbmVMYXllcjpzdHJpbmc7ICAgICAgICBcbiAgICAgICAgbWFjaGluZU5hbWU6c3RyaW5nOyAgICAgICAgXG4gICAgICAgIGNhblRyYW5zaXRpb25Ub1NlbGY6Ym9vbGVhbjtcbiAgICAgICAgZGVzdGluYXRpb246c3RyaW5nO1xuICAgICAgICBkdXJhdGlvbjpudW1iZXI7XG4gICAgICAgIGV4aXRUaW1lOm51bWJlcjtcbiAgICAgICAgaGFzRXhpdFRpbWU6Ym9vbGVhbjtcbiAgICAgICAgZml4ZWREdXJhdGlvbjpib29sZWFuO1xuICAgICAgICBpbnRTb3VyY2U6QkFCWUxPTi5JbnRlcnJ1cHRpb25Tb3VyY2U7XG4gICAgICAgIGlzRXhpdDpib29sZWFuO1xuICAgICAgICBtdXRlOmJvb2xlYW47XG4gICAgICAgIG5hbWU6c3RyaW5nO1xuICAgICAgICBvZmZzZXQ6bnVtYmVyO1xuICAgICAgICBvcmRlcmVkSW50OmJvb2xlYW47XG4gICAgICAgIHNvbG86Ym9vbGVhbjtcbiAgICAgICAgY29uZGl0aW9uczpCQUJZTE9OLklDb25kaXRpb25bXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29uZGl0aW9uIHtcbiAgICAgICAgaGFzaDpudW1iZXI7XG4gICAgICAgIG1vZGU6QkFCWUxPTi5Db25kaXRpb25Nb2RlO1xuICAgICAgICBwYXJhbWV0ZXI6c3RyaW5nO1xuICAgICAgICB0aHJlc2hvbGQ6bnVtYmVyO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElCbGVuZFRyZWUge1xuICAgICAgICBoYXNoOm51bWJlcjtcbiAgICAgICAgbmFtZTpzdHJpbmc7XG4gICAgICAgIHN0YXRlOnN0cmluZztcbiAgICAgICAgY2hpbGRyZW46QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXTtcbiAgICAgICAgbGF5ZXJJbmRleDpudW1iZXI7XG4gICAgICAgIGFwcGFyZW50U3BlZWQ6bnVtYmVyO1xuICAgICAgICBhdmVyYWdlQW5ndWxhclNwZWVkOm51bWJlcjtcbiAgICAgICAgYXZlcmFnZUR1cmF0aW9uOm51bWJlcjtcbiAgICAgICAgYXZlcmFnZVNwZWVkOm51bWJlcltdO1xuICAgICAgICBibGVuZFBhcmFtZXRlclg6c3RyaW5nO1xuICAgICAgICBibGVuZFBhcmFtZXRlclk6c3RyaW5nO1xuICAgICAgICBibGVuZFR5cGU6QkFCWUxPTi5CbGVuZFRyZWVUeXBlO1xuICAgICAgICBpc0FuaW1hdG9yTW90aW9uOmJvb2xlYW47XG4gICAgICAgIGlzSHVtYW5Nb3Rpb246Ym9vbGVhbjtcbiAgICAgICAgaXNMb29waW5nOmJvb2xlYW47XG4gICAgICAgIG1pblRocmVzaG9sZDpudW1iZXI7XG4gICAgICAgIG1heFRocmVzaG9sZDpudW1iZXI7XG4gICAgICAgIHVzZUF1dG9tYXRpY1RocmVzaG9sZHM6Ym9vbGVhbjtcbiAgICAgICAgdmFsdWVQYXJhbWV0ZXJYOm51bWJlcjtcbiAgICAgICAgdmFsdWVQYXJhbWV0ZXJZOm51bWJlcjtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJQmxlbmRUcmVlQ2hpbGQge1xuICAgICAgICBoYXNoOm51bWJlcjtcbiAgICAgICAgbGF5ZXJJbmRleDpudW1iZXI7XG4gICAgICAgIGN5Y2xlT2Zmc2V0Om51bWJlcjtcbiAgICAgICAgZGlyZWN0QmxlbmRQYXJhbWV0ZXI6c3RyaW5nO1xuICAgICAgICBhcHBhcmVudFNwZWVkOm51bWJlcjtcbiAgICAgICAgYXZlcmFnZUFuZ3VsYXJTcGVlZDpudW1iZXI7XG4gICAgICAgIGF2ZXJhZ2VEdXJhdGlvbjpudW1iZXI7XG4gICAgICAgIGF2ZXJhZ2VTcGVlZDpudW1iZXJbXTtcbiAgICAgICAgbWlycm9yOmJvb2xlYW47XG4gICAgICAgIHR5cGU6QkFCWUxPTi5Nb3Rpb25UeXBlO1xuICAgICAgICBtb3Rpb246c3RyaW5nO1xuICAgICAgICBwb3NpdGlvblg6bnVtYmVyO1xuICAgICAgICBwb3NpdGlvblk6bnVtYmVyO1xuICAgICAgICB0aHJlc2hvbGQ6bnVtYmVyO1xuICAgICAgICB0aW1lc2NhbGU6bnVtYmVyO1xuICAgICAgICBzdWJ0cmVlOiBCQUJZTE9OLklCbGVuZFRyZWU7XG4gICAgICAgIHdlaWdodDpudW1iZXI7XG4gICAgICAgIHJhdGlvOm51bWJlcjtcbiAgICAgICAgdHJhY2s6QkFCWUxPTi5BbmltYXRpb25Hcm91cDtcbiAgICB9XG59IiwibW9kdWxlIEJBQllMT04ge1xuICAgIC8qKlxuICAgICAqIEJhYnlsb24gYXVkaW8gc291cmNlIG1hbmFnZXIgcHJvIGNsYXNzXG4gICAgICogQGNsYXNzIEF1ZGlvU291cmNlIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXG4gICAgICovXG4gICAgZXhwb3J0IGNsYXNzIEF1ZGlvU291cmNlIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQgaW1wbGVtZW50cyBCQUJZTE9OLklBc3NldFByZWxvYWRlciB7XG4gICAgICAgIHByaXZhdGUgX2F1ZGlvOkJBQllMT04uU291bmQgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9uYW1lOnN0cmluZyA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2xvb3A6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9tdXRlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfcGl0Y2g6bnVtYmVyID0gMTtcbiAgICAgICAgcHJpdmF0ZSBfdm9sdW1lOm51bWJlciA9IDE7XG4gICAgICAgIHByaXZhdGUgX3ByZWxvYWQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9wcmlvcml0eTpudW1iZXIgPSAxMjg7XG4gICAgICAgIHByaXZhdGUgX3BhbnN0ZXJlbzpudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIF9taW5kaXN0YW5jZTpudW1iZXIgPSAxO1xuICAgICAgICBwcml2YXRlIF9tYXhkaXN0YW5jZTpudW1iZXIgPSA1MDtcbiAgICAgICAgcHJpdmF0ZSBfcm9sbG9mZm1vZGU6c3RyaW5nID0gXCJsaW5lYXJcIjtcbiAgICAgICAgcHJpdmF0ZSBfcm9sbG9mZmZhY3RvcjpudW1iZXIgPSAxO1xuICAgICAgICBwcml2YXRlIF9wbGF5b25hd2FrZTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHJpdmF0ZSBfc3BhdGlhbGJsZW5kOm51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX3ByZWxvYWRlclVybDpzdHJpbmcgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9yZXZlcmJ6b25lbWl4Om51bWJlciA9IDE7XG4gICAgICAgIHByaXZhdGUgX2xhc3RtdXRlZHZvbHVtZTpudW1iZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ieXBhc3NlZmZlY3RzOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfYnlwYXNzcmV2ZXJiem9uZXM6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9ieXBhc3NsaXN0ZW5lcmVmZmVjdHM6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2U6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwdWJsaWMgZ2V0U291bmRDbGlwKCk6QkFCWUxPTi5Tb3VuZCB7IHJldHVybiB0aGlzLl9hdWRpbzsgfVxuICAgICAgICBwdWJsaWMgZ2V0QXVkaW9FbGVtZW50KCk6SFRNTEF1ZGlvRWxlbWVudCB7IHJldHVybiAodGhpcy5fYXVkaW8gIT0gbnVsbCkgPyAoPGFueT50aGlzLl9hdWRpbykuX2h0bWxBdWRpb0VsZW1lbnQgOiBudWxsIH1cbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYXVkaW8gY2xpcCBpcyByZWFkeSAqL1xuICAgICAgICBwdWJsaWMgb25SZWFkeU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uU291bmQ+KCk7XG5cbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6dm9pZCB7IHRoaXMuYXdha2VBdWRpb1NvdXJjZSgpOyB9XG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQgeyB0aGlzLmRlc3Ryb3lBdWRpb1NvdXJjZSgpOyB9XG4gICAgICAgIFxuICAgICAgICBwcm90ZWN0ZWQgYXdha2VBdWRpb1NvdXJjZSgpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5fbmFtZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJuYW1lXCIsIHRoaXMuX25hbWUpO1xuICAgICAgICAgICAgdGhpcy5fbG9vcCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJsb29wXCIsIHRoaXMuX2xvb3ApO1xuICAgICAgICAgICAgdGhpcy5fbXV0ZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtdXRlXCIsIHRoaXMuX211dGUpO1xuICAgICAgICAgICAgdGhpcy5fcGl0Y2ggPSB0aGlzLmdldFByb3BlcnR5KFwicGl0Y2hcIiwgdGhpcy5fcGl0Y2gpO1xuICAgICAgICAgICAgdGhpcy5fdm9sdW1lID0gdGhpcy5nZXRQcm9wZXJ0eShcInZvbHVtZVwiLCB0aGlzLl92b2x1bWUpO1xuICAgICAgICAgICAgdGhpcy5fcHJlbG9hZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwcmVsb2FkXCIsIHRoaXMuX3ByZWxvYWQpO1xuICAgICAgICAgICAgdGhpcy5fcHJpb3JpdHkgPSB0aGlzLmdldFByb3BlcnR5KFwicHJpb3JpdHlcIiwgdGhpcy5fcHJpb3JpdHkpO1xuICAgICAgICAgICAgdGhpcy5fcGFuc3RlcmVvID0gdGhpcy5nZXRQcm9wZXJ0eShcInBhbnN0ZXJlb1wiLCB0aGlzLl9wYW5zdGVyZW8pO1xuICAgICAgICAgICAgdGhpcy5fcGxheW9uYXdha2UgPSB0aGlzLmdldFByb3BlcnR5KFwicGxheW9uYXdha2VcIiwgdGhpcy5fcGxheW9uYXdha2UpO1xuICAgICAgICAgICAgdGhpcy5fbWluZGlzdGFuY2UgPSB0aGlzLmdldFByb3BlcnR5KFwibWluZGlzdGFuY2VcIiwgdGhpcy5fbWluZGlzdGFuY2UpO1xuICAgICAgICAgICAgdGhpcy5fbWF4ZGlzdGFuY2UgPSB0aGlzLmdldFByb3BlcnR5KFwibWF4ZGlzdGFuY2VcIiwgdGhpcy5fbWF4ZGlzdGFuY2UpO1xuICAgICAgICAgICAgdGhpcy5fcm9sbG9mZm1vZGUgPSB0aGlzLmdldFByb3BlcnR5KFwicm9sbG9mZm1vZGVcIiwgdGhpcy5fcm9sbG9mZm1vZGUpO1xuICAgICAgICAgICAgdGhpcy5fcm9sbG9mZmZhY3RvciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyb2xsb2ZmZmFjdG9yXCIsIHRoaXMuX3JvbGxvZmZmYWN0b3IpO1xuICAgICAgICAgICAgdGhpcy5fc3BhdGlhbGJsZW5kID0gdGhpcy5nZXRQcm9wZXJ0eShcInNwYXRpYWxibGVuZFwiLCB0aGlzLl9zcGF0aWFsYmxlbmQpO1xuICAgICAgICAgICAgdGhpcy5fcmV2ZXJiem9uZW1peCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZXZlcmJ6b25lbWl4XCIsIHRoaXMuX3JldmVyYnpvbmVtaXgpO1xuICAgICAgICAgICAgdGhpcy5fYnlwYXNzZWZmZWN0cyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJieXBhc3NlZmZlY3RzXCIsIHRoaXMuX2J5cGFzc2VmZmVjdHMpO1xuICAgICAgICAgICAgdGhpcy5fYnlwYXNzcmV2ZXJiem9uZXMgPSB0aGlzLmdldFByb3BlcnR5KFwiYnlwYXNzcmV2ZXJiem9uZXNcIiwgdGhpcy5fYnlwYXNzcmV2ZXJiem9uZXMpO1xuICAgICAgICAgICAgdGhpcy5fYnlwYXNzbGlzdGVuZXJlZmZlY3RzID0gdGhpcy5nZXRQcm9wZXJ0eShcImJ5cGFzc2xpc3RlbmVyZWZmZWN0c1wiLCB0aGlzLl9ieXBhc3NsaXN0ZW5lcmVmZmVjdHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX25hbWUgPT0gbnVsbCB8fCB0aGlzLl9uYW1lID09PSBcIlwiKSB0aGlzLl9uYW1lID0gXCJVbmtub3duXCI7XG4gICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgY29uc3QgZmlsZW5hbWU6c3RyaW5nID0gdGhpcy5nZXRQcm9wZXJ0eShcImZpbGVcIik7XG4gICAgICAgICAgICBpZiAoZmlsZW5hbWUgIT0gbnVsbCAmJiBmaWxlbmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RVcmw6c3RyaW5nID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Um9vdFVybCh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5VXJsID0gKHJvb3RVcmwgKyBmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXlVcmwgIT0gbnVsbCAmJiBwbGF5VXJsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmVsb2FkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmVsb2FkZXJVcmwgPSBwbGF5VXJsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhU291cmNlKHBsYXlVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95QXVkaW9Tb3VyY2UoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hdWRpby5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSByZWFkeSBzdGF0dXMgZm9yIHRyYWNrXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgaXNSZWFkeSgpOmJvb2xlYW4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2F1ZGlvLmlzUmVhZHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHBsYXlpbmcgc3RhdHVzIGZvciB0cmFja1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGlzUGxheWluZygpOmJvb2xlYW4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2F1ZGlvLmlzUGxheWluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHBhdXNlZCBzdGF0dXMgZm9yIHRyYWNrXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgaXNQYXVzZWQoKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hdWRpby5pc1BhdXNlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYXkgdGhlIHNvdW5kIHRyYWNrXG4gICAgICAgICAqIEBwYXJhbSB0aW1lIChvcHRpb25hbCkgU3RhcnQgdGhlIHNvdW5kIGFmdGVyIFggc2Vjb25kcy4gU3RhcnQgaW1tZWRpYXRlbHkgKDApIGJ5IGRlZmF1bHQuXG4gICAgICAgICAqIEBwYXJhbSBvZmZzZXQgKG9wdGlvbmFsKSBTdGFydCB0aGUgc291bmQgYXQgYSBzcGVjaWZpYyB0aW1lIGluIHNlY29uZHNcbiAgICAgICAgICogQHBhcmFtIGxlbmd0aCAob3B0aW9uYWwpIFNvdW5kIGR1cmF0aW9uIChpbiBzZWNvbmRzKVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHBsYXkodGltZT86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBsZW5ndGg/OiBudW1iZXIpOmJvb2xlYW4ge1xuICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLkhhc0F1ZGlvQ29udGV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFBsYXkodGltZSwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkVuZ2luZS5hdWRpb0VuZ2luZS5vbkF1ZGlvVW5sb2NrZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCk9PnsgdGhpcy5pbnRlcm5hbFBsYXkodGltZSwgb2Zmc2V0LCBsZW5ndGgpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgaW50ZXJuYWxQbGF5KHRpbWU/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgbGVuZ3RoPzogbnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkUmVhZHlJbnN0YW5jZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpby5wbGF5KHRpbWUsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLmFkZE9uY2UoKCk9PnsgdGhpcy5fYXVkaW8ucGxheSh0aW1lLCBvZmZzZXQsIGxlbmd0aCk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogUGF1c2UgdGhlIHNvdW5kIHRyYWNrXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgcGF1c2UoKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hdWRpby5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9wIHRoZSBzb3VuZCB0cmFja1xuICAgICAgICAgKiBAcGFyYW0gdGltZSAob3B0aW9uYWwpIFN0YXJ0IHRoZSBzb3VuZCBhZnRlciBYIHNlY29uZHMuIFN0YXJ0IGltbWVkaWF0ZWx5ICgwKSBieSBkZWZhdWx0LlxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHN0b3AodGltZT86IG51bWJlcik6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc3RvcCh0aW1lKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogTXV0ZSB0aGUgc291bmQgdHJhY2tcbiAgICAgICAgICogQHBhcmFtIHRpbWUgKG9wdGlvbmFsKSBNdXRlIHRoZSBzb3VuZCBhZnRlciBYIHNlY29uZHMuIFN0YXJ0IGltbWVkaWF0ZWx5ICgwKSBieSBkZWZhdWx0LlxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIG11dGUodGltZT86IG51bWJlcik6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdG11dGVkdm9sdW1lID0gdGhpcy5fYXVkaW8uZ2V0Vm9sdW1lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0Vm9sdW1lKDAsIHRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVW5tdXRlIHRoZSBzb3VuZCB0cmFja1xuICAgICAgICAgKiBAcGFyYW0gdGltZSAob3B0aW9uYWwpIFVubXV0ZSB0aGUgc291bmQgYWZ0ZXIgWCBzZWNvbmRzLiBTdGFydCBpbW1lZGlhdGVseSAoMCkgYnkgZGVmYXVsdC5cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyB1bm11dGUodGltZT86IG51bWJlcik6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RtdXRlZHZvbHVtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnNldFZvbHVtZSh0aGlzLl9sYXN0bXV0ZWR2b2x1bWUsIHRpbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0bXV0ZWR2b2x1bWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHZvbHVtZSBvZiB0aGUgdHJhY2tcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBnZXRWb2x1bWUoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYXVkaW8uZ2V0Vm9sdW1lKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3ZvbHVtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHZvbHVtZSBvZiB0aGUgdHJhY2tcbiAgICAgICAgICogQHBhcmFtIHZvbHVtZSBEZWZpbmUgdGhlIG5ldyB2b2x1bWUgb2YgdGhlIHNvdW5kXG4gICAgICAgICAqIEBwYXJhbSB0aW1lIERlZmluZSB0aW1lIGZvciBncmFkdWFsIGNoYW5nZSB0byBuZXcgdm9sdW1lXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyLCB0aW1lPzogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0Vm9sdW1lKHRoaXMuX3ZvbHVtZSwgdGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgc3BhdGlhbCBzb3VuZCBvcHRpb24gb2YgdGhlIHRyYWNrXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgZ2V0U3BhdGlhbFNvdW5kKCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2F1ZGlvLnNwYXRpYWxTb3VuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHNwYXRpYWwgc291bmQgb3B0aW9uIG9mIHRoZSB0cmFja1xuICAgICAgICAgKiBAcGFyYW0gdmFsdWUgRGVmaW5lIHRoZSB2YWx1ZSBvZiB0aGUgc3BhdGlhbCBzb3VuZFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldFNwYXRpYWxTb3VuZCh2YWx1ZTpib29sZWFuKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnNwYXRpYWxTb3VuZCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBzb3VuZCB0cmFjayBwbGF5YmFjayBzcGVlZFxuICAgICAgICAgKiBAcGFyYW0gcmF0ZSB0aGUgYXVkaW8gcGxheWJhY2sgcmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldFBsYXliYWNrU3BlZWQocmF0ZTogbnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0UGxheWJhY2tSYXRlKHJhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHRpbWUgb2YgdGhlIHRyYWNrXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgZ2V0Q3VycmVudFRyYWNrVGltZSgpOiBudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hdWRpby5jdXJyZW50VGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldCBhdWRpbyBkYXRhIHNvdXJjZSAqL1xuICAgICAgICBwdWJsaWMgc2V0RGF0YVNvdXJjZShzb3VyY2U6c3RyaW5nfEFycmF5QnVmZmVyfE1lZGlhU3RyZWFtKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNwYXRpYWxCbGVuZDpib29sZWFuID0gKHRoaXMuX3NwYXRpYWxibGVuZCA+PSAwLjEpO1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VNb2RlbDpzdHJpbmcgPSAodGhpcy5fcm9sbG9mZm1vZGUgPT09IFwibG9nYXJpdGhtaWNcIikgPyBcImV4cG9uZW50aWFsXCIgOiBcImxpbmVhclwiO1xuICAgICAgICAgICAgY29uc3QgaHRtbEF1ZGlvRWxlbWVudFJlcXVpcmVkOmJvb2xlYW4gPSAodGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS52dHQgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS52dHQgPT09IHRydWUpO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWRSZWFkeUluc3RhbmNlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9hdWRpbyA9IG5ldyBCQUJZTE9OLlNvdW5kKHRoaXMuX25hbWUsIHNvdXJjZSwgdGhpcy5zY2VuZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RtdXRlZHZvbHVtZSA9IHRoaXMuX3ZvbHVtZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hdWRpby5zZXRWb2x1bWUoKHRoaXMuX211dGUgPT09IHRydWUpID8gMCA6IHRoaXMuX3ZvbHVtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0UGxheWJhY2tSYXRlKHRoaXMuX3BpdGNoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPSB0cnVlOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25SZWFkeU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblJlYWR5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy5fYXVkaW8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgQXV0byBQbGF5IE9uIEF3YWtlXG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGxheW9uYXdha2UgPT09IHRydWUpIHRoaXMucGxheSgpO1xuICAgICAgICAgICAgfSwgeyBcbiAgICAgICAgICAgICAgICBsb29wOiB0aGlzLl9sb29wLCBcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsIC8vIE5vdGU6IE5ldmVyIEF1dG8gUGxheSBIZXJlIFxuICAgICAgICAgICAgICAgIHJlZkRpc3RhbmNlOiB0aGlzLl9taW5kaXN0YW5jZSwgXG4gICAgICAgICAgICAgICAgbWF4RGlzdGFuY2U6IHRoaXMuX21heGRpc3RhbmNlLFxuICAgICAgICAgICAgICAgIHJvbGxvZmZGYWN0b3I6IHRoaXMuX3JvbGxvZmZmYWN0b3IsXG4gICAgICAgICAgICAgICAgc3BhdGlhbFNvdW5kOiBzcGF0aWFsQmxlbmQsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VNb2RlbDogZGlzdGFuY2VNb2RlbCxcbiAgICAgICAgICAgICAgICBzdHJlYW1pbmc6IGh0bWxBdWRpb0VsZW1lbnRSZXF1aXJlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9hdWRpby5zZXRQb3NpdGlvbih0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jbG9uZSgpKTtcbiAgICAgICAgICAgIGlmIChzcGF0aWFsQmxlbmQgPT09IHRydWUpIHRoaXMuX2F1ZGlvLmF0dGFjaFRvTWVzaCh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEFkZCBhdWRpbyBwcmVsb2FkZXIgYXNzZXQgdGFza3MgKGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZGl2aW5nRGVlcGVyL2ltcG9ydGVycy9hc3NldE1hbmFnZXIpICovXG4gICAgICAgIHB1YmxpYyBhZGRQcmVsb2FkZXJUYXNrcyhhc3NldHNNYW5hZ2VyOkJBQllMT04uUHJlbG9hZEFzc2V0c01hbmFnZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByZWxvYWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhc3NldFRhc2s6QkFCWUxPTi5CaW5hcnlGaWxlQXNzZXRUYXNrID0gYXNzZXRzTWFuYWdlci5hZGRCaW5hcnlGaWxlVGFzaygodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLkF1ZGlvVGFza1wiKSwgdGhpcy5fcHJlbG9hZGVyVXJsKTtcbiAgICAgICAgICAgICAgICBhc3NldFRhc2sub25TdWNjZXNzID0gKHRhc2s6QkFCWUxPTi5CaW5hcnlGaWxlQXNzZXRUYXNrKSA9PiB7IHRoaXMuc2V0RGF0YVNvdXJjZSh0YXNrLmRhdGEpOyB9O1xuICAgICAgICAgICAgICAgIGFzc2V0VGFzay5vbkVycm9yID0gKHRhc2s6IEJBQllMT04uQmluYXJ5RmlsZUFzc2V0VGFzaywgbWVzc2FnZT86IHN0cmluZywgZXhjZXB0aW9uPzogYW55KSA9PiB7IGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXhjZXB0aW9uKTsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgQkFCWUxPTiB7XG4gICAgLyoqXG4gICAgICogQmFieWxvbiBraW5lbWF0aWMgY2hhcmFjdGVyIGNvbnRyb2xsZXIgcHJvIGNsYXNzIChOYXRpdmUgQnVsbGV0IFBoeXNpY3MgMi44MilcbiAgICAgKiBAY2xhc3MgQ2hhcmFjdGVyQ29udHJvbGxlciAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJDb250cm9sbGVyIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xuICAgICAgICBwcml2YXRlIF9hYnN0cmFjdE1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9hdmF0YXJSYWRpdXM6bnVtYmVyID0gMC41O1xuICAgICAgICBwcml2YXRlIF9hdmF0YXJIZWlnaHQ6bnVtYmVyID0gMjtcbiAgICAgICAgcHJpdmF0ZSBfY2VudGVyT2Zmc2V0OkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICBwcml2YXRlIF9zbG9wZUxpbWl0Om51bWJlciA9IDQ1O1xuICAgICAgICBwcml2YXRlIF9za2luV2lkdGg6bnVtYmVyID0gMC4wODtcbiAgICAgICAgcHJpdmF0ZSBfc3RlcE9mZnNldDpudW1iZXIgPSAwLjM7ICAgLy8gU2VlIGh0dHBzOi8vZGlzY291cnNlLnRocmVlanMub3JnL3QvYW1tby1qcy13aXRoLXRocmVlLWpzLzEyNTMwLzQ3IChXb3JrcyBCZXN0IFdpdGggMC41MzUgYW5kIEJveCBPciBDeWxpbmRlciBTaGFwZSAtID8/PylcbiAgICAgICAgcHJpdmF0ZSBfY2Fwc3VsZVNlZ21lbnRzOm51bWJlciA9IDE2O1xuICAgICAgICBwcml2YXRlIF9taW5Nb3ZlRGlzdGFuY2U6bnVtYmVyID0gMC4wMDE7XG4gICAgICAgIHByaXZhdGUgX2lzUGh5c2ljc1JlYWR5OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfbWF4Q29sbGlzaW9uczpudW1iZXIgPSA0O1xuICAgICAgICBwcml2YXRlIF9jcmVhdGVDeWxpbmRlclNoYXBlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfbW92ZW1lbnRWZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfdG1wUG9zaXRpb25CdWZmZXI6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgIHByaXZhdGUgX3RtcENvbGxpc2lvbkNvbnRhY3RzOkNvbGxpc2lvbkNvbnRhY3RJbmZvW10gPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyB1cGRhdGVQb3NpdGlvbjpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHVibGljIHN5bmNHaG9zdFRvVHJhbnNmb3JtOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgcHJlQ3JlYXRlQ3lsaW5kZXJTaGFwZSgpOnZvaWQgeyB0aGlzLl9jcmVhdGVDeWxpbmRlclNoYXBlID0gdHJ1ZTsgfVxuICAgICAgICBwdWJsaWMgZ2V0SW50ZXJuYWxDaGFyYWN0ZXIoKTphbnkgeyByZXR1cm4gdGhpcy5tX2NoYXJhY3RlcjsgfVxuICAgICAgICBwdWJsaWMgZ2V0Q29sbGlzaW9uU2hhcGUoKTphbnkgeyByZXR1cm4gdGhpcy5tX2dob3N0U2hhcGU7IH1cbiAgICAgICAgcHVibGljIGdldEF2YXRhclJhZGl1cygpOm51bWJlciB7IHJldHVybiB0aGlzLl9hdmF0YXJSYWRpdXM7IH1cbiAgICAgICAgcHVibGljIGdldEF2YXRhckhlaWdodCgpOm51bWJlciB7IHJldHVybiB0aGlzLl9hdmF0YXJIZWlnaHQ7IH1cbiAgICAgICAgcHVibGljIGdldFNraW5XaWR0aCgpOm51bWJlciB7IHJldHVybiB0aGlzLl9za2luV2lkdGg7IH1cbiAgICAgICAgcHVibGljIGdldFN0ZXBPZmZzZXQoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5fc3RlcE9mZnNldDsgfVxuICAgICAgICBwdWJsaWMgZ2V0Q2VudGVyT2Zmc2V0KCk6QkFCWUxPTi5WZWN0b3IzIHsgcmV0dXJuIHRoaXMuX2NlbnRlck9mZnNldDsgfVxuICAgICAgICBwdWJsaWMgZ2V0Q2Fwc3VsZVNpemUoKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5tX2NhcHN1bGVTaXplOyB9XG4gICAgICAgIHB1YmxpYyBnZXRNaW5Nb3ZlRGlzdGFuY2UoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5fbWluTW92ZURpc3RhbmNlOyB9XG4gICAgICAgIHB1YmxpYyBzZXRNaW5Nb3ZlRGlzdGFuY2UoZGlzdGFuY2U6bnVtYmVyKTp2b2lkIHsgdGhpcy5fbWluTW92ZURpc3RhbmNlID0gZGlzdGFuY2U7IH1cbiAgICAgICAgcHVibGljIGdldFZlcnRpY2FsVmVsb2NpdHkoKTpudW1iZXIgeyByZXR1cm4gKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCAmJiB0aGlzLm1fY2hhcmFjdGVyLmdldFZlcnRpY2FsVmVsb2NpdHkpID8gdGhpcy5tX2NoYXJhY3Rlci5nZXRWZXJ0aWNhbFZlbG9jaXR5KCkgOiAwOyB9IC8vIE5vdGU6IFRvb2xraXQgQWRkb24gRnVuY3Rpb25cbiAgICAgICAgcHVibGljIGdldEFkZGVkTWFyZ2luKCk6bnVtYmVyIHsgcmV0dXJuICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwgJiYgdGhpcy5tX2NoYXJhY3Rlci5nZXRBZGRlZE1hcmdpbikgPyB0aGlzLm1fY2hhcmFjdGVyLmdldEFkZGVkTWFyZ2luKCkgOiAwOyB9IC8vIE5vdGU6IFRvb2xraXQgQWRkb24gRnVuY3Rpb25cbiAgICAgICAgcHVibGljIHNldEFkZGVkTWFyZ2luKG1hcmdpbjpudW1iZXIpOnZvaWQgeyBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsICYmIHRoaXMubV9jaGFyYWN0ZXIuZ2V0QWRkZWRNYXJnaW4pIHRoaXMubV9jaGFyYWN0ZXIuc2V0QWRkZWRNYXJnaW4obWFyZ2luKTsgfSAvLyBOb3RlOiBUb29sa2l0IEFkZG9uIEZ1bmN0aW9uXG4gICAgICAgIHB1YmxpYyBzZXRNYXhKdW1wSGVpZ2h0KG1heEp1bXBIZWlnaHQ6bnVtYmVyKTp2b2lkIHsgaWYgKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgdGhpcy5tX2NoYXJhY3Rlci5zZXRNYXhKdW1wSGVpZ2h0KG1heEp1bXBIZWlnaHQpOyB9XG4gICAgICAgIHB1YmxpYyBzZXRGYWxsaW5nU3BlZWQoZmFsbFNwZWVkOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0RmFsbFNwZWVkKGZhbGxTcGVlZCk7IH1cbiAgICAgICAgcHVibGljIGdldFNsb3BlTGltaXQoKTpudW1iZXIgeyByZXR1cm4gKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgPyB0aGlzLm1fY2hhcmFjdGVyLmdldE1heFNsb3BlKCkgOiAwOyB9XG4gICAgICAgIHB1YmxpYyBzZXRTbG9wZUxpbWl0KHNsb3BlUmFkaWFuczpudW1iZXIpOnZvaWQgeyBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSB0aGlzLm1fY2hhcmFjdGVyLnNldE1heFNsb3BlKHNsb3BlUmFkaWFucyk7IH1cbiAgICAgICAgcHVibGljIHNldFVwQXhpcyhheGlzOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0VXBBeGlzKGF4aXMpOyB9XG4gICAgICAgIHB1YmxpYyBnZXRHcmF2aXR5KCk6bnVtYmVyIHsgcmV0dXJuICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpID8gdGhpcy5tX2NoYXJhY3Rlci5nZXRHcmF2aXR5KCkgOiAwOyB9XG4gICAgICAgIHB1YmxpYyBzZXRHcmF2aXR5KGdyYXZpdHk6bnVtYmVyKTp2b2lkIHsgaWYgKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgdGhpcy5tX2NoYXJhY3Rlci5zZXRHcmF2aXR5KGdyYXZpdHkpOyB9XG4gICAgICAgIHB1YmxpYyBpc0dyb3VuZGVkKCk6Ym9vbGVhbiB7IHJldHVybiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSA/IHRoaXMubV9jaGFyYWN0ZXIub25Hcm91bmQoKSA6IGZhbHNlOyB9XG4gICAgICAgIHB1YmxpYyBpc1JlYWR5KCk6Ym9vbGVhbiB7IHJldHVybiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKTsgfVxuICAgICAgICBwdWJsaWMgY2FuSnVtcCgpOmJvb2xlYW4geyByZXR1cm4gKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgPyB0aGlzLm1fY2hhcmFjdGVyLmNhbkp1bXAoKSA6IGZhbHNlOyB9XG5cbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdHJhbnNmb3JtIHBvc2l0aW9uIGhhcyBiZWVuIHVwZGF0ZWQgKi9cbiAgICAgICAgcHVibGljIG9uVXBkYXRlUG9zaXRpb25PYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLlRyYW5zZm9ybU5vZGU+KCk7XG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaGFzIGVudGVyZWQgKi9cbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLkFic3RyYWN0TWVzaD4oKTtcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYSBjb2xsaXNpb24gY29udGFjdCBpcyBhY3RpdmUgKi9cbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhIGNvbGxpc2lvbiBjb250YWN0IGhhcyBleGl0ZWQgKi9cbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xuXG4gICAgICAgIHByb3RlY3RlZCBtX2NoYXJhY3RlcjphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9naG9zdFNoYXBlOmFueSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX2dob3N0T2JqZWN0OmFueSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX2dob3N0Q29sbGlzaW9uOmFueSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX2dob3N0VHJhbnNmb3JtOmFueSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX2dob3N0UG9zaXRpb246YW55ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fc3RhcnRQb3NpdGlvbjphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9zdGFydFRyYW5zZm9ybTphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV93YWxrRGlyZWN0aW9uOmFueSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX3dhcnBQb3NpdGlvbjphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV90dXJuaW5nUmF0ZTpudW1iZXIgPSAwO1xuICAgICAgICBwcm90ZWN0ZWQgbV9tb3ZlRGVsdGFYOm51bWJlciA9IDA7XG4gICAgICAgIHByb3RlY3RlZCBtX21vdmVEZWx0YVo6bnVtYmVyID0gMDtcbiAgICAgICAgcHJvdGVjdGVkIG1fY2Fwc3VsZVNpemU6QkFCWUxPTi5WZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzLlplcm8oKTtcbiAgICAgICAgcHJvdGVjdGVkIG1fcGh5c2ljc0VuZ2luZTpCQUJZTE9OLklQaHlzaWNzRW5naW5lID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fY2hhcmFjdGVyUG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzLlplcm8oKTtcbiAgICAgICAgcHJvdGVjdGVkIGludGVybmFsV2FycChwb3NpdGlvbjphbnkpOnZvaWQgeyBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSB0aGlzLm1fY2hhcmFjdGVyLndhcnAocG9zaXRpb24pOyB9IC8vIFBvc2l0aW9uOiBBbW1vLmJ0VmVjdG9yM1xuICAgICAgICBwcm90ZWN0ZWQgaW50ZXJuYWxKdW1wKCk6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuanVtcCgpOyB9XG4gICAgICAgIHByb3RlY3RlZCBpbnRlcm5hbFNldEp1bXBTcGVlZChzcGVlZDpudW1iZXIpOnZvaWQgeyBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSB0aGlzLm1fY2hhcmFjdGVyLnNldEp1bXBTcGVlZChzcGVlZCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIGludGVybmFsU2V0V2Fsa0RpcmVjdGlvbihkaXJlY3Rpb246YW55KTp2b2lkIHsgaWYgKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgdGhpcy5tX2NoYXJhY3Rlci5zZXRXYWxrRGlyZWN0aW9uKGRpcmVjdGlvbik7IH0gLy8gRGlyZWN0aW9uOiBBbW1vLmJ0VmVjdG9yM1xuICAgICAgICBwcm90ZWN0ZWQgaW50ZXJuYWxTZXRWZWxvY2l0eUZvclRpbWVJbnRlcnZhbCh2ZWxvY2l0eTphbnksIGludGVydmFsOm51bWJlcik6IHZvaWQgeyBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSB0aGlzLm1fY2hhcmFjdGVyLnNldFZlbG9jaXR5Rm9yVGltZUludGVydmFsKHZlbG9jaXR5LCBpbnRlcnZhbCk7IH0gLy8gVmVsb2NpdHk6IEFtbW8uYnRWZWN0b3IzXG5cbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6dm9pZCB7IHRoaXMuYXdha2VNb3ZlbWVudFN0YXRlKCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6dm9pZCB7IHRoaXMuc3RhcnRNb3ZlbWVudFN0YXRlKCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpIDp2b2lkIHsgIHRoaXMudXBkYXRlTW92ZW1lbnRTdGF0ZSgpOyB9XG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQgeyB0aGlzLmRlc3Ryb3lNb3ZlbWVudFN0YXRlKCk7IH1cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBQcm90ZWN0ZWQgQ2hhcmFjdGVyIE1vdmVtZW50IFN0YXRlIEZ1bmN0aW9ucyAvL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBwcm90ZWN0ZWQgYXdha2VNb3ZlbWVudFN0YXRlKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2ggPSB0aGlzLmdldEFic3RyYWN0TWVzaCgpO1xuICAgICAgICAgICAgdGhpcy5fYXZhdGFyUmFkaXVzID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2YXRhclJhZGl1c1wiLCB0aGlzLl9hdmF0YXJSYWRpdXMpO1xuICAgICAgICAgICAgdGhpcy5fYXZhdGFySGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2YXRhckhlaWdodFwiLCB0aGlzLl9hdmF0YXJIZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fc2xvcGVMaW1pdCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzbG9wZUxpbWl0XCIsIHRoaXMuX3Nsb3BlTGltaXQpO1xuICAgICAgICAgICAgdGhpcy5fc2tpbldpZHRoID0gdGhpcy5nZXRQcm9wZXJ0eShcInNraW5XaWR0aFwiLCB0aGlzLl9za2luV2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5fc3RlcE9mZnNldCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzdGVwT2Zmc2V0XCIsIHRoaXMuX3N0ZXBPZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy5fbWluTW92ZURpc3RhbmNlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1pbk1vdmVEaXN0YW5jZVwiLCB0aGlzLl9taW5Nb3ZlRGlzdGFuY2UpO1xuICAgICAgICAgICAgdGhpcy5fY2Fwc3VsZVNlZ21lbnRzID0gdGhpcy5nZXRQcm9wZXJ0eShcImNhcHN1bGVTZWdtZW50c1wiLCB0aGlzLl9jYXBzdWxlU2VnbWVudHMpO1xuICAgICAgICAgICAgdGhpcy5tX3dhcnBQb3NpdGlvbiA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgIHRoaXMubV93YWxrRGlyZWN0aW9uID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NFbmdpbmUgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzRW5naW5lKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgY29uc3QgY2VudGVyT2Zmc2V0RGF0YTpCQUJZTE9OLklVbml0eVZlY3RvcjMgPSB0aGlzLmdldFByb3BlcnR5KFwiY2VudGVyT2Zmc2V0XCIpO1xuICAgICAgICAgICAgaWYgKGNlbnRlck9mZnNldERhdGEgIT0gbnVsbCkgdGhpcy5fY2VudGVyT2Zmc2V0ID0gQkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VWZWN0b3IzKGNlbnRlck9mZnNldERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0TW92ZW1lbnRTdGF0ZSgpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5zZXR1cE1vdmVtZW50U3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW92ZW1lbnRTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBzZXR1cE1vdmVtZW50U3RhdGUoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TWF4Tm90aWZpY2F0aW9ucyh0aGlzLl9tYXhDb2xsaXNpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHdvcmxkOmFueSA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFBoeXNpY3NXb3JsZCh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIGlmICh3b3JsZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRpbmdQb3M6QkFCWUxPTi5WZWN0b3IzID0gQkFCWUxPTi5VdGlsaXRpZXMuR2V0QWJzb2x1dGVQb3NpdGlvbih0aGlzLnRyYW5zZm9ybSwgdGhpcy5fY2VudGVyT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRQb3NpdGlvbiA9IG5ldyBBbW1vLmJ0VmVjdG9yMyhzdGFydGluZ1Bvcy54LCBzdGFydGluZ1Bvcy55LCBzdGFydGluZ1Bvcy56KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRUcmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9zdGFydFRyYW5zZm9ybS5zZXRJZGVudGl0eSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9zdGFydFRyYW5zZm9ybS5zZXRPcmlnaW4odGhpcy5tX3N0YXJ0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgY29uc3QgY2Fwc3VsZVNpemU6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMyh0aGlzLl9hdmF0YXJSYWRpdXMsIHRoaXMuX2F2YXRhckhlaWdodCwgMSk7XG4gICAgICAgICAgICAgICAgY2Fwc3VsZVNpemUueCAqPSBNYXRoLm1heChNYXRoLmFicyh0aGlzLnRyYW5zZm9ybS5zY2FsaW5nLngpLCBNYXRoLmFicyh0aGlzLnRyYW5zZm9ybS5zY2FsaW5nLnopKTtcbiAgICAgICAgICAgICAgICBjYXBzdWxlU2l6ZS55ICo9IHRoaXMudHJhbnNmb3JtLnNjYWxpbmcueTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2Fwc3VsZVNpemUuY29weUZyb20oY2Fwc3VsZVNpemUpO1xuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZGVidWcgY29sbGlzaW9uIHNoYXBlXG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICBjb25zdCBzaG93RGVidWdDb2xsaWRlcnM6Ym9vbGVhbiA9IEJBQllMT04uVXRpbGl0aWVzLlNob3dEZWJ1Z0NvbGxpZGVycygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpZGVyVmlzaWJpbGl0eTpudW1iZXIgPSBCQUJZTE9OLlV0aWxpdGllcy5Db2xsaWRlclZpc2liaWxpdHkoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xsaWRlclJlbmRlckdyb3VwOm51bWJlciA9IEJBQllMT04uVXRpbGl0aWVzLkNvbGxpZGVyUmVuZGVyR3JvdXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd0RlYnVnQ29sbGlkZXJzID09PSB0cnVlICYmICg8YW55PnRoaXMudHJhbnNmb3JtKS5fZGVidWdDb2xsaWRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlYnVnTmFtZTpzdHJpbmcgPSB0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuRGVidWdcIlxuICAgICAgICAgICAgICAgICAgICAvLyBFTExJUFNFOiBjb25zdCBkZWJ1Z0NhcHN1bGU6QkFCWUxPTi5NZXNoID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVTcGhlcmUoZGVidWdOYW1lLCB7IHNlZ21lbnRzOiAxNiwgZGlhbWV0ZXJYOiAoY2Fwc3VsZVNpemUueCAqIDIpLCBkaWFtZXRlclk6IChjYXBzdWxlU2l6ZS55ICogMSksIGRpYW1ldGVyWjogKGNhcHN1bGVTaXplLnggKiAyKSB9LCB0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlYnVnQ2Fwc3VsZTpCQUJZTE9OLk1lc2ggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3JlYXRlQ3lsaW5kZXJTaGFwZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVDeWxpbmRlcihkZWJ1Z05hbWUsIHsgdGVzc2VsbGF0aW9uOnRoaXMuX2NhcHN1bGVTZWdtZW50cywgc3ViZGl2aXNpb25zOiA4LCBoZWlnaHQ6IGNhcHN1bGVTaXplLnksIGRpYW1ldGVyOiAoY2Fwc3VsZVNpemUueCAqIDIpIH0sIHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVDYXBzdWxlKGRlYnVnTmFtZSwgeyB0ZXNzZWxsYXRpb246dGhpcy5fY2Fwc3VsZVNlZ21lbnRzLCBzdWJkaXZpc2lvbnM6IDgsIGNhcFN1YmRpdmlzaW9uczogOCwgaGVpZ2h0OiBjYXBzdWxlU2l6ZS55LCByYWRpdXM6IGNhcHN1bGVTaXplLnggfSwgdGhpcy5zY2VuZSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0NhcHN1bGUucG9zaXRpb24uc2V0KDAsMCwwKTtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlLnJvdGF0aW9uUXVhdGVybmlvbiA9IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0NhcHN1bGUuc2V0UGFyZW50KHRoaXMudHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlLnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuX2NlbnRlck9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS52aXNpYmlsaXR5ID0gY29sbGlkZXJWaXNpYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0NhcHN1bGUucmVuZGVyaW5nR3JvdXBJZCA9IGNvbGxpZGVyUmVuZGVyR3JvdXA7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS5tYXRlcmlhbCA9IEJBQllMT04uVXRpbGl0aWVzLkdldENvbGxpZGVyTWF0ZXJpYWwodGhpcy5zY2VuZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS5jaGVja0NvbGxpc2lvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlLmlzUGlja2FibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+dGhpcy50cmFuc2Zvcm0pLl9kZWJ1Z0NvbGxpZGVyID0gZGVidWdDYXBzdWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBFTExJUFNFOiB0aGlzLm1fZ2hvc3RTaGFwZSA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkNyZWF0ZVBoeXNpY3NFbGxpcHNvaWRTaGFwZShuZXcgQW1tby5idFZlY3RvcjModGhpcy5fYXZhdGFyUmFkaXVzLCAodGhpcy5fYXZhdGFySGVpZ2h0ICogMC41KSwgdGhpcy5fYXZhdGFyUmFkaXVzKSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NyZWF0ZUN5bGluZGVyU2hhcGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0U2hhcGUgPSBuZXcgQW1tby5idEN5bGluZGVyU2hhcGUobmV3IEFtbW8uYnRWZWN0b3IzKHRoaXMuX2F2YXRhclJhZGl1cywgKHRoaXMuX2F2YXRhckhlaWdodCAqIDAuNSksIHRoaXMuX2F2YXRhclJhZGl1cykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdFNoYXBlID0gbmV3IEFtbW8uYnRDYXBzdWxlU2hhcGUodGhpcy5fYXZhdGFyUmFkaXVzLCAodGhpcy5fYXZhdGFySGVpZ2h0ICogMC41KSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTZXQgZ2hvc3Qgc2hhcGUgbWFyZ2luIHNpemVcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RTaGFwZS5zZXRNYXJnaW4odGhpcy5fc2tpbldpZHRoKTtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBnaG9zdCBjb2xsaXNpb24gb2JqZWN0XG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0ID0gbmV3IEFtbW8uYnRQYWlyQ2FjaGluZ0dob3N0T2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0LnNldFdvcmxkVHJhbnNmb3JtKHRoaXMubV9zdGFydFRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0LnNldENvbGxpc2lvblNoYXBlKHRoaXMubV9naG9zdFNoYXBlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3Quc2V0Q29sbGlzaW9uRmxhZ3MoQkFCWUxPTi5Db2xsaXNpb25GbGFncy5DRl9DSEFSQUNURVJfT0JKRUNUKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3Quc2V0QWN0aXZhdGlvblN0YXRlKDQpXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0LmFjdGl2YXRlKHRydWUpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBnaG9zdCBjb2xsaXNpb24gY2FzdGluZ1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbiA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLm1fZ2hvc3RPYmplY3QsIEFtbW8uYnRDb2xsaXNpb25PYmplY3QpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbi5lbnRpdHkgPSB0aGlzLl9hYnN0cmFjdE1lc2g7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGtpbmVtYXRpYyBjaGFyYWN0ZXIgY29udHJvbGxlclxuICAgICAgICAgICAgICAgIHRoaXMubV9jaGFyYWN0ZXIgPSBuZXcgQW1tby5idEtpbmVtYXRpY0NoYXJhY3RlckNvbnRyb2xsZXIodGhpcy5tX2dob3N0T2JqZWN0LCB0aGlzLm1fZ2hvc3RTaGFwZSwgdGhpcy5fc3RlcE9mZnNldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3Rlci5zZXRVc2VHaG9zdFN3ZWVwVGVzdCh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2hhcmFjdGVyLnNldFVwSW50ZXJwb2xhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3Rlci5zZXRHcmF2aXR5KEJBQllMT04uU3lzdGVtLkdyYXZpdHkzRyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3Rlci5zZXRNYXhTbG9wZShCQUJZTE9OLlRvb2xzLlRvUmFkaWFucyh0aGlzLl9zbG9wZUxpbWl0ICsgMSkpO1xuICAgICAgICAgICAgICAgIC8vIEFkZCBnaG9zdCBvYmplY3QgYW5kIGNoYXJhY3RlciB0byB3b3JsZFxuICAgICAgICAgICAgICAgIHdvcmxkLmFkZENvbGxpc2lvbk9iamVjdCh0aGlzLm1fZ2hvc3RPYmplY3QsIEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5DaGFyYWN0ZXJGaWx0ZXIsIEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5TdGF0aWNGaWx0ZXIgfCBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuRGVmYXVsdEZpbHRlciB8IEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5DaGFyYWN0ZXJGaWx0ZXIpO1xuICAgICAgICAgICAgICAgIHdvcmxkLmFkZEFjdGlvbih0aGlzLm1fY2hhcmFjdGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiTnVsbCBwaHlzaWNzIHdvcmxkIGRldGVjdGVkLiBGYWlsZWQgdG8gY3JlYXRlIGNoYXJhY3RlciBjb250cm9sbGVyOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faXNQaHlzaWNzUmVhZHkgPSAodGhpcy5tX3BoeXNpY3NFbmdpbmUgIT0gbnVsbCAmJiB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cyAhPSBudWxsICYmIHRoaXMubV9naG9zdE9iamVjdCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgc3luY01vdmVtZW50U3RhdGUoKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BoeXNpY3NSZWFkeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdFRyYW5zZm9ybSA9IHRoaXMubV9naG9zdE9iamVjdC5nZXRXb3JsZFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RUcmFuc2Zvcm0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RQb3NpdGlvbiA9IHRoaXMubV9naG9zdFRyYW5zZm9ybS5nZXRPcmlnaW4oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGVNb3ZlbWVudFN0YXRlKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLnN5bmNNb3ZlbWVudFN0YXRlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNQaHlzaWNzUmVhZHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0UG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51cGRhdGVQb3NpdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnNldCh0aGlzLm1fZ2hvc3RQb3NpdGlvbi54KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnkoKSwgdGhpcy5tX2dob3N0UG9zaXRpb24ueigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9jaGFyYWN0ZXJQb3NpdGlvbi5zZXQodGhpcy5tX2dob3N0UG9zaXRpb24ueCgpLCB0aGlzLm1fZ2hvc3RQb3NpdGlvbi55KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnooKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2VudGVyT2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBTdWJ0cmFjdCBDaGFyYWN0ZXIgQ29udHJvbGxlciBDZW50ZXIgT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3RlclBvc2l0aW9uLnN1YnRyYWN0SW5QbGFjZSh0aGlzLl9jZW50ZXJPZmZzZXQpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMubV9jaGFyYWN0ZXJQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zeW5jR2hvc3RUb1RyYW5zZm9ybSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0R2hvc3RXb3JsZFBvc2l0aW9uKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblVwZGF0ZVBvc2l0aW9uT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblVwZGF0ZVBvc2l0aW9uT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYXJzZUdob3N0Q29sbGlzaW9uQ29udGFjdHMoKTtcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgcGFyc2VHaG9zdENvbGxpc2lvbkNvbnRhY3RzKCk6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNQaHlzaWNzUmVhZHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFbnRlck9ic2VydmVyczpib29sZWFuID0gdGhpcy5vbkNvbGxpc2lvbkVudGVyT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNTdGF5T2JzZXJ2ZXJzOmJvb2xlYW4gPSB0aGlzLm9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRXhpdE9ic2VydmVyczpib29sZWFuID0gdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlLmhhc09ic2VydmVycygpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNFbnRlck9ic2VydmVycyB8fCBoYXNTdGF5T2JzZXJ2ZXJzIHx8IGhhc0V4aXRPYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDsgLy8gTm90ZTogRmxhZyBBbGwgQ29sbGlzaW9uIExpc3QgSXRlbXMgRm9yIEVuZCBDb250YWN0IFN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHNbaW5kZXhdLnJlc2V0ID0gdHJ1ZTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgT3ZlcmxhcHBpbmcgR2hvc3QgQ29udGFjdCBPYmplY3RzXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250YWN0czpudW1iZXIgPSB0aGlzLm1fZ2hvc3RPYmplY3QuZ2V0TnVtT3ZlcmxhcHBpbmdPYmplY3RzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0cyA+IHRoaXMuX21heENvbGxpc2lvbnMpIGNvbnRhY3RzID0gdGhpcy5fbWF4Q29sbGlzaW9ucztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3RzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29udGFjdHM7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWN0T2JqZWN0OmFueSA9IHRoaXMubV9naG9zdE9iamVjdC5nZXRPdmVybGFwcGluZ09iamVjdChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3RPYmplY3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWN0Qm9keTphbnkgPSBBbW1vLmNhc3RPYmplY3QoY29udGFjdE9iamVjdCwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0Qm9keSAhPSBudWxsICYmIGNvbnRhY3RCb2R5LmVudGl0eSAhPSBudWxsICYmIGNvbnRhY3RCb2R5LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb3VuZGluZGV4Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFjdE1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBjb250YWN0Qm9keS5lbnRpdHkgYXMgQkFCWUxPTi5BYnN0cmFjdE1lc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGVjazpCQUJZTE9OLkNvbGxpc2lvbkNvbnRhY3RJbmZvID0gdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVjay5tZXNoICE9IG51bGwgJiYgY2hlY2subWVzaCA9PT0gY29udGFjdE1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2suc3RhdGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVjay5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZGluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNlcnQ6QkFCWUxPTi5Db2xsaXNpb25Db250YWN0SW5mbyA9IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXNoID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydC5tZXNoID0gY29udGFjdE1lc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQuc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0LnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAvLyBEaXNwYXRjaCBHaG9zdCBDb2xsaXNpb24gQ29udGFjdCBTdGF0ZVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm86QkFCWUxPTi5Db2xsaXNpb25Db250YWN0SW5mbyA9IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggT24gQ29sbGlzaW9uIEV4aXQgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXhpdE9ic2VydmVycyAmJiBpbmZvLm1lc2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGluZm8ubWVzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IENvbGxpc2lvbiBDb250YWN0IEluZm8gSXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ubWVzaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5zdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5zdGF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNwYXRjaCBPbiBDb2xsaXNpb24gRW50ZXIgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0VudGVyT2JzZXJ2ZXJzICYmIGluZm8ubWVzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhpbmZvLm1lc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggT24gQ29sbGlzaW9uIFN0YXkgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1N0YXlPYnNlcnZlcnMgJiYgaW5mby5tZXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoaW5mby5tZXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveU1vdmVtZW50U3RhdGUoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMubV9waHlzaWNzRW5naW5lID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2NoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3RlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0T2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2dob3N0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3QgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdFNoYXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2dob3N0U2hhcGUpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdFNoYXBlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fZ2hvc3RDb2xsaXNpb24pOyAvLyA/Pz9cbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RDb2xsaXNpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdFBvc2l0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2dob3N0UG9zaXRpb24pOyAvLyA/Pz9cbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0VHJhbnNmb3JtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2dob3N0VHJhbnNmb3JtKTsgLy8gPz8/XG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0VHJhbnNmb3JtID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1fc3RhcnRQb3NpdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV9zdGFydFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tX3N0YXJ0VHJhbnNmb3JtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX3N0YXJ0VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRUcmFuc2Zvcm0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV93YXJwUG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fd2FycFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2FycFBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1fd2Fsa0RpcmVjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV93YWxrRGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2Fsa0RpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9uVXBkYXRlUG9zaXRpb25PYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uVXBkYXRlUG9zaXRpb25PYnNlcnZhYmxlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlck9ic2VydmFibGUuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlck9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvblN0YXlPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdG1wUG9zaXRpb25CdWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gQ2hhcmFjdGVyIENvbnRyb2xsZXIgQWR2YW5jZWQgSGVscGVyIEZ1bmN0aW9ucyAvL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyoqIEdldHMgdGhlIGdob3N0IGNvbGxpc2lvbiBzaGFwZSBtYXJnaW4gdmFsdWUuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldEdob3N0TWFyZ2luKCk6bnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RTaGFwZSAhPSBudWxsICYmIHRoaXMubV9naG9zdFNoYXBlLmdldE1hcmdpbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV9naG9zdFNoYXBlLmdldE1hcmdpbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyBnaG9zdCBjb2xsaXNpb24gc2hhcGUgbWFyZ2luIHZhbHVlLiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRHaG9zdE1hcmdpbihtYXJnaW46bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RTaGFwZSAhPSBudWxsICYmIHRoaXMubV9naG9zdFNoYXBlLnNldE1hcmdpbikge1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdFNoYXBlLnNldE1hcmdpbihtYXJnaW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIGNoYXJhY3RlciBzbG9wZSBzbGlkZSBwYXRjaCBzdGF0ZSB1c2luZyBwaHlzaWNzIGdob3N0IG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0VXNlU2xvcGVTbGlkZVBhdGNoKCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwgJiYgdGhpcy5tX2NoYXJhY3Rlci5nZXRfbV91c2VTbG9wZVNsaWRlUGF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fY2hhcmFjdGVyLmdldF9tX3VzZVNsb3BlU2xpZGVQYXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyBjaGFyYWN0ZXIgc2xvcGUgc2xpZGUgcGF0Y2ggc3RhdGUgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIHNldFVzZVNsb3BlU2xpZGVQYXRjaCh1c2U6Ym9vbGVhbik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsICYmIHRoaXMubV9jaGFyYWN0ZXIuc2V0X21fdXNlU2xvcGVTbGlkZVBhdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3Rlci5zZXRfbV91c2VTbG9wZVNsaWRlUGF0Y2godXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc2ltdWx0YW5lb3VzIGNvbnRhY3Qgbm90ZmljYXRpb25zIHRvIGRpc3BhdGNoIHBlciBmcmFtZS4gRGVmYXVsdHMgdmFsdWUgaXMgNC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0TWF4Tm90aWZpY2F0aW9ucyhtYXg6bnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9tYXhDb2xsaXNpb25zID0gbWF4O1xuICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMgPSBbXTsgICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9tYXhDb2xsaXNpb25zOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMucHVzaChuZXcgQ29sbGlzaW9uQ29udGFjdEluZm8oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgY2hhcmFjdGVyIGNvbGxpc2lvbiBhY3RpdmF0aW9uIHN0YXRlIHVzaW5nIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRBY3RpdmF0aW9uU3RhdGUoc3RhdGU6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uc2V0QWN0aXZhdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0Q29sbGlzaW9uLnNldEFjdGl2YXRpb25TdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgY2hhcmFjdGVyIGNvbGxpc2lvbiBncm91cCBmaWx0ZXIgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldENvbGxpc2lvbkZpbHRlckdyb3VwKCk6bnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0Q29sbGlzaW9uICE9IG51bGwgJiYgdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uZ2V0QnJvYWRwaGFzZUhhbmRsZSgpLmdldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGNoYXJhY3RlciBjb2xsaXNpb24gZ3JvdXAgZmlsdGVyIHVzaW5nIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJHcm91cChncm91cDpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdENvbGxpc2lvbiAhPSBudWxsICYmIHRoaXMubV9naG9zdENvbGxpc2lvbi5nZXRCcm9hZHBoYXNlSGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUoKS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cChncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgY2hhcmFjdGVyIGNvbGxpc2lvbiBtYXNrIGZpbHRlciB1c2luZyBwaHlzaWNzIGdob3N0IG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0Q29sbGlzaW9uRmlsdGVyTWFzaygpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdENvbGxpc2lvbiAhPSBudWxsICYmIHRoaXMubV9naG9zdENvbGxpc2lvbi5nZXRCcm9hZHBoYXNlSGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUoKS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIHRoZSBjaGFyYWN0ZXIgY29sbGlzaW9uIG1hc2sgZmlsdGVyIHVzaW5nIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2s6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uZ2V0QnJvYWRwaGFzZUhhbmRsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbi5nZXRCcm9hZHBoYXNlSGFuZGxlKCkuc2V0X21fY29sbGlzaW9uRmlsdGVyTWFzayhtYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyB0aGUgY2hyYWN0ZXIgY29udGFjdCBwcm9jZXNzaW5nIHRocmVzaG9sZCB1c2luZyBwaHlzaWNzIGdob3N0IG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uZ2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uZ2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgY2hhcmFjdGVyIGNvbnRhY3QgcHJvY2Vzc2luZyB0aHJlc2hvbGQgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIHNldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkKHRocmVzaG9sZDpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdENvbGxpc2lvbiAhPSBudWxsICYmIHRoaXMubV9naG9zdENvbGxpc2lvbi5zZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbi5zZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCh0aHJlc2hvbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0IHdvcmxkIHRyYW5zZm9ybS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0R2hvc3RXb3JsZFBvc2l0aW9uKCk6QkFCWUxPTi5WZWN0b3IzIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RQb3NpdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldCh0aGlzLm1fZ2hvc3RQb3NpdGlvbi54KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnkoKSwgdGhpcy5tX2dob3N0UG9zaXRpb24ueigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldCB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcGh5c2ljcyBnaG9zdCBvYmplY3Qgd29ybGQgdHJhbnNmb3JtLiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRHaG9zdFdvcmxkUG9zaXRpb25Ub1JlZihyZXN1bHQ6QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RQb3NpdGlvbiAhPSBudWxsICYmIHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldCh0aGlzLm1fZ2hvc3RQb3NpdGlvbi54KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnkoKSwgdGhpcy5tX2dob3N0UG9zaXRpb24ueigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogTWFudWFsbHkgc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcGh5c2ljcyBnaG9zdCBvYmplY3Qgd29ybGQgdHJhbnNmb3JtLiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRHaG9zdFdvcmxkUG9zaXRpb24ocG9zaXRpb246QkFCWUxPTi5OdWxsYWJsZTxCQUJZTE9OLlZlY3RvcjM+KTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RPYmplY3QgIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RUcmFuc2Zvcm0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RQb3NpdGlvbiAhPSBudWxsICYmIHBvc2l0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0UG9zaXRpb24uc2V0VmFsdWUocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdFRyYW5zZm9ybS5zZXRPcmlnaW4odGhpcy5tX2dob3N0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3Quc2V0V29ybGRUcmFuc2Zvcm0odGhpcy5tX2dob3N0VHJhbnNmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0IGdob3N0IGNvbGxpc2lvbiBzaGFwZSBsb2NhbCBzY2FsaW5nLiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzY2FsZUdob3N0Q29sbGlzaW9uU2hhcGUoeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLm1fZ2hvc3RTaGFwZS5zZXRMb2NhbFNjYWxpbmcobmV3IEFtbW8uYnRWZWN0b3IzKHgsIHksIHopKTtcbiAgICAgICAgICAgIGlmICgoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIgIT0gbnVsbCAmJiAoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIuc2NhbGluZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDxhbnk+dGhpcy50cmFuc2Zvcm0pLl9kZWJ1Z0NvbGxpZGVyLnNjYWxpbmcuc2V0KHgsIHksIHopOyAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIFB1YmxpYyBDaGFyYWN0ZXIgQ29udHJvbGxlciBNb3ZlbWVudCBGdW5jdGlvbnMgLy9cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8qKiBTZXRzIHRoZSBraW5lbWF0aWMgY2hhcmFjdGVyIHBvc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uICovXG4gICAgICAgIHB1YmxpYyBzZXQoeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLl90bXBQb3NpdGlvbkJ1ZmZlci5zZXQoeCx5LHopO1xuICAgICAgICAgICAgdGhpcy5zZXRHaG9zdFdvcmxkUG9zaXRpb24odGhpcy5fdG1wUG9zaXRpb25CdWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBUcmFuc2xhdGVzIHRoZSBraW5lbWF0aWMgY2hhcmFjdGVyIHdpdGggdGhlIHNwZWNmaWVkIHZlbG9jaXR5LiAqL1xuICAgICAgICBwdWJsaWMgbW92ZSh2ZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHZlbG9jaXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fbW92ZURlbHRhWCA9IHZlbG9jaXR5Lng7XG4gICAgICAgICAgICAgICAgdGhpcy5tX21vdmVEZWx0YVogPSB2ZWxvY2l0eS56O1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh2ZWxvY2l0eS54KSA8IHRoaXMuX21pbk1vdmVEaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVsb2NpdHkueCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9tb3ZlRGVsdGFYID0gdGhpcy5fbWluTW92ZURpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZlbG9jaXR5LnggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fbW92ZURlbHRhWCA9IC10aGlzLl9taW5Nb3ZlRGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHZlbG9jaXR5LnopIDwgdGhpcy5fbWluTW92ZURpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZWxvY2l0eS56ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX21vdmVEZWx0YVogPSB0aGlzLl9taW5Nb3ZlRGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmVsb2NpdHkueiA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9tb3ZlRGVsdGFaID0gLXRoaXMuX21pbk1vdmVEaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3dhbGtEaXJlY3Rpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlbWVudFZlbG9jaXR5LnNldCh0aGlzLm1fbW92ZURlbHRhWCwgMCwgdGhpcy5tX21vdmVEZWx0YVopO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fd2Fsa0RpcmVjdGlvbi5zZXRWYWx1ZSh0aGlzLl9tb3ZlbWVudFZlbG9jaXR5LngsIHRoaXMuX21vdmVtZW50VmVsb2NpdHkueSwgdGhpcy5fbW92ZW1lbnRWZWxvY2l0eS56KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFNldFdhbGtEaXJlY3Rpb24odGhpcy5tX3dhbGtEaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogSnVtcHMgdGhlIGtpbmVtYXRpYyBjaGFjcmFjdGVyIHdpdGggdGhlIHNwZWNpZmllZCBzcGVlZC4gKi9cbiAgICAgICAgcHVibGljIGp1bXAoc3BlZWQ6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxTZXRKdW1wU3BlZWQoc3BlZWQpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEp1bXAoKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogV2FycHMgdGhlIGtpbmVtYXRpYyBjaGFjcmFjdGVyIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uICovXG4gICAgICAgIHB1YmxpYyB3YXJwKHBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyk6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3dhcnBQb3NpdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhcnBQb3NpdGlvbi5zZXRWYWx1ZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56KTtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsV2FycCh0aGlzLm1fd2FycFBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgQkFCWUxPTiB7XG4gICAgLyoqXG4gICAgICogQmFieWxvbiBuYXZpZ2F0aW9uIGFnZW50IHBybyBjbGFzcyAoVW5pdHkgU3R5bGUgTmF2aWdhdGlvbiBBZ2VudCBTeXN0ZW0pXG4gICAgICogQGNsYXNzIE5hdmlnYXRpb25BZ2VudCAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uQWdlbnQgZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIFRBUkdFVF9BTkdMRV9GQUNUT1I6bnVtYmVyID0gKE1hdGguUEkgKiAwLjUpO1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBBTkdVTEFSX1NQRUVEX1JBVElPOm51bWJlciA9IDAuMDU7XG4gICAgICAgIHByaXZhdGUgdHlwZTogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIHNwZWVkOiBudW1iZXJcbiAgICAgICAgcHJpdmF0ZSBiYXNlT2Zmc2V0OiBudW1iZXI7XG4gICAgICAgIHByaXZhdGUgYXZvaWRSYWRpdXM6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBhdm9pZEhlaWdodDogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIGFjY2VsZXJhdGlvbjogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIGFyZWFNYXNrOiBudW1iZXI7XG4gICAgICAgIHByaXZhdGUgYXV0b1JlcGF0aDogYm9vbGVhbjtcbiAgICAgICAgcHJpdmF0ZSBhdXRvQnJha2luZzogYm9vbGVhbjtcbiAgICAgICAgcHJpdmF0ZSBhdXRvVHJhdmVyc2VPZmZNZXNoTGluazogYm9vbGVhbjtcbiAgICAgICAgcHJpdmF0ZSBhdm9pZGFuY2VQcmlvcml0eTogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIG9ic3RhY2xlQXZvaWRhbmNlVHlwZTogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIGRpc3RhbmNlVG9UYXJnZXQ6bnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSB0ZWxlcG9ydGluZzpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgbW92ZURpcmVjdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICBwcml2YXRlIHJlc2V0UG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgcHJpdmF0ZSBsYXN0UG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgcHJpdmF0ZSBkaXN0YW5jZVBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIHByaXZhdGUgY3VycmVudFBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIHByaXZhdGUgY3VycmVudFJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgcHJpdmF0ZSBjdXJyZW50VmVsb2NpdHk6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgcHJpdmF0ZSBjdXJyZW50V2F5cG9pbnQ6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBoZWlnaHRPZmZzZXQ6bnVtYmVyID0gMDtcbiAgICAgICAgcHVibGljIGFuZ3VsYXJTcGVlZDogbnVtYmVyID0gMDtcbiAgICAgICAgcHVibGljIHVwZGF0ZVBvc2l0aW9uOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgdXBkYXRlUm90YXRpb246Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgIHB1YmxpYyBkaXN0YW5jZUVwc2lsb246bnVtYmVyID0gMC4xO1xuICAgICAgICBwdWJsaWMgdmVsb2NpdHlFcHNpbG9uOm51bWJlciA9IDEuMTtcbiAgICAgICAgcHVibGljIG9mZk1lc2hWZWxvY2l0eTogbnVtYmVyID0gMS41O1xuICAgICAgICBwdWJsaWMgc3RvcHBpbmdEaXN0YW5jZTogbnVtYmVyID0gMDtcbiAgICAgICAgcHVibGljIGlzUmVhZHkoKTpib29sZWFuIHsgcmV0dXJuIHRoaXMubV9hZ2VudFJlYWR5OyB9XG4gICAgICAgIHB1YmxpYyBpc05hdmlnYXRpbmcoKTpib29sZWFuIHsgcmV0dXJuICh0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiAhPSBudWxsKTsgfVxuICAgICAgICBwdWJsaWMgaXNUZWxlcG9ydGluZygpOmJvb2xlYW4geyByZXR1cm4gdGhpcy50ZWxlcG9ydGluZzsgfVxuICAgICAgICBwdWJsaWMgaXNPbk9mZk1lc2hMaW5rKCk6Ym9vbGVhbiB7IHJldHVybiAodGhpcy5tX2FnZW50U3RhdGUgPT09IEJBQllMT04uQ3Jvd2RBZ2VudFN0YXRlLkRUX0NST1dEQUdFTlRfU1RBVEVfT0ZGTUVTSCk7IH1cbiAgICAgICAgcHVibGljIGdldEFnZW50VHlwZSgpOm51bWJlciB7IHJldHVybiB0aGlzLnR5cGU7IH1cbiAgICAgICAgcHVibGljIGdldEFnZW50U3RhdGUoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5tX2FnZW50U3RhdGU7IH1cbiAgICAgICAgcHVibGljIGdldEFnZW50SW5kZXgoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5tX2FnZW50SW5kZXg7IH1cbiAgICAgICAgcHVibGljIGdldEFnZW50T2Zmc2V0KCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuYmFzZU9mZnNldDsgfVxuICAgICAgICBwdWJsaWMgZ2V0VGFyZ2V0RGlzdGFuY2UoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5kaXN0YW5jZVRvVGFyZ2V0OyB9XG4gICAgICAgIHB1YmxpYyBnZXRDdXJyZW50UG9zaXRpb24oKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5jdXJyZW50UG9zaXRpb247IH1cbiAgICAgICAgcHVibGljIGdldEN1cnJlbnRSb3RhdGlvbigpOkJBQllMT04uUXVhdGVybmlvbiB7IHJldHVybiB0aGlzLmN1cnJlbnRSb3RhdGlvbjsgfVxuICAgICAgICBwdWJsaWMgZ2V0Q3VycmVudFZlbG9jaXR5KCk6QkFCWUxPTi5WZWN0b3IzIHsgcmV0dXJuIHRoaXMuY3VycmVudFZlbG9jaXR5OyB9XG4gICAgICAgIHB1YmxpYyBnZXRBZ2VudFBhcmFtZXRlcnMoKTpCQUJZTE9OLklBZ2VudFBhcmFtZXRlcnMgeyByZXR1cm4gdGhpcy5tX2FnZW50UGFyYW1zOyB9XG4gICAgICAgIHB1YmxpYyBzZXRBZ2VudFBhcmFtZXRlcnMocGFyYW1ldGVyczpCQUJZTE9OLklBZ2VudFBhcmFtZXRlcnMpOnZvaWQgeyB0aGlzLm1fYWdlbnRQYXJhbXMgPSBwYXJhbWV0ZXJzOyB0aGlzLnVwZGF0ZUFnZW50UGFyYW1ldGVycygpOyB9XG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGFnZW50IGlzIHJlYWR5IGZvciBuYXZpZ2F0aW9uICovXG4gICAgICAgIHB1YmxpYyBvblJlYWR5T2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBiZWZvcmUgdGhlIG5hdmlnYXRpb24gdXBkYXRlICovXG4gICAgICAgIHB1YmxpYyBvblByZVVwZGF0ZU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uVHJhbnNmb3JtTm9kZT4oKTtcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIG5hdmlnYXRpb24gdXBkYXRlICovXG4gICAgICAgIHB1YmxpYyBvblBvc3RVcGRhdGVPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLlRyYW5zZm9ybU5vZGU+KCk7XG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIG5hdmlnYXRpb24gaXMgY29tcGxldGUgKi9cbiAgICAgICAgcHVibGljIG9uTmF2Q29tcGxldGVPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLlRyYW5zZm9ybU5vZGU+KCk7XG5cbiAgICAgICAgcHJvdGVjdGVkIG1fYWdlbnRTdGF0ZTpudW1iZXIgPSAwO1xuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudEluZGV4Om51bWJlciA9IC0xO1xuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudFJlYWR5OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJvdGVjdGVkIG1fYWdlbnRHaG9zdDpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudFBhcmFtczpCQUJZTE9OLklBZ2VudFBhcmFtZXRlcnMgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudE1vdmVtZW50OkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIHByb3RlY3RlZCBtX2FnZW50RGlyZWN0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDEuMCk7XG4gICAgICAgIHByb3RlY3RlZCBtX2FnZW50UXVhdGVybmlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgICAgIHByb3RlY3RlZCBtX2FnZW50RGVzdGluYXRpb246QkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHsgdGhpcy5hd2FrZU5hdmlnYXRpb25BZ2VudCgpOyB9XG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7IHRoaXMudXBkYXRlTmF2aWdhdGlvbkFnZW50KCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IHRoaXMuZGVzdHJveU5hdmlnYXRpb25BZ2VudCgpOyB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIE5hdmlnYXRpb24gUHJpdmF0ZSBGdW5jdGlvbnMgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBwcml2YXRlIGF3YWtlTmF2aWdhdGlvbkFnZW50KCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFByb3BlcnR5KFwidHlwZVwiLCB0aGlzLnR5cGUpO1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzcGVlZFwiLCB0aGlzLnNwZWVkKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZU9mZnNldCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJvZmZzZXRcIiwgdGhpcy5iYXNlT2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhclNwZWVkID0gdGhpcy5nZXRQcm9wZXJ0eShcImFuZ3VsYXJzcGVlZFwiLCB0aGlzLmFuZ3VsYXJTcGVlZCk7XG4gICAgICAgICAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhY2NlbGVyYXRpb25cIiwgdGhpcy5hY2NlbGVyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5zdG9wcGluZ0Rpc3RhbmNlID0gdGhpcy5nZXRQcm9wZXJ0eShcInN0b3BwaW5nZGlzdGFuY2VcIiwgdGhpcy5zdG9wcGluZ0Rpc3RhbmNlKTtcbiAgICAgICAgICAgIHRoaXMuYXV0b0JyYWtpbmcgPSB0aGlzLmdldFByb3BlcnR5KFwiYXV0b2JyYWtpbmdcIiwgdGhpcy5hdXRvQnJha2luZyk7XG4gICAgICAgICAgICB0aGlzLmF2b2lkUmFkaXVzID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2b2lkcmFkaXVzXCIsIHRoaXMuYXZvaWRSYWRpdXMpO1xuICAgICAgICAgICAgdGhpcy5hdm9pZEhlaWdodCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhdm9pZGhlaWdodFwiLCB0aGlzLmF2b2lkSGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMub2JzdGFjbGVBdm9pZGFuY2VUeXBlID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2b2lkcXVhbGl0eVwiLCB0aGlzLm9ic3RhY2xlQXZvaWRhbmNlVHlwZSk7XG4gICAgICAgICAgICB0aGlzLmF2b2lkYW5jZVByaW9yaXR5ID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2b2lkcHJpb3JpdHlcIiwgdGhpcy5hdm9pZGFuY2VQcmlvcml0eSk7XG4gICAgICAgICAgICB0aGlzLmF1dG9UcmF2ZXJzZU9mZk1lc2hMaW5rID0gdGhpcy5nZXRQcm9wZXJ0eShcImF1dG90cmF2ZXJzZVwiLCB0aGlzLmF1dG9UcmF2ZXJzZU9mZk1lc2hMaW5rKTtcbiAgICAgICAgICAgIHRoaXMuYXV0b1JlcGF0aCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhdXRvcGVwYXRoXCIsIHRoaXMuYXV0b1JlcGF0aCk7XG4gICAgICAgICAgICB0aGlzLmFyZWFNYXNrID0gdGhpcy5nZXRQcm9wZXJ0eShcImFyZWFtYXNrXCIsIHRoaXMuYXJlYU1hc2spO1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAvLyBERUJVRzogdGhpcy5tX2FnZW50R2hvc3QgPSBCQUJZTE9OLk1lc2guQ3JlYXRlQm94KCh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCJBZ2VudFwiKSwgMSwgdGhpcy5zY2VuZSk7XG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRHaG9zdCA9IG5ldyBCQUJZTE9OLlRyYW5zZm9ybU5vZGUoKHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5BZ2VudFwiKSwgdGhpcy5zY2VuZSk7XG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRHaG9zdC5wb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRHaG9zdC5yb3RhdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5WYWxpZGF0ZVRyYW5zZm9ybVF1YXRlcm5pb24odGhpcy5tX2FnZW50R2hvc3QpO1xuICAgICAgICAgICAgdGhpcy5tX2FnZW50R2hvc3QucG9zaXRpb24uY29weUZyb20odGhpcy50cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24uY29weUZyb20odGhpcy50cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSB1cGRhdGVOYXZpZ2F0aW9uQWdlbnQoKTp2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XG4gICAgICAgICAgICBpZiAoY3Jvd2QgPT0gbnVsbCkgcmV0dXJuOyAvLyBOb3RlOiBObyBEZXRvdXIgTmF2aWdhdGlvbiBNZXNoIEF2YWlsYWJsZSBZZXRcbiAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fYWdlbnRQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogdGhpcy5hdm9pZFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmF2b2lkSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBtYXhTcGVlZDogdGhpcy5zcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgbWF4QWNjZWxlcmF0aW9uOiB0aGlzLmFjY2VsZXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uUXVlcnlSYW5nZTogMi4wLFxuICAgICAgICAgICAgICAgICAgICBwYXRoT3B0aW1pemF0aW9uUmFuZ2U6IDIwLjAsXG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRpb25XZWlnaHQ6IDEuMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuR2V0QWJzb2x1dGVQb3NpdGlvblRvUmVmKHRoaXMudHJhbnNmb3JtLCB0aGlzLnJlc2V0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudEluZGV4ID0gY3Jvd2QuYWRkQWdlbnQodGhpcy5yZXNldFBvc2l0aW9uLCB0aGlzLm1fYWdlbnRQYXJhbXMsIHRoaXMubV9hZ2VudEdob3N0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2FnZW50SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fYWdlbnRSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLmhhc09ic2VydmVycygpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBOb3RlOiBTdGFydCBVcGRhdGluZyBOYXZpZ2F0aW9uIEFnZW50IE5leHQgRnJhbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRTdGF0ZSA9IGNyb3dkLmdldEFnZW50U3RhdGUodGhpcy5tX2FnZW50SW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5nZXRBZ2VudFdheXBvaW50VG9SZWYodGhpcy5jdXJyZW50V2F5cG9pbnQpO1xuICAgICAgICAgICAgdGhpcy5nZXRBZ2VudFBvc2l0aW9uVG9SZWYodGhpcy5jdXJyZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzT25PZmZNZXNoTGluaygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24uc3VidHJhY3RUb1JlZih0aGlzLmxhc3RQb3NpdGlvbiwgdGhpcy5jdXJyZW50VmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZlbG9jaXR5LnNjYWxlSW5QbGFjZSh0aGlzLnNwZWVkICogdGhpcy5vZmZNZXNoVmVsb2NpdHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldEFnZW50VmVsb2NpdHlUb1JlZih0aGlzLmN1cnJlbnRWZWxvY2l0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vblByZVVwZGF0ZU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uUHJlVXBkYXRlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24ueSArPSAodGhpcy5iYXNlT2Zmc2V0ICsgdGhpcy5oZWlnaHRPZmZzZXQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFZlbG9jaXR5Lmxlbmd0aCgpID49IHRoaXMudmVsb2NpdHlFcHNpbG9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VmVsb2NpdHkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRlRmFjdG9yOm51bWJlciA9ICh0aGlzLmFuZ3VsYXJTcGVlZCAqIEJBQllMT04uTmF2aWdhdGlvbkFnZW50LkFOR1VMQVJfU1BFRURfUkFUSU8gKiB0aGlzLmdldERlbHRhU2Vjb25kcygpKTtcbiAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgIC8vIEtFRVAgRk9SIFJFRkVSRU5DRTogQ29tcHV0ZSBBZ2VudCBPcmllbnRhdGlvblxuICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogSW50ZXJwb2xhdGUgdGhlIHJvdGF0aW9uIG9uIFkgdG8gZ2V0IGEgc21vb3RoZXIgb3JpZW50YXRpb24gY2hhbmdlXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgZGVzaXJlZFJvdGF0aW9uOm51bWJlciA9IE1hdGguYXRhbjIodGhpcy5jdXJyZW50VmVsb2NpdHkueCwgdGhpcy5jdXJyZW50VmVsb2NpdHkueik7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueSA9IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uLnkgKyAoZGVzaXJlZFJvdGF0aW9uIC0gdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueSkgKiAwLjA1O1xuICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNPbk9mZk1lc2hMaW5rKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUm90YXRlIFRvd2FyZCBWZWxvY2l0eSBEaXJlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlRGlyZWN0aW9uLmNvcHlGcm9tKHRoaXMubV9hZ2VudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudERpcmVjdGlvbi5zZXQoKHRoaXMubW92ZURpcmVjdGlvbi54ICsgKHRoaXMuY3VycmVudFZlbG9jaXR5LnggLSB0aGlzLm1vdmVEaXJlY3Rpb24ueCkpLCAodGhpcy5tb3ZlRGlyZWN0aW9uLnkgKyAodGhpcy5jdXJyZW50VmVsb2NpdHkueSAtIHRoaXMubW92ZURpcmVjdGlvbi55KSksICh0aGlzLm1vdmVEaXJlY3Rpb24ueiArICh0aGlzLmN1cnJlbnRWZWxvY2l0eS56IC0gdGhpcy5tb3ZlRGlyZWN0aW9uLnopKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudERpcmVjdGlvbi5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5nbGU6bnVtYmVyID0gKEJBQllMT04uTmF2aWdhdGlvbkFnZW50LlRBUkdFVF9BTkdMRV9GQUNUT1IgLSBNYXRoLmF0YW4yKHRoaXMubV9hZ2VudERpcmVjdGlvbi54LCB0aGlzLm1fYWdlbnREaXJlY3Rpb24ueikpO1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoMC4wLCB0YXJnZXRBbmdsZSwgMC4wLCB0aGlzLmN1cnJlbnRSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdGF0aW9uIFVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc05hdmlnYXRpbmcoKSAmJiB0aGlzLnVwZGF0ZVJvdGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uU2xlcnBUb1JlZih0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24sIHRoaXMuY3VycmVudFJvdGF0aW9uLCByb3RhdGVGYWN0b3IsIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgVG93YXJkIE5leHQgVGFyZ2V0IFdheXBvaW50XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudFF1YXRlcm5pb24uY29weUZyb20odGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkgJiYgdGhpcy51cGRhdGVSb3RhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ubG9va0F0KHRoaXMuY3VycmVudFdheXBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWN0IFRyYW5zZm9ybSBMb29rIEF0IFJvdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi50b0V1bGVyQW5nbGVzVG9SZWYodGhpcy5tX2FnZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5RdWF0ZXJuaW9uLkZyb21FdWxlckFuZ2xlc1RvUmVmKDAuMCwgdGhpcy5tX2FnZW50RGlyZWN0aW9uLnksIDAuMCwgdGhpcy5jdXJyZW50Um90YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGlvbiBVcGRhdGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkgJiYgdGhpcy51cGRhdGVSb3RhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5RdWF0ZXJuaW9uLlNsZXJwVG9SZWYodGhpcy5tX2FnZW50UXVhdGVybmlvbiwgdGhpcy5jdXJyZW50Um90YXRpb24sIHJvdGF0ZUZhY3RvciwgdGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBvc2l0aW9uIFVwZGF0ZVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkgJiYgdGhpcy51cGRhdGVQb3NpdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRhcmdldCBEaXN0YW5jZVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3RhbmNlVG9UYXJnZXQgPSBCQUJZTE9OLlZlY3RvcjMuRGlzdGFuY2UodGhpcy5kaXN0YW5jZVBvc2l0aW9uLCB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzdGFuY2VUb1RhcmdldCA8PSBNYXRoLm1heCh0aGlzLmRpc3RhbmNlRXBzaWxvbiwgdGhpcy5zdG9wcGluZ0Rpc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbE5hdmlnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25OYXZDb21wbGV0ZU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OYXZDb21wbGV0ZU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMudHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVRvVGFyZ2V0ID0gMDsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaW5hbCBQb3N0IFVwZGF0ZVxuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24uY29weUZyb20odGhpcy5jdXJyZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKHRoaXMub25Qb3N0VXBkYXRlT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25Qb3N0VXBkYXRlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzZXQgVGVsZXBvcnQgRmxhZ1xuICAgICAgICAgICAgdGhpcy50ZWxlcG9ydGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgdXBkYXRlQWdlbnRQYXJhbWV0ZXJzKCk6dm9pZCB7XG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgaWYgKGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkgY3Jvd2QudXBkYXRlQWdlbnRQYXJhbWV0ZXJzKHRoaXMubV9hZ2VudEluZGV4LCB0aGlzLm1fYWdlbnRQYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgZGVzdHJveU5hdmlnYXRpb25BZ2VudCgpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5tX2FnZW50SW5kZXggPSAtMTtcbiAgICAgICAgICAgIHRoaXMubV9hZ2VudFJlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRNb3ZlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1fYWdlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5tX2FnZW50RGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5tb3ZlRGlyZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3RhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWZWxvY2l0eSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRXYXlwb2ludCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub25QcmVVcGRhdGVPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uUHJlVXBkYXRlT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9uUG9zdFVwZGF0ZU9ic2VydmFibGUuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMub25Qb3N0VXBkYXRlT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9uTmF2Q29tcGxldGVPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uTmF2Q29tcGxldGVPYnNlcnZhYmxlID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRHaG9zdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tX2FnZW50R2hvc3QuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudEdob3N0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBOYXZpZ2F0aW9uIFB1YmxpYyBGdW5jdGlvbnMgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyoqIE1vdmUgYWdlbnQgcmVsYXRpdmUgdG8gY3VycmVudCBwb3NpdGlvbi4gKi9cbiAgICAgICAgcHVibGljIG1vdmUob2Zmc2V0OiBCQUJZTE9OLlZlY3RvcjMsIGNsb3NldFBvaW50OmJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW46QkFCWUxPTi5SZWNhc3RKU1BsdWdpbiA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldE5hdmlnYXRpb25Ub29scygpO1xuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIGlmIChwbHVnaW4gIT0gbnVsbCAmJiBjcm93ZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY3Jvd2QuZ2V0QWdlbnRQb3NpdGlvbih0aGlzLm1fYWdlbnRJbmRleCkuYWRkVG9SZWYob2Zmc2V0LCB0aGlzLm1fYWdlbnRNb3ZlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGNsb3NldFBvaW50ID09PSB0cnVlKSB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiA9IHBsdWdpbi5nZXRDbG9zZXN0UG9pbnQodGhpcy5tX2FnZW50TW92ZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5tX2FnZW50RGVzdGluYXRpb24gPSB0aGlzLm1fYWdlbnRNb3ZlbWVudC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSBjcm93ZC5hZ2VudEdvdG8odGhpcy5tX2FnZW50SW5kZXgsIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiTm8gcmVjYXN0IG5hdmlnYXRpb24gbWVzaCBvciBjcm93ZCBpbnRlcmZhY2UgZGF0YSBhdmFpbGFibGUhXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBUZWxlcG9ydCBhZ2VudCB0byBkZXN0aW5hdGlvbiBwb2ludC4gKi9cbiAgICAgICAgcHVibGljIHRlbGVwb3J0KGRlc3RpbmF0aW9uOiBCQUJZTE9OLlZlY3RvcjMsIGNsb3NldFBvaW50OmJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW46QkFCWUxPTi5SZWNhc3RKU1BsdWdpbiA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldE5hdmlnYXRpb25Ub29scygpO1xuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIGlmIChwbHVnaW4gIT0gbnVsbCAmJiBjcm93ZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWxlcG9ydGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNsb3NldFBvaW50ID09PSB0cnVlKSB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiA9IHBsdWdpbi5nZXRDbG9zZXN0UG9pbnQoZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5tX2FnZW50RGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSBjcm93ZC5hZ2VudFRlbGVwb3J0KHRoaXMubV9hZ2VudEluZGV4LCB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIHJlY2FzdCBuYXZpZ2F0aW9uIG1lc2ggb3IgY3Jvd2QgaW50ZXJmYWNlIGRhdGEgYXZhaWxhYmxlIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyBhZ2VudCBjdXJyZW50IGRlc3RpbmF0aW9uIHBvaW50LiAqL1xuICAgICAgICBwdWJsaWMgc2V0RGVzdGluYXRpb24oZGVzdGluYXRpb246IEJBQllMT04uVmVjdG9yMywgY2xvc2V0UG9pbnQ6Ym9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbjpCQUJZTE9OLlJlY2FzdEpTUGx1Z2luID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0TmF2aWdhdGlvblRvb2xzKCk7XG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgaWYgKHBsdWdpbiAhPSBudWxsICYmIGNyb3dkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2V0UG9pbnQgPT09IHRydWUpIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uID0gcGx1Z2luLmdldENsb3Nlc3RQb2ludChkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubV9hZ2VudEluZGV4ID49IDApIGNyb3dkLmFnZW50R290byh0aGlzLm1fYWdlbnRJbmRleCwgdGhpcy5tX2FnZW50RGVzdGluYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyByZWNhc3QgbmF2aWdhdGlvbiBtZXNoIG9yIGNyb3dkIGludGVyZmFjZSBkYXRhIGF2YWlsYWJsZSFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgYWdlbnQgY3VycmVudCB3b3JsZCBzcGFjZSB2ZWxvY2l0eS4gKi9cbiAgICAgICAgcHVibGljIGdldEFnZW50VmVsb2NpdHkoKTogQkFCWUxPTi5WZWN0b3IzIHtcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XG4gICAgICAgICAgICByZXR1cm4gKGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkgPyBjcm93ZC5nZXRBZ2VudFZlbG9jaXR5KHRoaXMubV9hZ2VudEluZGV4KSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgYWdlbnQgY3VycmVudCB3b3JsZCBzcGFjZSB2ZWxvY2l0eS4gKi9cbiAgICAgICAgcHVibGljIGdldEFnZW50VmVsb2NpdHlUb1JlZihyZXN1bHQ6QkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgaWYgKGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkgY3Jvd2QuZ2V0QWdlbnRWZWxvY2l0eVRvUmVmKHRoaXMubV9hZ2VudEluZGV4LCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIGFnZW50IGN1cnJlbnQgd29ybGQgc3BhY2UgcG9zaXRpb24uICovXG4gICAgICAgIHB1YmxpYyBnZXRBZ2VudFBvc2l0aW9uKCk6IEJBQllMT04uVmVjdG9yMyB7XG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgcmV0dXJuIChjcm93ZCAhPSBudWxsICYmIHRoaXMubV9hZ2VudEluZGV4ID49IDApID8gY3Jvd2QuZ2V0QWdlbnRQb3NpdGlvbih0aGlzLm1fYWdlbnRJbmRleCkgOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIGFnZW50IGN1cnJlbnQgd29ybGQgc3BhY2UgcG9zaXRpb24uICovXG4gICAgICAgIHB1YmxpYyBnZXRBZ2VudFBvc2l0aW9uVG9SZWYocmVzdWx0OkJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIGlmIChjcm93ZCAhPSBudWxsICYmIHRoaXMubV9hZ2VudEluZGV4ID49IDApIGNyb3dkLmdldEFnZW50UG9zaXRpb25Ub1JlZih0aGlzLm1fYWdlbnRJbmRleCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyBhZ2VudCBjdXJyZW50IHdheXBvaW50IHBvc2l0aW9uLiAqL1xuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRXYXlwb2ludCgpOiBCQUJZTE9OLlZlY3RvcjMge1xuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIHJldHVybiAoY3Jvd2QgIT0gbnVsbCAmJiB0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSA/IGNyb3dkLmdldEFnZW50TmV4dFRhcmdldFBhdGgodGhpcy5tX2FnZW50SW5kZXgpIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyBhZ2VudCBjdXJyZW50IHdheXBvaW50IHBvc2l0aW9uLiAqL1xuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRXYXlwb2ludFRvUmVmKHJlc3VsdDpCQUJZTE9OLlZlY3RvcjMpOiB2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XG4gICAgICAgICAgICBpZiAoY3Jvd2QgIT0gbnVsbCAmJiB0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSBjcm93ZC5nZXRBZ2VudE5leHRUYXJnZXRQYXRoVG9SZWYodGhpcy5tX2FnZW50SW5kZXgsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIENhbmNlbCBjdXJyZW50IHdheXBvaW50IHBhdGggbmF2aWdhdGlvbi4gKi9cbiAgICAgICAgcHVibGljIGNhbmNlbE5hdmlnYXRpb24oKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uID0gbnVsbDsgLy8gTm90ZTogRGlzYWJsZSBBdXRvIFBvc2l0aW9uIFVwZGF0ZVxuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IHRoaXMuZ2V0QWdlbnRQb3NpdGlvbigpO1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uICE9IG51bGwgJiYgY3Jvd2QgIT0gbnVsbCAmJiB0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY3Jvd2QuYWdlbnRUZWxlcG9ydCh0aGlzLm1fYWdlbnRJbmRleCwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBwb3NpdGlvbi55ICs9ICh0aGlzLmJhc2VPZmZzZXQgKyB0aGlzLmhlaWdodE9mZnNldCk7XG4gICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNvcHlGcm9tKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVjYXN0IERldG91ciBDcm93ZCBBZ2VudCBTdGF0ZXNcbiAgICAgKi9cbiAgICBleHBvcnQgZW51bSBDcm93ZEFnZW50U3RhdGUge1xuICAgICAgICBEVF9DUk9XREFHRU5UX1NUQVRFX0lOVkFMSUQgPSAwLFx0XHQvLy88IFRoZSBhZ2VudCBpcyBub3QgaW4gYSB2YWxpZCBzdGF0ZS5cbiAgICAgICAgRFRfQ1JPV0RBR0VOVF9TVEFURV9XQUxLSU5HID0gMSxcdFx0Ly8vPCBUaGUgYWdlbnQgaXMgdHJhdmVyc2luZyBhIG5vcm1hbCBuYXZpZ2F0aW9uIG1lc2ggcG9seWdvbi5cbiAgICAgICAgRFRfQ1JPV0RBR0VOVF9TVEFURV9PRkZNRVNIID0gMixcdFx0Ly8vPCBUaGUgYWdlbnQgaXMgdHJhdmVyc2luZyBhbiBvZmYtbWVzaCBjb25uZWN0aW9uLlxuICAgIH07XG59IiwibW9kdWxlIEJBQllMT04ge1xuICAgIC8qKlxuICAgICAqIEJhYnlsb24gcmF5Y2FzdCB2ZWhpY2xlIGNvbnRyb2xsZXIgcHJvIGNsYXNzIChOYXRpdmUgQnVsbGV0IFBoeXNpY3MgMi44MilcbiAgICAgKiBAY2xhc3MgUmF5Y2FzdFZlaGljbGUgLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgUmF5Y2FzdFZlaGljbGUge1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZW1wQW1tb1ZlY3RvcjphbnkgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX2NlbnRlck1hc3M6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgIHByaXZhdGUgX2NoYXNzaXNNZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfdGVtcFZlY3RvclBvczpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcblxuICAgICAgICBwdWJsaWMgbG9ja2VkV2hlZWxJbmRleGVzOm51bWJlcltdID0gbnVsbDtcbiAgICAgICAgcHVibGljIGdldENlbnRlck1hc3NPZmZzZXQoKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5fY2VudGVyTWFzczsgfVxuICAgICAgICBwdWJsaWMgZ2V0SW50ZXJuYWxWZWhpY2xlKCk6YW55IHsgcmV0dXJuIHRoaXMubV92ZWhpY2xlOyB9XG4gICAgICAgIHB1YmxpYyBnZXRVcEF4aXMoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldFVwQXhpcygpOyB9XG4gICAgICAgIHB1YmxpYyBnZXRSaWdodEF4aXMoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldFJpZ2h0QXhpcygpOyB9XG4gICAgICAgIHB1YmxpYyBnZXRGb3J3YXJkQXhpcygpOm51bWJlciB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0Rm9yd2FyZEF4aXMoKTsgfVxuICAgICAgICBwdWJsaWMgZ2V0Rm9yd2FyZFZlY3RvcigpOmFueSB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0Rm9yd2FyZFZlY3RvcigpOyB9XG4gICAgICAgIHB1YmxpYyBnZXROdW1XaGVlbHMoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldE51bVdoZWVscygpOyB9XG4gICAgICAgIHB1YmxpYyBnZXRXaGVlbEluZm8od2hlZWw6bnVtYmVyKTphbnkgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldFdoZWVsSW5mbyh3aGVlbCk7IH0gLy8gQW1tby5idFdoZWVsSW5mb1xuICAgICAgICBwdWJsaWMgcmVzZXRTdXNwZW5zaW9uKCk6dm9pZCB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB0aGlzLm1fdmVoaWNsZS5yZXNldFN1c3BlbnNpb24oKTsgfVxuICAgICAgICBwdWJsaWMgc2V0UGl0Y2hDb250cm9sKHBpdGNoOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB0aGlzLm1fdmVoaWNsZS5zZXRQaXRjaENvbnRyb2wocGl0Y2gpOyB9XG4gICAgICAgIHB1YmxpYyBzZXRFbmdpbmVGb3JjZShwb3dlcjpudW1iZXIsIHdoZWVsOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB0aGlzLm1fdmVoaWNsZS5hcHBseUVuZ2luZUZvcmNlKHBvd2VyLCB3aGVlbCk7IH1cbiAgICAgICAgcHVibGljIHNldEJyYWtpbmdGb3JjZShicmFrZTpudW1iZXIsIHdoZWVsOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB0aGlzLm1fdmVoaWNsZS5zZXRCcmFrZShicmFrZSwgd2hlZWwpOyB9XG4gICAgICAgIHB1YmxpYyBnZXRXaGVlbFRyYW5zZm9ybSh3aGVlbDpudW1iZXIpOmFueSB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0V2hlZWxUcmFuc2Zvcm1XUyh3aGVlbCk7IH0gLy8gQW1tby5idFRyYW5zZm9ybVxuICAgICAgICBwdWJsaWMgdXBkYXRlV2hlZWxUcmFuc2Zvcm0od2hlZWw6bnVtYmVyLCBpbnRlcnBvbGF0ZTpib29sZWFuKTp2b2lkIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHRoaXMubV92ZWhpY2xlLnVwZGF0ZVdoZWVsVHJhbnNmb3JtKHdoZWVsLCBpbnRlcnBvbGF0ZSk7IH1cbiAgICAgICAgcHVibGljIGdldFVzZXJDb25zdHJhaW50VHlwZSgpOm51bWJlciB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0VXNlckNvbnN0cmFpbnRUeXBlKCk7IH1cbiAgICAgICAgcHVibGljIHNldFVzZXJDb25zdHJhaW50VHlwZSh1c2VyQ29uc3RyYWludFR5cGU6bnVtYmVyKTp2b2lkIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHRoaXMubV92ZWhpY2xlLnNldFVzZXJDb25zdHJhaW50VHlwZSh1c2VyQ29uc3RyYWludFR5cGUpOyB9XG4gICAgICAgIHB1YmxpYyBzZXRVc2VyQ29uc3RyYWludElkKHVpZDpudW1iZXIpOnZvaWQgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgdGhpcy5tX3ZlaGljbGUuc2V0VXNlckNvbnN0cmFpbnRJZCh1aWQpOyB9XG4gICAgICAgIHB1YmxpYyBnZXRVc2VyQ29uc3RyYWludElkKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiB0aGlzLm1fdmVoaWNsZS5nZXRVc2VyQ29uc3RyYWludElkKCk7IH1cbiAgICAgICAgcHVibGljIGdldFJhd0N1cnJlbnRTcGVlZEtwaCgpOm51bWJlciB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0Q3VycmVudFNwZWVkS21Ib3VyKCk7IH1cbiAgICAgICAgcHVibGljIGdldFJhd0N1cnJlbnRTcGVlZE1waCgpOm51bWJlciB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0Q3VycmVudFNwZWVkS21Ib3VyKCkgKiBCQUJZTE9OLlN5c3RlbS5LcGgyTXBoOyB9XG4gICAgICAgIHB1YmxpYyBnZXRBYnNDdXJyZW50U3BlZWRLcGgoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIE1hdGguYWJzKHRoaXMubV92ZWhpY2xlLmdldEN1cnJlbnRTcGVlZEttSG91cigpKTsgfVxuICAgICAgICBwdWJsaWMgZ2V0QWJzQ3VycmVudFNwZWVkTXBoKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiBNYXRoLmFicyh0aGlzLm1fdmVoaWNsZS5nZXRDdXJyZW50U3BlZWRLbUhvdXIoKSkgKiBCQUJZTE9OLlN5c3RlbS5LcGgyTXBoOyB9XG4gICAgICAgIHB1YmxpYyBnZXRWZWhpY2xlVHVuaW5nU3lzdGVtKCk6YW55IHsgcmV0dXJuIHRoaXMubV92ZWhpY2xlVHVuaW5nOyB9IC8vIEFtbW8uYnRWZWhpY2xlVHVuaW5nXG4gICAgICAgIHB1YmxpYyBnZXRDaGFzc2lzV29ybGRUcmFuc2Zvcm0oKTphbnkgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldENoYXNzaXNXb3JsZFRyYW5zZm9ybSgpOyB9IC8vIEFtbW8uYnRUcmFuc2Zvcm1cblxuICAgICAgICBwcm90ZWN0ZWQgbV92ZWhpY2xlOmFueSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX3ZlaGljbGVUdW5pbmc6YW55ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fdmVoaWNsZVJheWNhc3RlcjphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV92ZWhpY2xlQ29sbGlkZXJzOmFueVtdID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fdGVtcFRyYW5zZm9ybTphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV90ZW1wUG9zaXRpb246YW55ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fd2hlZWxEaXJlY3Rpb25DUzA6YW55ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIG1fd2hlZWxBeGxlQ1M6YW55ID0gbnVsbDtcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKGVudGl0eTpCQUJZTE9OLkFic3RyYWN0TWVzaCwgd29ybGQ6YW55LCBjZW50ZXI6QkFCWUxPTi5WZWN0b3IzLCBkZWZhdWx0QW5ndWxhckZhY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFzc2lzTWVzaCA9IGVudGl0eTtcbiAgICAgICAgICAgIHRoaXMuX2NlbnRlck1hc3MgPSBjZW50ZXI7XG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVR1bmluZyA9IG5ldyBBbW1vLmJ0VmVoaWNsZVR1bmluZygpO1xuICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgPSAoQW1tby5idFNtb290aFZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCkgPyBuZXcgQW1tby5idFNtb290aFZlaGljbGVSYXljYXN0ZXIod29ybGQpIDogbmV3IEFtbW8uYnREZWZhdWx0VmVoaWNsZVJheWNhc3Rlcih3b3JsZCk7XG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycyA9ICAodGhpcy5fY2hhc3Npc01lc2gubWV0YWRhdGEgIT0gbnVsbCAmJiB0aGlzLl9jaGFzc2lzTWVzaC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIHRoaXMuX2NoYXNzaXNNZXNoLm1ldGFkYXRhLnVuaXR5LndoZWVscyAhPSBudWxsKSA/IHRoaXMuX2NoYXNzaXNNZXNoLm1ldGFkYXRhLnVuaXR5LndoZWVscyA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZSA9IG5ldyBBbW1vLmJ0UmF5Y2FzdFZlaGljbGUodGhpcy5tX3ZlaGljbGVUdW5pbmcsIHRoaXMuX2NoYXNzaXNNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIpO1xuICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGUuc2V0Q29vcmRpbmF0ZVN5c3RlbSgwLCAxLCAyKTsgICAgICAgICAgICAgICAgLy8gWS1VUC1BWElTXG4gICAgICAgICAgICB0aGlzLm1fd2hlZWxEaXJlY3Rpb25DUzAgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgLTEsIDApOyAgICAvLyBZLVVQLUFYSVNcbiAgICAgICAgICAgIHRoaXMubV93aGVlbEF4bGVDUyA9IG5ldyBBbW1vLmJ0VmVjdG9yMygtMSwgMCwgMCk7ICAgICAgICAgIC8vIFktVVAtQVhJU1xuICAgICAgICAgICAgdGhpcy5tX3RlbXBQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1fdGVtcFRyYW5zZm9ybSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnNldHVwV2hlZWxJbmZvcm1hdGlvbihkZWZhdWx0QW5ndWxhckZhY3Rvcik7XG4gICAgICAgICAgICB3b3JsZC5hZGRBY3Rpb24odGhpcy5tX3ZlaGljbGUpO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZVdoZWVsSW5mb3JtYXRpb24oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV92ZWhpY2xlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVUdW5pbmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fdmVoaWNsZVR1bmluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVUdW5pbmcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1fd2hlZWxEaXJlY3Rpb25DUzAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fd2hlZWxEaXJlY3Rpb25DUzApO1xuICAgICAgICAgICAgICAgIHRoaXMubV93aGVlbERpcmVjdGlvbkNTMCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tX3doZWVsQXhsZUNTICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX3doZWVsQXhsZUNTKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2hlZWxBeGxlQ1MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV90ZW1wUG9zaXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubV90ZW1wUG9zaXRpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV90ZW1wVHJhbnNmb3JtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdGVtcFRyYW5zZm9ybSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIFN0YXRpYyBSYXljYXN0IFZlaGljbGUgSW5zdGFuY2UgSGVscGVyIEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyoqIEdldHMgdGhlIHJpZ2lkYm9keSByYXljYXN0IHZlaGljbGUgY29udHJvbGxlciBmb3IgdGhlIGVudGl0eS4gTm90ZTogV2hlZWwgY29sbGlkZXIgbWV0YWRhdGEgaW5mb3JtYWlvbiBpcyByZXF1aXJlZCBmb3IgcmF5Y2FzdCB2ZWhpY2xlIGNvbnRyb2wuICovXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0SW5zdGFuY2Uoc2NlbmU6QkFCWUxPTi5TY2VuZSwgcmlnaWRib2R5OkJBQllMT04uUmlnaWRib2R5UGh5c2ljcywgZGVmYXVsdEFuZ3VsYXJGYWN0b3I6QkFCWUxPTi5WZWN0b3IzID0gbnVsbCk6QkFCWUxPTi5SYXljYXN0VmVoaWNsZSB7XG4gICAgICAgICAgICBjb25zdCBhbnlib2R5OmFueSA9IHJpZ2lkYm9keTtcbiAgICAgICAgICAgIGlmIChhbnlib2R5Lm1fcmF5Y2FzdFZlaGljbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChyaWdpZGJvZHkuaGFzV2hlZWxDb2xsaWRlcnMoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByaWdodEhhbmRlZDpib29sZWFuID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0UmlnaHRIYW5kZWQoc2NlbmUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmlnaHRIYW5kZWQgPT09IHRydWUpIEJBQllMT04uVG9vbHMuV2FybihcIlJheWNhc3QgdmVoaWNsZSBub3Qgc3VwcG9ydGVkIGZvciByaWdodCBoYW5kZWQgc2NlbmU6IFwiICsgYW55Ym9keS5fYWJzdHJhY3RNZXNoLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBhbnlib2R5Lm1fcmF5Y2FzdFZlaGljbGUgPSBuZXcgQkFCWUxPTi5SYXljYXN0VmVoaWNsZShhbnlib2R5Ll9hYnN0cmFjdE1lc2gsIGFueWJvZHkubV9waHlzaWNzV29ybGQsIGFueWJvZHkuX2NlbnRlck9mTWFzcywgZGVmYXVsdEFuZ3VsYXJGYWN0b3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIHdoZWVsIGNvbGxpZGVyIG1ldGFkYXRhIGZvdW5kIGZvcjogXCIgKyBhbnlib2R5Ll9hYnN0cmFjdE1lc2gubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFueWJvZHkubV9yYXljYXN0VmVoaWNsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gU21vb3RoIFJheWNhc3QgVmVoaWNsZSBBZHZhbmNlZCBIZWxwZXIgRnVuY3Rpb25zXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIGVuYWJsZSBtdWx0aSByYXljYXN0IGZsYWcgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0RW5hYmxlTXVsdGlSYXljYXN0KCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLmdldF9tX2VuYWJsZU11bHRpUmF5Y2FzdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX2VuYWJsZU11bHRpUmF5Y2FzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIGVuYWJsZSBtdWx0aSByYXljYXN0IGZsYWcgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0RW5hYmxlTXVsdGlSYXljYXN0KGZsYWc6Ym9vbGVhbik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZS5zZXRfbV9lbmFibGVNdWx0aVJheWNhc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRfbV9lbmFibGVNdWx0aVJheWNhc3QoZmxhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBzdGFibGUgZm9yY2UgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0U3RhYmlsaXppbmdGb3JjZSgpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuZ2V0X21fc3RhYmlsaXppbmdGb3JjZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX3N0YWJpbGl6aW5nRm9yY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgdmVoaWNsZSBzdGFibGUgZm9yY2UgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0U3RhYmlsaXppbmdGb3JjZShmb3JjZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fc3RhYmlsaXppbmdGb3JjZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlLnNldF9tX3N0YWJpbGl6aW5nRm9yY2UoZm9yY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgbWF4IHN0YWJsZSBmb3JjZSB1c2luZyBwaHlzaWNzIHZlaGljbGUgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRNYXhJbXB1bHNlRm9yY2UoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLmdldF9tX21heEltcHVsc2VGb3JjZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX21heEltcHVsc2VGb3JjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIG1heCBzdGFibGUgZm9yY2UgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0TWF4SW1wdWxzZUZvcmNlKGZvcmNlOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZS5zZXRfbV9tYXhJbXB1bHNlRm9yY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRfbV9tYXhJbXB1bHNlRm9yY2UoZm9yY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgc21vb3RoIGZseWluZyBpbXB1bHNlIGZvcmNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldFNtb290aEZseWluZ0ltcHVsc2UoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLmdldF9tX3Ntb290aEZseWluZ0ltcHVsc2UpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fdmVoaWNsZS5nZXRfbV9zbW9vdGhGbHlpbmdJbXB1bHNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIHZlaGljbGUgc21vb3RoIGZseWluZyBpbXB1bHNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIHNldFNtb290aEZseWluZ0ltcHVsc2UoaW1wdWxzZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fc21vb3RoRmx5aW5nSW1wdWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlLnNldF9tX3Ntb290aEZseWluZ0ltcHVsc2UoaW1wdWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSB0cmFjayBjb25uZWN0aW9uIGFjY2VsIGZvcmNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldFRyYWNrQ29ubmVjdGlvbkFjY2VsKCk6bnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZS5nZXRfbV90cmFja0Nvbm5lY3Rpb25BY2NlbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX3RyYWNrQ29ubmVjdGlvbkFjY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIHZlaGljbGUgdHJhY2sgY29ubmVjdGlvbiBhY2NlbCBmb3JjZSB1c2luZyBwaHlzaWNzIHZlaGljbGUgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRUcmFja0Nvbm5lY3Rpb25BY2NlbChmb3JjZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fdHJhY2tDb25uZWN0aW9uQWNjZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRfbV90cmFja0Nvbm5lY3Rpb25BY2NlbChmb3JjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBtaW4gd2hlZWwgY29udGFjdCBjb3VudCB1c2luZyBwaHlzaWNzIHZlaGljbGUgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRNaW5pbXVtV2hlZWxDb250YWN0cygpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuZ2V0X21fbWluaW11bVdoZWVsQ29udGFjdHMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fdmVoaWNsZS5nZXRfbV9taW5pbXVtV2hlZWxDb250YWN0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIG1pbiB3aGVlbCBjb250YWN0IGNvdW50IHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIHNldE1pbmltdW1XaGVlbENvbnRhY3RzKGZvcmNlOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZS5zZXRfbV9taW5pbXVtV2hlZWxDb250YWN0cykge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlLnNldF9tX21pbmltdW1XaGVlbENvbnRhY3RzKGZvcmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIGludGVycG9sYXRlIG1lc2ggbm9ybWFscyBmbGFnIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgZ2V0SW50ZXJwb2xhdGVOb3JtYWxzKCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX2ludGVycG9sYXRlTm9ybWFscykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX2ludGVycG9sYXRlTm9ybWFscygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB0aGUgdmVoaWNsZSBpbnRlcnBvbGF0ZSBtZXNoIG5vcm1hbHMgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRJbnRlcnBvbGF0ZU5vcm1hbHMoZmxhZzpib29sZWFuKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX2ludGVycG9sYXRlTm9ybWFscykge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX2ludGVycG9sYXRlTm9ybWFscyhmbGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIHNoYXBlIHRlc3RpbmcgbW9kZSB1c2luZyBwaHlzaWNzIHJheWNhc3RlciBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldFNoYXBlVGVzdGluZ01vZGUoKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fc2hhcGVUZXN0aW5nTW9kZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3NoYXBlVGVzdGluZ01vZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgdGhlIHZlaGljbGUgc2hhcGUgdGVzdGluZyBtb2RlIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0U2hhcGVUZXN0aW5nTW9kZShtb2RlOmJvb2xlYW4pOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fc2hhcGVUZXN0aW5nTW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX3NoYXBlVGVzdGluZ01vZGUobW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBzaGFwZSB0ZXN0aW5nIHNpemUgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRTaGFwZVRlc3RpbmdTaXplKCk6ZmxvYXQge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fc2hhcGVUZXN0aW5nU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3NoYXBlVGVzdGluZ1NpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgdGhlIHZlaGljbGUgc2hhcGUgdGVzdGluZyBtb2RlIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0U2hhcGVUZXN0aW5nU2l6ZShzaXplOmZsb2F0KTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX3NoYXBlVGVzdGluZ1NpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9zaGFwZVRlc3RpbmdTaXplKHNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgc2hhcGUgdGVzdCBwb2ludCBjb3VudCB1c2luZyBwaHlzaWNzIHJheWNhc3RlciBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldFNoYXBlVGVzdGluZ0NvdW50KCk6ZmxvYXQge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fdGVzdFBvaW50Q291bnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5nZXRfbV90ZXN0UG9pbnRDb3VudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB0aGUgdmVoaWNsZSBzaGFwZSB0ZXN0IHBvaW50IGNvdW50IHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0U2hhcGVUZXN0aW5nQ291bnQoY291bnQ6ZmxvYXQpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fdGVzdFBvaW50Q291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV90ZXN0UG9pbnRDb3VudChjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBzd2VlcCBwZW5ldHJhdGlvbiBhbW91bnQgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRTd2VlcFBlbmV0cmF0aW9uKCk6ZmxvYXQge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fc3dlZXBQZW5ldHJhdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3N3ZWVwUGVuZXRyYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgdGhlIHZlaGljbGUgc3dlZXAgcGVuZXRyYXRpb24gYW1vdW50IHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0U3dlZXBQZW5ldHJhdGlvbihhbW91bnQ6ZmxvYXQpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fc3dlZXBQZW5ldHJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX3N3ZWVwUGVuZXRyYXRpb24oYW1vdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gU21vb3RoIFJheWNhc3QgVmVoaWNsZSBBZHZhbmNlZCBDb2xsaXNpb24gRnVuY3Rpb25zXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIGNvbGxpc2lvbiBncm91cCBmaWx0ZXIgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25GaWx0ZXJHcm91cCgpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5nZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIGNvbGxpc2lvbiBncm91cCBmaWx0ZXIgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJHcm91cChncm91cDpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cChncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBjb2xsaXNpb24gbWFzayBmaWx0ZXIgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25GaWx0ZXJNYXNrKCk6bnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fY29sbGlzaW9uRmlsdGVyTWFzaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB0aGUgdmVoaWNsZSBjb2xsaXNpb24gbWFzayBmaWx0ZXIgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2s6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX2NvbGxpc2lvbkZpbHRlck1hc2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBSYXljYXN0IFZlaGljbGUgV2hlZWwgSW5mb3JtYXRpb24gSGVscGVyIEZ1bnRpb25zXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvKiogR2V0cyB0aGUgaW50ZXJuYWwgd2hlZWwgaW5kZXggYnkgaWQgc3RyaW5nLiAqL1xuICAgICAgICBwdWJsaWMgZ2V0V2hlZWxJbmRleEJ5SUQoaWQ6c3RyaW5nKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWw6YW55ID0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWQudG9Mb3dlckNhc2UoKSA9PT0gd2hlZWwuaWQudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgdGhlIGludGVybmFsIHdoZWVsIGluZGV4IGJ5IG5hbWUgc3RyaW5nLiAqL1xuICAgICAgICBwdWJsaWMgZ2V0V2hlZWxJbmRleEJ5TmFtZShuYW1lOnN0cmluZyk6bnVtYmVyIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZUNvbGxpZGVycyAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsOmFueSA9IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gd2hlZWwubmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyB0aGUgaW50ZXJuYWwgd2hlZWwgY29sbGlkZXIgaW5mb3JtYXRpb24uICovXG4gICAgICAgIHB1YmxpYyBnZXRXaGVlbENvbGxpZGVySW5mbyh3aGVlbDpudW1iZXIpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gLTE7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycy5sZW5ndGggPiAwICYmIHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aCA+IHdoZWVsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnNbd2hlZWxdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyB0aGUgaW50ZXJuYWwgd2hlZWwgaHViIHRyYW5zZm9ybSBtZXNoIGJ5IGluZGV4LiBVc2VkIHRvIHJvdGF0ZSBhbmQgYm91bmNlIHdoZWVscy4gKi9cbiAgICAgICAgcHVibGljIHNldFdoZWVsVHJhbnNmb3JtTWVzaCh3aGVlbDpudW1iZXIsIHRyYW5zZm9ybTpCQUJZTE9OLlRyYW5zZm9ybU5vZGUpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybSA9PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB3aGVlbGluZm86YW55ID0gdGhpcy5nZXRXaGVlbEluZm8od2hlZWwpO1xuICAgICAgICAgICAgaWYgKHdoZWVsaW5mbyAhPSBudWxsKSB3aGVlbGluZm8udHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBTbW9vdGggUmF5Y2FzdCBWZWhpY2xlIFNlZXJpbmcgSGVscGVyIEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgcHVibGljIGdldFZpc3VhbFN0ZWVyaW5nQW5nbGUod2hlZWw6bnVtYmVyKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgY29uc3Qgd2hlZWxpbmZvOmFueSA9IHRoaXMuZ2V0V2hlZWxJbmZvKHdoZWVsKTtcbiAgICAgICAgICAgIGlmICh3aGVlbGluZm8gIT0gbnVsbCAmJiB3aGVlbGluZm8uc3RlZXJpbmdBbmdsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGU7IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0VmlzdWFsU3RlZXJpbmdBbmdsZShhbmdsZTpudW1iZXIsIHdoZWVsOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBjb25zdCB3aGVlbGluZm86YW55ID0gdGhpcy5nZXRXaGVlbEluZm8od2hlZWwpO1xuICAgICAgICAgICAgaWYgKHdoZWVsaW5mbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0UGh5c2ljc1N0ZWVyaW5nQW5nbGUod2hlZWw6bnVtYmVyKTpudW1iZXIge1xuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5tX3ZlaGljbGUuZ2V0U3RlZXJpbmdWYWx1ZSh3aGVlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXRQaHlzaWNzU3RlZXJpbmdBbmdsZShhbmdsZTpudW1iZXIsIHdoZWVsOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlLnNldFN0ZWVyaW5nVmFsdWUoYW5nbGUsIHdoZWVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBTZXR1cCBXaGVlbCBJbmZvcm1hdGlvbiBIZWxwZXIgRnVudGlvbnMgLy9cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgcHJvdGVjdGVkIHNldHVwV2hlZWxJbmZvcm1hdGlvbihkZWZhdWx0QW5ndWxhckZhY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBudWxsKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGFzc2lzTWVzaCAhPSBudWxsICYmIHRoaXMuX2NoYXNzaXNNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2NoYXNzaXNNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRBbmd1bGFyRmFjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9weWJ1bGxldC5vcmcvQnVsbGV0L3BocEJCMy92aWV3dG9waWMucGhwP3Q9ODE1M1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IHZlaGljbGUgZnJvbSBmbGlwIG92ZXIsIGJ5IGxpbWl0IHRoZSByb3RhdGlvbiAgb24gZm9yd2FyZCBheGlzIG9yIGxpbWl0IGFuZ2xlcyBmb3IgdmVoaWNsZSBzdGFibGl6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmF5Y2FzdFZlaGljbGUuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShkZWZhdWx0QW5ndWxhckZhY3Rvci54LCBkZWZhdWx0QW5ndWxhckZhY3Rvci55LCBkZWZhdWx0QW5ndWxhckZhY3Rvci56KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhc3Npc01lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldEFuZ3VsYXJGYWN0b3IoQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3Rvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXNzaXNNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRBY3RpdmF0aW9uU3RhdGUoQkFCWUxPTi5Db2xsaXNpb25TdGF0ZS5ESVNBQkxFX0RFQUNUSVZBVElPTik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycyAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWw6YW55ID0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbE5hbWU6c3RyaW5nID0gKHdoZWVsLm5hbWUgIT0gbnVsbCkgPyB3aGVlbC5uYW1lIDogXCJVbmtub3duXCI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsUmFkaXVzOm51bWJlciA9ICh3aGVlbC5yYWRpdXMgIT0gbnVsbCkgPyB3aGVlbC5yYWRpdXMgOiAwLjM1O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbEhhbGZUcmFjazpudW1iZXIgPSAod2hlZWwucG9zaXRpb24gIT0gbnVsbCAmJiB3aGVlbC5wb3NpdGlvbi5sZW5ndGggPj0gMykgPyB3aGVlbC5wb3NpdGlvblswXSA6IDE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsQXhpc1Bvc2l0aW9uOm51bWJlciA9ICh3aGVlbC5wb3NpdGlvbiAhPSBudWxsICYmIHdoZWVsLnBvc2l0aW9uLmxlbmd0aCA+PSAzKSA/IHdoZWVsLnBvc2l0aW9uWzJdIDogLTE7XG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFJheWNhc3QgV2hlZWwgU2NyaXB0IFByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWxDb25uZWN0aW9uUG9pbnQ6bnVtYmVyID0gKHdoZWVsLndoZWVsY29ubmVjdGlvbnBvaW50ICE9IG51bGwpID8gd2hlZWwud2hlZWxjb25uZWN0aW9ucG9pbnQgOiAwLjU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbnNpb25SZXN0TGVuZ3RoOm51bWJlciA9ICh3aGVlbC5zdXNwZW5zaW9ucmVzdGxlbmd0aCAhPSBudWxsKSA/IHdoZWVsLnN1c3BlbnNpb25yZXN0bGVuZ3RoIDogMC4zO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc2Zyb250d2hlZWw6Ym9vbGVhbiA9ICh3aGVlbC5mcm9udHdoZWVsICE9IG51bGwpID8gdHJ1ZSA6ICh3aGVlbE5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZnJvbnRcIikgPj0gMCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVscG9zaXRpb246bnVtYmVyID0gd2hlZWxBeGlzUG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsdHJhY2tpbmc6bnVtYmVyID0gd2hlZWxIYWxmVHJhY2s7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlcm1hc3N4Om51bWJlciA9IC10aGlzLl9jZW50ZXJNYXNzLng7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlcm1hc3N6Om51bWJlciA9IC10aGlzLl9jZW50ZXJNYXNzLno7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmF5Y2FzdFZlaGljbGUuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZSgod2hlZWx0cmFja2luZyArIGNlbnRlcm1hc3N4KSwgd2hlZWxDb25uZWN0aW9uUG9pbnQsICh3aGVlbHBvc2l0aW9uICsgY2VudGVybWFzc3opKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGUuYWRkV2hlZWwoQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3RvciwgdGhpcy5tX3doZWVsRGlyZWN0aW9uQ1MwLCB0aGlzLm1fd2hlZWxBeGxlQ1MsIHN1c3BlbnNpb25SZXN0TGVuZ3RoLCB3aGVlbFJhZGl1cywgdGhpcy5tX3ZlaGljbGVUdW5pbmcsIGlzZnJvbnR3aGVlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZS5nZXROdW1XaGVlbHMoKSA9PT0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWw6YW55ID0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdEZvcmNlOm51bWJlciA9ICh3aGVlbC50b3RhbHN1c3BlbnNpb25mb3JjZXMgIT0gbnVsbCkgPyB3aGVlbC50b3RhbHN1c3BlbnNpb25mb3JjZXMgOiAyNTAwMDsgICAgICAgIC8vIEJ1bGxldDogNjAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFRyYXZlbDpudW1iZXIgPSAod2hlZWwuc3VzcGVuc2lvbnRyYXZlbGNtICE9IG51bGwpID8gd2hlZWwuc3VzcGVuc2lvbnRyYXZlbGNtIDogMTAwOyAgICAgICAgICAgICAgIC8vIEJ1bGxldDogNTAwXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0Um9sbGluZzpudW1iZXIgPSAod2hlZWwucm9sbGluZmx1ZW5jZSAhPSBudWxsKSA/IHdoZWVsLnJvbGxpbmZsdWVuY2UgOiAwLjI7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVsbGV0OiAwLjFcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRGcmljdGlvbjpudW1iZXIgPSAod2hlZWwuZnJpY3Rpb25zbGlwICE9IG51bGwpID8gd2hlZWwuZnJpY3Rpb25zbGlwIDogMTA7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCdWxsZXQ6IDEwLjVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbnNpb25TdGlmZm5lc3M6bnVtYmVyID0gKHdoZWVsLnN1c3BlbnNpb25zdGlmZm5lc3MgIT0gbnVsbCkgPyB3aGVlbC5zdXNwZW5zaW9uc3RpZmZuZXNzIDogNTA7ICAgICAgICAvLyBCdWxsZXQ6IDUuODhcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbnNpb25Db21wcmVzc2lvbjpudW1iZXIgPSAod2hlZWwuZGFtcGluZ2NvbXByZXNzaW9uICE9IG51bGwpID8gd2hlZWwuZGFtcGluZ2NvbXByZXNzaW9uIDogMi41OyAgICAgICAvLyBCdWxsZXQ6IDAuODNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbnNpb25EYW1waW5nOm51bWJlciA9ICh3aGVlbC5kYW1waW5ncmVsYXhhdGlvbiAhPSBudWxsKSA/IHdoZWVsLmRhbXBpbmdyZWxheGF0aW9uIDogNC41OyAgICAgICAgICAgICAvLyBCdWxsZXQ6IDAuODhcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsaW5mbzphbnkgPSB0aGlzLm1fdmVoaWNsZS5nZXRXaGVlbEluZm8oaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoZWVsaW5mbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5yb3RhdGlvbkJvb3N0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uZGVmYXVsdEZyaWN0aW9uID0gZGVmYXVsdEZyaWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5zZXRfbV9mcmljdGlvblNsaXAoZGVmYXVsdEZyaWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fcm9sbEluZmx1ZW5jZShkZWZhdWx0Um9sbGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlZWxpbmZvLnNldF9tX21heFN1c3BlbnNpb25Gb3JjZShkZWZhdWx0Rm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5zZXRfbV9tYXhTdXNwZW5zaW9uVHJhdmVsQ20oZGVmYXVsdFRyYXZlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlZWxpbmZvLnNldF9tX3N1c3BlbnNpb25TdGlmZm5lc3Moc3VzcGVuc2lvblN0aWZmbmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlZWxpbmZvLnNldF9tX3doZWVsc0RhbXBpbmdDb21wcmVzc2lvbihzdXNwZW5zaW9uQ29tcHJlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5zZXRfbV93aGVlbHNEYW1waW5nUmVsYXhhdGlvbihzdXNwZW5zaW9uRGFtcGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJGYWlsZWQgdG8gY3JlYXRlIHByb3BlciBudW1iZXIgb2Ygd2hlZWxzIGZvcjogXCIgKyB0aGlzLl9jaGFzc2lzTWVzaC5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZVdoZWVsSW5mb3JtYXRpb24oKTp2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IHdoZWVsczpudW1iZXIgPSB0aGlzLmdldE51bVdoZWVscygpO1xuICAgICAgICAgICAgaWYgKHdoZWVscyA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleDpudW1iZXIgPSAwOyBpbmRleCA8IHdoZWVsczsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbGluZm86YW55ID0gdGhpcy5nZXRXaGVlbEluZm8oaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hlZWxpbmZvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2tlZDpib29sZWFuID0gdGhpcy5sb2NrZWRXaGVlbEluZm9ybWF0aW9uKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlV2hlZWxUcmFuc2Zvcm0oaW5kZXgsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBXaGVlbCBJbmZvcm1hdGlvbiBJbnRlcm5hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV90ZW1wVHJhbnNmb3JtID0gdGhpcy5nZXRXaGVlbFRyYW5zZm9ybShpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdGVtcFBvc2l0aW9uID0gdGhpcy5tX3RlbXBUcmFuc2Zvcm0uZ2V0T3JpZ2luKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTeW5jIFdoZWVsIEh1YiBUcmFuc2Zvcm0gVG8gUmF5Y2FzdCBXaGVlbFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoZWVsaW5mby50cmFuc2Zvcm0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybTpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSB3aGVlbGluZm8udHJhbnNmb3JtIGFzIEJBQllMT04uVHJhbnNmb3JtTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtLnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBXaGVlbCBIdWIgUG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQ29udmVydEFtbW9WZWN0b3IzVG9SZWYodGhpcy5tX3RlbXBQb3NpdGlvbiwgdGhpcy5fdGVtcFZlY3RvclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkludmVyc2VUcmFuc2Zvcm1Qb2ludFRvUmVmKHRyYW5zZm9ybS5wYXJlbnQgYXMgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlLCB0aGlzLl90ZW1wVmVjdG9yUG9zLCB0aGlzLl90ZW1wVmVjdG9yUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLnBvc2l0aW9uLnkgPSB0aGlzLl90ZW1wVmVjdG9yUG9zLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBXaGVlbCBIdWIgU3RlZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZWVyaW5nQW5nbGU6bnVtYmVyID0gKHdoZWVsaW5mby5zdGVlcmluZ0FuZ2xlICE9IG51bGwpID8gd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGUgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoMCwgc3RlZXJpbmdBbmdsZSwgMCwgdHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBXaGVlbCBTcGlubmVyIFJvdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGVlbGluZm8uc3Bpbm5lciAhPSBudWxsICYmIHdoZWVsaW5mby5zcGlubmVyLmFkZFJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9ja2VkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aGVlbHJvdGF0aW9uOm51bWJlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhUm90YXRpb246bnVtYmVyID0gKHdoZWVsaW5mby5nZXRfbV9kZWx0YVJvdGF0aW9uICE9IG51bGwpID8gd2hlZWxpbmZvLmdldF9tX2RlbHRhUm90YXRpb24oKSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdGF0aW9uQm9vc3Q6bnVtYmVyID0gKHdoZWVsaW5mby5yb3RhdGlvbkJvb3N0ICE9IG51bGwpID8gd2hlZWxpbmZvLnJvdGF0aW9uQm9vc3QgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YVJvdGF0aW9uIDwgMCkgd2hlZWxyb3RhdGlvbiA9IChkZWx0YVJvdGF0aW9uICsgLXJvdGF0aW9uQm9vc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugd2hlZWxyb3RhdGlvbiA9IChkZWx0YVJvdGF0aW9uICsgcm90YXRpb25Cb29zdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlZWxpbmZvLnNwaW5uZXIuYWRkUm90YXRpb24od2hlZWxyb3RhdGlvbiwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIGxvY2tlZFdoZWVsSW5mb3JtYXRpb24od2hlZWw6bnVtYmVyKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMubG9ja2VkV2hlZWxJbmRleGVzICE9IG51bGwgJiYgdGhpcy5sb2NrZWRXaGVlbEluZGV4ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmxvY2tlZFdoZWVsSW5kZXhlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9ja2VkV2hlZWxJbmRleGVzW2luZGV4XSA9PT0gd2hlZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIGRlbGV0ZVdoZWVsSW5mb3JtYXRpb24oKTp2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IHdoZWVsczpudW1iZXIgPSB0aGlzLmdldE51bVdoZWVscygpO1xuICAgICAgICAgICAgaWYgKHdoZWVscyA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleDpudW1iZXIgPSAwOyBpbmRleCA8IHdoZWVsczsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmZvOmFueSA9IHRoaXMuZ2V0V2hlZWxJbmZvKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8udHJhbnNmb3JtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5mby50cmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5zcGlubmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5mby5zcGlubmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uc3RlZXJpbmdBbmdsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGluZm8uc3RlZXJpbmdBbmdsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLnJvdGF0aW9uQm9vc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpbmZvLnJvdGF0aW9uQm9vc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5kZWZhdWx0RnJpY3Rpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpbmZvLmRlZmF1bHRGcmljdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgQkFCWUxPTiB7XG4gICAgLyoqXG4gICAgICogQmFieWxvbiByZWFsdGltZSByZWZsZWN0aW9uIHN5c3RlbSBwcm8gY2xhc3MgKFVuaXR5IFN0eWxlIFJlYWx0aW1lIFJlZmxlY3Rpb24gUHJvYmVzKVxuICAgICAqIEBjbGFzcyBSZWFsdGltZVJlZmxlY3Rpb24gLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgUmVhbHRpbWVSZWZsZWN0aW9uIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBTS1lCT1hfRkxBRzpudW1iZXIgPSAxO1xuXG4gICAgICAgIHByaXZhdGUgcmVuZGVyTGlzdDpCQUJZTE9OLkFic3RyYWN0TWVzaFtdID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBwcm9iZUxpc3Q6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgcmVmcmVzaE1vZGU6bnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBjdWxsaW5nTWFzazpudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIGNsZWFyRmxhZ3M6bnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBwcm9iZWlkOm51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgdXNlUHJvYmVMaXN0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBpbmNsdWRlQ2hpbGRyZW46Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIHJlc29sdXRpb246bnVtYmVyID0gMTI4O1xuICAgICAgICBwcml2YXRlIGJveFBvczpCQUJZTE9OLlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIGJveFNpemU6QkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBib3hQcm9qZWN0aW9uOmJvb2xlYW4gPSBmYWxzZTtcblxuICAgICAgICBwdWJsaWMgZ2V0UHJvYmVMaXN0KCk6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSB7IHJldHVybiB0aGlzLnByb2JlTGlzdDsgfVxuICAgICAgICBwdWJsaWMgZ2V0UmVuZGVyTGlzdCgpOkJBQllMT04uQWJzdHJhY3RNZXNoW10geyByZXR1cm4gdGhpcy5yZW5kZXJMaXN0OyB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQgeyB0aGlzLmF3YWtlUmVhbHRpbVJlZmxlY3Rpb25zKCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQgeyB0aGlzLnN0YXJ0UmVhbHRpbVJlZmxlY3Rpb25zKCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IHRoaXMuZGVzdHJveVJlYWx0aW1SZWZsZWN0aW9ucygpOyB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlUmVhbHRpbVJlZmxlY3Rpb25zKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLnByb2JlaWQgPSB0aGlzLmdldFByb3BlcnR5KFwiaWRcIiwgdGhpcy5wcm9iZWlkKTtcbiAgICAgICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZXNvbHV0aW9uXCIsIHRoaXMucmVzb2x1dGlvbik7XG4gICAgICAgICAgICB0aGlzLmN1bGxpbmdNYXNrID0gdGhpcy5nZXRQcm9wZXJ0eShcImN1bGxpbmdcIiwgdGhpcy5jdWxsaW5nTWFzayk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyRmxhZ3MgPSB0aGlzLmdldFByb3BlcnR5KFwiY2xlYXJmbGFnc1wiLCB0aGlzLmNsZWFyRmxhZ3MpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoTW9kZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZWZyZXNobW9kZVwiLCB0aGlzLnJlZnJlc2hNb2RlKTtcbiAgICAgICAgICAgIHRoaXMudXNlUHJvYmVMaXN0ID0gdGhpcy5nZXRQcm9wZXJ0eShcInVzZXByb2JlbGlzdFwiLCB0aGlzLnVzZVByb2JlTGlzdCk7XG4gICAgICAgICAgICB0aGlzLmluY2x1ZGVDaGlsZHJlbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbmNsdWRlY2hpbGRyZW5cIiwgdGhpcy5pbmNsdWRlQ2hpbGRyZW4pO1xuICAgICAgICAgICAgdGhpcy5ib3hQcm9qZWN0aW9uID0gdGhpcy5nZXRQcm9wZXJ0eShcImJveHByb2plY3Rpb25cIiwgdGhpcy5ib3hQcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJveFByb2plY3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYnA6bnVtYmVyW10gPSB0aGlzLmdldFByb3BlcnR5KFwiYm91bmRpbmdib3hwb3NpdGlvblwiKTtcbiAgICAgICAgICAgICAgICBpZiAoYmJwICE9IG51bGwgJiYgYmJwLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm94UG9zID0gbmV3IEJBQllMT04uVmVjdG9yMyhiYnBbMF0sIGJicFsxXSwgYmJwWzJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYmJ6Om51bWJlcltdID0gdGhpcy5nZXRQcm9wZXJ0eShcImJvdW5kaW5nYm94c2l6ZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoYmJ6ICE9IG51bGwgJiYgYmJ6Lmxlbmd0aCA+PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm94U2l6ZSA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoYmJ6WzBdLCBiYnpbMV0sIGJielsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0UmVhbHRpbVJlZmxlY3Rpb25zKCk6dm9pZCB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgY29uc3QgcXVhbGl0eTpCQUJZTE9OLlJlbmRlclF1YWxpdHkgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRSZW5kZXJRdWFsaXR5KCk7XG4gICAgICAgICAgICBjb25zdCBhbGxvd1JlZmxlY3Rpb25zOmJvb2xlYW4gPSAocXVhbGl0eSA9PT0gQkFCWUxPTi5SZW5kZXJRdWFsaXR5LkhpZ2gpO1xuICAgICAgICAgICAgaWYgKGFsbG93UmVmbGVjdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdWxsaW5nTWFzayA9PT0gMCkgeyAvLyBOb3RoaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsZWFyRmxhZ3MgPT09IEJBQllMT04uUmVhbHRpbWVSZWZsZWN0aW9uLlNLWUJPWF9GTEFHKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBza3lib3g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRBbWJpZW50U2t5Ym94KHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNreWJveCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyTGlzdCA9PSBudWxsKSB0aGlzLnJlbmRlckxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpc3QucHVzaChza3lib3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1bGxpbmdNYXNrID09PSAtMSkgeyAvLyBFdmVyeXRoaW5nXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc2NlbmUubWVzaGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlcjpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gdGhpcy5zY2VuZS5tZXNoZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNoLmlkID09PSBcIkFtYmllbnQgU2t5Ym94XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyID0gKHRoaXMuY2xlYXJGbGFncyA9PT0gQkFCWUxPTi5SZWFsdGltZVJlZmxlY3Rpb24uU0tZQk9YX0ZMQUcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyTGlzdCA9PSBudWxsKSB0aGlzLnJlbmRlckxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJMaXN0LnB1c2gobWVzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gUGFyc2UgUmVuZGVyIExpc3QgTWV0YSBEYXRhXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbmRlckxpc3REYXRhOnN0cmluZ1tdID0gdGhpcy5nZXRQcm9wZXJ0eShcInJlbmRlcmxpc3RcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJMaXN0RGF0YSAhPSBudWxsICYmIHJlbmRlckxpc3REYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHJlbmRlckxpc3REYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbmRlcklkOnN0cmluZyA9IHJlbmRlckxpc3REYXRhW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJNZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0TWVzaEJ5SUQodGhpcy5zY2VuZSwgcmVuZGVySWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJNZXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyTGlzdCA9PSBudWxsKSB0aGlzLnJlbmRlckxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsTmFtZTpzdHJpbmcgPSByZW5kZXJNZXNoLm5hbWUgKyBcIi5EZXRhaWxcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsQ2hpbGRyZW46QkFCWUxPTi5Ob2RlW10gPSByZW5kZXJNZXNoLmdldENoaWxkcmVuKChub2RlOkJBQllMT04uTm9kZSkgPT4geyByZXR1cm4gKG5vZGUubmFtZSA9PT0gZGV0YWlsTmFtZSkgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXRhaWxDaGlsZHJlbiAhPSBudWxsICYmIGRldGFpbENoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTGlzdC5wdXNoKGRldGFpbENoaWxkcmVuWzBdIGFzIEJBQllMT04uQWJzdHJhY3RNZXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTGlzdC5wdXNoKHJlbmRlck1lc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsZWFyRmxhZ3MgPT09IEJBQllMT04uUmVhbHRpbWVSZWZsZWN0aW9uLlNLWUJPWF9GTEFHKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBza3lib3g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRBbWJpZW50U2t5Ym94KHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNreWJveCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyTGlzdCA9PSBudWxsKSB0aGlzLnJlbmRlckxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpc3QucHVzaChza3lib3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgLy8gR2V0IFByb2JlIFJlbmRlciBMaXN0XG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy51c2VQcm9iZUxpc3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmVMaXN0RGF0YTpzdHJpbmdbXSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwcm9iZWxpc3RcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9iZUxpc3REYXRhICE9IG51bGwgJiYgcHJvYmVMaXN0RGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwcm9iZUxpc3REYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JlSWQ6c3RyaW5nID0gcHJvYmVMaXN0RGF0YVtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmVNZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0TWVzaEJ5SUQodGhpcy5zY2VuZSwgcHJvYmVJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2JlTWVzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb2JlTGlzdCA9PSBudWxsKSB0aGlzLnByb2JlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2JlTGlzdC5wdXNoKHByb2JlTWVzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluY2x1ZGVDaGlsZHJlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGRNZXNoZXM6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSA9IHByb2JlTWVzaC5nZXRDaGlsZE1lc2hlcyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgY2hpbGRNZXNoZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGRNZXNoID0gY2hpbGRNZXNoZXNbaWldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvYmVMaXN0LnB1c2goY2hpbGRNZXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JlVGFnID0gXCJQUk9CRV9cIiArIHRoaXMucHJvYmVpZC50b0ZpeGVkKDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2JlTGlzdCA9IHRoaXMuc2NlbmUuZ2V0TWVzaGVzQnlUYWdzKHByb2JlVGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvYmVMaXN0ICE9IG51bGwgJiYgdGhpcy5wcm9iZUxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnN0cmFjdE1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSB0aGlzLmdldEFic3RyYWN0TWVzaCgpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnByb2JlTGlzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JlbWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IHRoaXMucHJvYmVMaXN0W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZmxlY3Rpb25Qcm9iZSA9IG5ldyBCQUJZTE9OLlJlZmxlY3Rpb25Qcm9iZShwcm9iZW1lc2gubmFtZSArIFwiLlByb2JlXCIsIHRoaXMucmVzb2x1dGlvbiwgdGhpcy5zY2VuZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZsZWN0aW9uUHJvYmUucmVmcmVzaFJhdGUgPSAodGhpcy5yZWZyZXNoTW9kZSA9PT0gMCkgPyBCQUJZTE9OLlJlbmRlclRhcmdldFRleHR1cmUuUkVGUkVTSFJBVEVfUkVOREVSX09OQ0UgOiBCQUJZTE9OLlJlbmRlclRhcmdldFRleHR1cmUuUkVGUkVTSFJBVEVfUkVOREVSX09ORVZFUllGUkFNRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmxlY3Rpb25Qcm9iZS5yZW5kZXJMaXN0LnB1c2goLi4udGhpcy5yZW5kZXJMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYnN0cmFjdE1lc2ggIT0gbnVsbCkgcmVmbGVjdGlvblByb2JlLmF0dGFjaFRvTWVzaChhYnN0cmFjdE1lc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm94UHJvamVjdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJveFNpemUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZsZWN0aW9uUHJvYmUuY3ViZVRleHR1cmUuYm91bmRpbmdCb3hTaXplID0gdGhpcy5ib3hTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib3hQb3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZsZWN0aW9uUHJvYmUuY3ViZVRleHR1cmUuYm91bmRpbmdCb3hQb3NpdGlvbiA9IHRoaXMuYm94UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9iZW1lc2gubWF0ZXJpYWwgaW5zdGFuY2VvZiBCQUJZTE9OLk11bHRpTWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtbWF0MTpCQUJZTE9OLk11bHRpTWF0ZXJpYWwgPSBwcm9iZW1lc2gubWF0ZXJpYWwuY2xvbmUocHJvYmVtZXNoLm1hdGVyaWFsLm5hbWUgKyBcIi5cIiArIHByb2JlbWVzaC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB4eCA9IDA7IHh4IDwgbW1hdDEuc3ViTWF0ZXJpYWxzLmxlbmd0aDsgeHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbWF0MSA9IG1tYXQxLnN1Yk1hdGVyaWFsc1t4eF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk1hdGVyaWFsOkJBQllMT04uUEJSTWF0ZXJpYWwgPSBtbWF0MS5zdWJNYXRlcmlhbHNbeHhdLmNsb25lKG1tYXQxLnN1Yk1hdGVyaWFsc1t4eF0ubmFtZSArIFwiX1wiICsgcHJvYmVtZXNoLm5hbWUpIGFzIEJBQllMT04uUEJSTWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1hdGVyaWFsLnVuZnJlZXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1hdGVyaWFsLnJlZmxlY3Rpb25UZXh0dXJlID0gcmVmbGVjdGlvblByb2JlLmN1YmVUZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtbWF0MS5zdWJNYXRlcmlhbHNbeHhdID0gc3ViTWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2JlbWVzaC5tYXRlcmlhbCA9IG1tYXQxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNoTWF0ZXJpYWw6QkFCWUxPTi5QQlJNYXRlcmlhbCA9IHByb2JlbWVzaC5tYXRlcmlhbC5jbG9uZShwcm9iZW1lc2gubWF0ZXJpYWwubmFtZSArIFwiLlwiICsgcHJvYmVtZXNoLm5hbWUpIGFzIEJBQllMT04uUEJSTWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaE1hdGVyaWFsLnVuZnJlZXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaE1hdGVyaWFsLnJlZmxlY3Rpb25UZXh0dXJlID0gcmVmbGVjdGlvblByb2JlLmN1YmVUZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2JlbWVzaC5tYXRlcmlhbCA9IG1lc2hNYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gIFxuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3lSZWFsdGltUmVmbGVjdGlvbnMoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMucHJvYmVMaXN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGlzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgQkFCWUxPTiB7XG4gICAgLyoqXG4gICAgICogQmFieWxvbiBmdWxsIHJpZ2lkYm9keSBwaHlzaWNzIHBybyBjbGFzcyAoTmF0aXZlIEJ1bGxldCBQaHlzaWNzIDIuODIpXG4gICAgICogQGNsYXNzIFJpZ2lkYm9keVBoeXNpY3MgLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgUmlnaWRib2R5UGh5c2ljcyBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcEFtbW9WZWN0b3I6YW55ID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcEFtbW9WZWN0b3JBdXg6YW55ID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcENlbnRlclRyYW5zZm9ybTphbnkgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX2Fic3RyYWN0TWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2lzS2luZW1hdGljOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfbWF4Q29sbGlzaW9uczpudW1iZXIgPSA0O1xuICAgICAgICBwcml2YXRlIF9pc1BoeXNpY3NSZWFkeTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX2NvbGxpc2lvbk9iamVjdDphbnkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9jZW50ZXJPZk1hc3M6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XG4gICAgICAgIHByaXZhdGUgX3RtcExpbmVhckZhY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfdG1wQW5ndWxhckZhY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgcHJpdmF0ZSBfdG1wQ2VudGVyT2ZNYXNzOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICBwcml2YXRlIF90bXBDb2xsaXNpb25Db250YWN0czpDb2xsaXNpb25Db250YWN0SW5mb1tdID0gbnVsbDtcbiAgICAgICAgcHVibGljIGdldCBpc0tpbmVtYXRpYygpOmJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNLaW5lbWF0aWM7IH1cbiAgICAgICAgcHVibGljIGdldCBjZW50ZXJPZk1hc3MoKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5fY2VudGVyT2ZNYXNzOyB9XG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaGFzIGVudGVyZWQgKi9cbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLkFic3RyYWN0TWVzaD4oKTtcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYSBjb2xsaXNpb24gY29udGFjdCBpcyBhY3RpdmUgKi9cbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhIGNvbGxpc2lvbiBjb250YWN0IGhhcyBleGl0ZWQgKi9cbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xuXG4gICAgICAgIHByb3RlY3RlZCBtX3BoeXNpY3NXb3JsZDphbnkgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9waHlzaWNzRW5naW5lOkJBQllMT04uSVBoeXNpY3NFbmdpbmUgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV9yYXljYXN0VmVoaWNsZTphbnkgPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHsgdGhpcy5hd2FrZVJpZ2lkYm9keVN0YXRlKCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpIDp2b2lkIHsgIHRoaXMudXBkYXRlUmlnaWRib2R5U3RhdGUoKTsgfVxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXIoKSA6dm9pZCB7ICB0aGlzLmFmdGVyUmlnaWRib2R5U3RhdGUoKTsgfVxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHsgdGhpcy5kZXN0cm95UmlnaWRib2R5U3RhdGUoKTsgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gUHJvdGVjdGVkIFJpZ2lkYm9keSBQaHlzaWNzIFN0YXRlIEZ1bmN0aW9ucyAvL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlUmlnaWRib2R5U3RhdGUoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaCA9IHRoaXMuZ2V0QWJzdHJhY3RNZXNoKCk7XG4gICAgICAgICAgICB0aGlzLl9pc0tpbmVtYXRpYyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpc0tpbmVtYXRpY1wiLCB0aGlzLl9pc0tpbmVtYXRpYyk7XG4gICAgICAgICAgICB0aGlzLm1fcGh5c2ljc1dvcmxkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0UGh5c2ljc1dvcmxkKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NFbmdpbmUgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzRW5naW5lKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhICE9IG51bGwgJiYgdGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS51bml0eS5waHlzaWNzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jZW50ZXJPZk1hc3MgPSAodGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEudW5pdHkucGh5c2ljcy5jZW50ZXIgIT0gbnVsbCkgPyBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZVZlY3RvcjModGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEudW5pdHkucGh5c2ljcy5jZW50ZXIsIHRoaXMuX2NlbnRlck9mTWFzcykgOiB0aGlzLl9jZW50ZXJPZk1hc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NvbnNvbGUud2FybihcIlN0YXJ0aW5nIFJpZ2lkYm9keSBQaHlzaWNzIEZvcjogXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuc2V0TWF4Tm90aWZpY2F0aW9ucyh0aGlzLl9tYXhDb2xsaXNpb25zKTtcbiAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICB0aGlzLl9pc1BoeXNpY3NSZWFkeSA9ICh0aGlzLm1fcGh5c2ljc0VuZ2luZSAhPSBudWxsICYmIHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBjb2xsaXNpb25Hcm91cDpudW1iZXIgPSAodGhpcy5faXNLaW5lbWF0aWMgPT09IHRydWUpID8gQkFCWUxPTi5Db2xsaXNpb25GaWx0ZXJzLlN0YXRpY0ZpbHRlciA6IEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5EZWZhdWx0RmlsdGVyO1xuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uTWFzazpudW1iZXIgPSAodGhpcy5faXNLaW5lbWF0aWMgPT09IHRydWUpID8gQkFCWUxPTi5Db2xsaXNpb25GaWx0ZXJzLkFsbEZpbHRlciBeIEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5TdGF0aWNGaWx0ZXIgOiBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuQWxsRmlsdGVyO1xuICAgICAgICAgICAgdGhpcy5zZXRDb2xsaXNpb25GaWx0ZXJHcm91cChjb2xsaXNpb25Hcm91cCk7XG4gICAgICAgICAgICB0aGlzLnNldENvbGxpc2lvbkZpbHRlck1hc2soY29sbGlzaW9uTWFzayk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Qm9keUNvbGxpc2lvbkNvbnRhY3RzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZVJpZ2lkYm9keVN0YXRlKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLnN5bmNyb25pemVWZWhpY2xlQ29udHJvbGxlcigpO1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBhZnRlclJpZ2lkYm9keVN0YXRlKCk6dm9pZCB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlQm9keUNvbGxpc2lvbkNvbnRhY3RzKCk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Qm9keUNvbGxpc2lvbkNvbnRhY3RzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3lSaWdpZGJvZHlTdGF0ZSgpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NXb3JsZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1fcGh5c2ljc0VuZ2luZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5tX3JheWNhc3RWZWhpY2xlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3JheWNhc3RWZWhpY2xlLmRpc3Bvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3JheWNhc3RWZWhpY2xlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tX3JheWNhc3RWZWhpY2xlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlck9ic2VydmFibGUuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlck9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvblN0YXlPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fY29sbGlzaW9uT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBMaWZlIEN5Y2xlIEV2ZW50IEZ1bmN0aW9ucyAvL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIHByb3RlY3RlZCBzeW5jcm9uaXplVmVoaWNsZUNvbnRyb2xsZXIoKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fcmF5Y2FzdFZlaGljbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fcmF5Y2FzdFZlaGljbGUudXBkYXRlV2hlZWxJbmZvcm1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcmF5Y2FzdFZlaGljbGUudXBkYXRlV2hlZWxJbmZvcm1hdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgcGFyc2VCb2R5Q29sbGlzaW9uQ29udGFjdHMoKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BoeXNpY3NSZWFkeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0VudGVyT2JzZXJ2ZXJzOmJvb2xlYW4gPSB0aGlzLm9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlLmhhc09ic2VydmVycygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1N0YXlPYnNlcnZlcnM6Ym9vbGVhbiA9IHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFeGl0T2JzZXJ2ZXJzOmJvb2xlYW4gPSB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0VudGVyT2JzZXJ2ZXJzIHx8IGhhc1N0YXlPYnNlcnZlcnMgfHwgaGFzRXhpdE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwOyAvLyBOb3RlOiBGbGFnIEFsbCBDb2xsaXNpb24gTGlzdCBJdGVtcyBGb3IgRW5kIENvbnRhY3QgU3RhdGVcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0c1tpbmRleF0ucmVzZXQgPSB0cnVlOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBPdmVybGFwcGluZyBCb2R5IENvbnRhY3QgT2JqZWN0c1xuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBsZXQgY29sbGlzaW9uQ291bnQ6bnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCg8YW55PnRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IpLnRtcENvbGxpc2lvbk9iamVjdHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQ29sbGlzaW9uT2JqZWN0TWFwOmFueSA9ICg8YW55PnRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IpLnRtcENvbGxpc2lvbk9iamVjdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRhY3RLZXkgaW4gdG1wQ29sbGlzaW9uT2JqZWN0TWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kaW5kZXg6bnVtYmVyID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFjdE1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSB0bXBDb2xsaXNpb25PYmplY3RNYXBbY29udGFjdEtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrOkJBQllMT04uQ29sbGlzaW9uQ29udGFjdEluZm8gPSB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVjay5tZXNoICE9IG51bGwgJiYgY2hlY2subWVzaCA9PT0gY29udGFjdE1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZGluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNlcnQ6QkFCWUxPTi5Db2xsaXNpb25Db250YWN0SW5mbyA9IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnNlcnQubWVzaCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0Lm1lc2ggPSBjb250YWN0TWVzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQuc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydC5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkNvdW50ID4gdGhpcy5fbWF4Q29sbGlzaW9ucykgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggQm9keSBDb2xsaXNpb24gQ29udGFjdCBTdGF0ZVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm86QkFCWUxPTi5Db2xsaXNpb25Db250YWN0SW5mbyA9IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggT24gQ29sbGlzaW9uIEV4aXQgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXhpdE9ic2VydmVycyAmJiBpbmZvLm1lc2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGluZm8ubWVzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IENvbGxpc2lvbiBDb250YWN0IEluZm8gSXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ubWVzaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5zdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5zdGF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNwYXRjaCBPbiBDb2xsaXNpb24gRW50ZXIgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0VudGVyT2JzZXJ2ZXJzICYmIGluZm8ubWVzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhpbmZvLm1lc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggT24gQ29sbGlzaW9uIFN0YXkgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1N0YXlPYnNlcnZlcnMgJiYgaW5mby5tZXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoaW5mby5tZXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgcmVzZXRCb2R5Q29sbGlzaW9uQ29udGFjdHMoKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BoeXNpY3NSZWFkeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0VudGVyT2JzZXJ2ZXJzOmJvb2xlYW4gPSB0aGlzLm9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlLmhhc09ic2VydmVycygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1N0YXlPYnNlcnZlcnM6Ym9vbGVhbiA9IHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFeGl0T2JzZXJ2ZXJzOmJvb2xlYW4gPSB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0VudGVyT2JzZXJ2ZXJzIHx8IGhhc1N0YXlPYnNlcnZlcnMgfHwgaGFzRXhpdE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICAoPGFueT50aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yKS50bXBDb2xsaXNpb25PYmplY3RzID0ge307XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+dGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvcikudG1wQ29sbGlzaW9uT2JqZWN0cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIFJpZ2lkYm9keSBQaHlzaWNzIEdyYXZpdHkgQWR2YW5jZWQgSGVscGVyIEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgZ3Jhdml0eSB2YWx1ZSB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuICovXG4gICAgICAgIHB1YmxpYyBzZXRHcmF2aXR5KGdyYXZpdHk6QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0R3Jhdml0eSkge1xuICAgICAgICAgICAgICAgIGlmIChncmF2aXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShncmF2aXR5LngsIGdyYXZpdHkueSwgZ3Jhdml0eS56KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRHcmF2aXR5KEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIGVudGl0eSBncmF2aXR5IHZhbHVlIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cbiAgICAgICAgcHVibGljIGdldEdyYXZpdHkoKTpCQUJZTE9OLk51bGxhYmxlPEJBQllMT04uVmVjdG9yMz4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0OkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xuICAgICAgICAgICAgdGhpcy5nZXRHcmF2aXR5VG9SZWYocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGdyYXZpdHkgdmFsdWUgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xuICAgICAgICBwdWJsaWMgZ2V0R3Jhdml0eVRvUmVmKHJlc3VsdDpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRHcmF2aXR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3Jhdml0eTphbnkgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEdyYXZpdHkoKTtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5Db252ZXJ0QW1tb1ZlY3RvcjNUb1JlZihncmF2aXR5LCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIFJpZ2lkYm9keSBQaHlzaWNzIEltcG9zdG9yIEhlbHBlciBGdW5jdGlvbnMgLSAgVE9ETyAtIFVzZSBOYXRpdmUgUGh5c2ljcyBBUEkgLSA/Pz9cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyoqIEdldHMgbWFzcyBvZiBlbnRpdHkgdXNpbmcgcGh5c2ljcyBpbXBvc3Rvci4gKi9cbiAgICAgICAgcHVibGljIGdldE1hc3MoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IubWFzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgbWFzcyB0byBlbnRpdHkgdXNpbmcgcGh5c2ljcyBpbXBvc3Rvci4gKi9cbiAgICAgICAgcHVibGljIHNldE1hc3MobWFzczpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLm1hc3MgIT09IG1hc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5tYXNzID0gbWFzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGZyaWN0aW9uIGxldmVsIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXG4gICAgICAgIHB1YmxpYyBnZXRGcmljdGlvbigpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5mcmljdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEFwcGxpZXMgZnJpY3Rpb24gdG8gZW50aXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXG4gICAgICAgIHB1YmxpYyBzZXRGcmljdGlvbihmcmljdGlvbjpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLmZyaWN0aW9uICE9PSBmcmljdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLmZyaWN0aW9uID0gZnJpY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIHJlc3RpdHV0aW9uIG9mIGVudGl0eSB1c2luZyBwaHlzaWNzIGltcG9zdG9yLiAqL1xuICAgICAgICBwdWJsaWMgZ2V0UmVzdGl0dXRpb24oKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucmVzdGl0dXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIHJlc3RpdHV0aW9uIHRvIGVudGl0eSB1c2luZyBwaHlzaWNzIGltcG9zdG9yLiAqL1xuICAgICAgICBwdWJsaWMgc2V0UmVzdGl0dXRpb24ocmVzdGl0dXRpb246bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5yZXN0aXR1dGlvbiAhPT0gcmVzdGl0dXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5yZXN0aXR1dGlvbiA9IHJlc3RpdHV0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgbGluZWFyIHZlbG9jaXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXG4gICAgICAgIHB1YmxpYyBnZXRMaW5lYXJWZWxvY2l0eSgpOkJBQllMT04uTnVsbGFibGU8QkFCWUxPTi5WZWN0b3IzPiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OkJBQllMT04uVmVjdG9yMyA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5nZXRMaW5lYXJWZWxvY2l0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgbGluZWFyIHZlbG9jaXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXG4gICAgICAgIHB1YmxpYyBzZXRMaW5lYXJWZWxvY2l0eSh2ZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh2ZWxvY2l0eSAhPSBudWxsKSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnNldExpbmVhclZlbG9jaXR5KHZlbG9jaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgYW5ndWxhciB2ZWxvY2l0eSB1c2luZyBwaHlzaWNzIGltcG9zdG9yLiAqL1xuICAgICAgICBwdWJsaWMgZ2V0QW5ndWxhclZlbG9jaXR5KCk6QkFCWUxPTi5OdWxsYWJsZTxCQUJZTE9OLlZlY3RvcjM+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6QkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLmdldEFuZ3VsYXJWZWxvY2l0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgYW5ndWxhciB2ZWxvY2l0eSB1c2luZyBwaHlzaWNzIGltcG9zdG9yLiAqL1xuICAgICAgICBwdWJsaWMgc2V0QW5ndWxhclZlbG9jaXR5KHZlbG9jaXR5OkJBQllMT04uVmVjdG9yMyk6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZlbG9jaXR5ICE9IG51bGwpIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3Iuc2V0QW5ndWxhclZlbG9jaXR5KHZlbG9jaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBUcmFuc2Zvcm0gSGVscGVyIEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvKiogR2V0cyB0aGUgbmF0aXZlIHBoeXNpY3Mgd29ybGQgdHJhbnNmb3JtIG9iamVjdCB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuIChBbW1vLmJ0VHJhbnNmb3JtKSAqL1xuICAgICAgICBwdWJsaWMgZ2V0V29ybGRUcmFuc2Zvcm0oKTphbnkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDphbnkgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ID09IG51bGwpIHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwgJiYgdGhpcy5fY29sbGlzaW9uT2JqZWN0LmdldFdvcmxkVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRXb3JsZFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIHNldHMgdGhlIG5hdGl2ZSBwaHlzaWNzIHdvcmxkIHRyYW5zZm9ybSBvYmplY3QgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQW1tby5idFRyYW5zZm9ybSkgKi9cbiAgICAgICAgcHVibGljIHNldFdvcmxkVHJhbnNmb3JtKGJ0VHJhbnNmb3JtOmFueSk6YW55IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6YW55ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCAhPSBudWxsICYmIHRoaXMuX2NvbGxpc2lvbk9iamVjdC5zZXRXb3JsZFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25PYmplY3Quc2V0V29ybGRUcmFuc2Zvcm0oYnRUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5tYXNzID09PSAwICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0TW90aW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW90aW9uU3RhdGU6YW55ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRNb3Rpb25TdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobW90aW9uU3RhdGUgIT0gbnVsbCAmJiBtb3Rpb25TdGF0ZS5zZXRXb3JsZFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uU3RhdGUuc2V0V29ybGRUcmFuc2Zvcm0oYnRUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBSaWdpZGJvZHkgQXBwbGllZCBQaHlzaWNzIE1vdmVtZW50IEZ1bmN0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBwdWJsaWMgY2xlYXJGb3JjZXMoKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmNsZWFyRm9yY2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5jbGVhckZvcmNlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gXG4gICAgICAgIC8vIFRPRE8gLSBVc2UgRnVuY3Rpb24gU3BlY2lmaWMgVGVtcCBBbW1vIEJ1ZmZlciAvL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBcblxuICAgICAgICBwdWJsaWMgYXBwbHlUb3JxdWUodG9ycXVlOiBCQUJZTE9OLlZlY3RvcjMpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlUb3JxdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9ycXVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZSh0b3JxdWUueCwgdG9ycXVlLnksIHRvcnF1ZS56KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseVRvcnF1ZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYXBwbHlMb2NhbFRvcnF1ZSh0b3JxdWU6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUxvY2FsVG9ycXVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvcnF1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUodG9ycXVlLngsIHRvcnF1ZS55LCB0b3JxdWUueik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlMb2NhbFRvcnF1ZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhcHBseUltcHVsc2UoaW1wdWxzZTogQkFCWUxPTi5WZWN0b3IzLCByZWxfcG9zOiBCQUJZTE9OLlZlY3RvcjMpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlJbXB1bHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGltcHVsc2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvckF1eCA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3JBdXggPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShpbXB1bHNlLngsIGltcHVsc2UueSwgaW1wdWxzZS56KTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yQXV4LnNldFZhbHVlKHJlbF9wb3MueCwgcmVsX3Bvcy55LCByZWxfcG9zLnopO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5SW1wdWxzZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IsIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvckF1eCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBhcHBseUNlbnRyYWxJbXB1bHNlKGltcHVsc2U6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUNlbnRyYWxJbXB1bHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGltcHVsc2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGltcHVsc2UueCwgaW1wdWxzZS55LCBpbXB1bHNlLnopO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Q2VudHJhbEltcHVsc2UoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGFwcGx5VG9ycXVlSW1wdWxzZSh0b3JxdWU6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseVRvcnF1ZUltcHVsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9ycXVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZSh0b3JxdWUueCwgdG9ycXVlLnksIHRvcnF1ZS56KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseVRvcnF1ZUltcHVsc2UoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGFwcGx5Rm9yY2UoZm9yY2U6IEJBQllMT04uVmVjdG9yMywgcmVsX3BvczogQkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Rm9yY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvckF1eCA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3JBdXggPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShmb3JjZS54LCBmb3JjZS55LCBmb3JjZS56KTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yQXV4LnNldFZhbHVlKHJlbF9wb3MueCwgcmVsX3Bvcy55LCByZWxfcG9zLnopO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Rm9yY2UoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLCBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3JBdXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYXBwbHlDZW50cmFsRm9yY2UoZm9yY2U6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUNlbnRyYWxGb3JjZSkge1xuICAgICAgICAgICAgICAgIGlmIChmb3JjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUoZm9yY2UueCwgZm9yY2UueSwgZm9yY2Uueik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlDZW50cmFsRm9yY2UoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGFwcGx5Q2VudHJhbExvY2FsRm9yY2UoZm9yY2U6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUNlbnRyYWxMb2NhbEZvcmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShmb3JjZS54LCBmb3JjZS55LCBmb3JjZS56KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUNlbnRyYWxMb2NhbEZvcmNlKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBnZXRzIHJpZ2lkYm9keSBjZW50ZXIgb2YgbWFzcyAqL1xuICAgICAgICBwdWJsaWMgZ2V0Q2VudGVyT2ZNYXNzVHJhbnNmb3JtKCk6QkFCWUxPTi5WZWN0b3IzIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0Q2VudGVyT2ZNYXNzVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnR0cmFuc2Zvcm06YW55ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidHBvc2l0aW9uOmFueSA9IGJ0dHJhbnNmb3JtLmdldE9yaWdpbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RtcENlbnRlck9mTWFzcy5zZXQoYnRwb3NpdGlvbi54KCksIGJ0cG9zaXRpb24ueSgpLCBidHBvc2l0aW9uLnooKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG1wQ2VudGVyT2ZNYXNzO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIHJpZ2lkYm9keSBjZW50ZXIgb2YgbWFzcyAqL1xuICAgICAgICBwdWJsaWMgc2V0Q2VudGVyT2ZNYXNzVHJhbnNmb3JtKGNlbnRlcjogQkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldENlbnRlck9mTWFzc1RyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIGlmIChjZW50ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGNlbnRlci54LCBjZW50ZXIueSwgY2VudGVyLnopO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0gPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcENlbnRlclRyYW5zZm9ybS5zZXRJZGVudGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcENlbnRlclRyYW5zZm9ybS5zZXRPcmlnaW4oQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0oQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBOYXRpdmUgQm9keSBIZWxwZXIgRnVuY3Rpb25zXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8qKiBHZXRzIGVudGl0eSBsaW5lYXIgZmFjdG9yIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cbiAgICAgICAgcHVibGljIGdldExpbmVhckZhY3RvcigpOkJBQllMT04uVmVjdG9yMyB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldExpbmVhckZhY3Rvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhckZhY3RvcjphbnkgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldExpbmVhckZhY3RvcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RtcExpbmVhckZhY3Rvci5zZXQobGluZWFyRmFjdG9yLngoKSwgbGluZWFyRmFjdG9yLnkoKSwgbGluZWFyRmFjdG9yLnooKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG1wTGluZWFyRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBsaW5lYXIgZmFjdG9yIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cbiAgICAgICAgcHVibGljIHNldExpbmVhckZhY3RvcihmYWN0b3I6QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0TGluZWFyRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGZhY3Rvci54LCBmYWN0b3IueSwgZmFjdG9yLnopO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0TGluZWFyRmFjdG9yKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGFuZ3VsYXIgZmFjdG9yIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cbiAgICAgICAgcHVibGljIGdldEFuZ3VsYXJGYWN0b3IoKTpCQUJZTE9OLlZlY3RvcjMge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRBbmd1bGFyRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5ndWxhckZhY3RvcjphbnkgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEFuZ3VsYXJGYWN0b3IoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90bXBBbmd1bGFyRmFjdG9yLnNldChhbmd1bGFyRmFjdG9yLngoKSwgYW5ndWxhckZhY3Rvci55KCksIGFuZ3VsYXJGYWN0b3IueigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90bXBBbmd1bGFyRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBhbmd1bGFyIGZhY3RvciB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuICovXG4gICAgICAgIHB1YmxpYyBzZXRBbmd1bGFyRmFjdG9yKGZhY3RvcjpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRBbmd1bGFyRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGZhY3Rvci54LCBmYWN0b3IueSwgZmFjdG9yLnopO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0QW5ndWxhckZhY3RvcihCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIGVudGl0eSBhbmd1bGFyIGRhbXBpbmcgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xuICAgICAgICBwdWJsaWMgZ2V0QW5ndWxhckRhbXBpbmcoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRBbmd1bGFyRGFtcGluZykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QW5ndWxhckRhbXBpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGxpbmVhciBkYW1waW5nIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cbiAgICAgICAgcHVibGljIGdldExpbmVhckRhbXBpbmcoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRMaW5lYXJEYW1waW5nKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRMaW5lYXJEYW1waW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBkcmFnIGRhbXBpbmcgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xuICAgICAgICBwdWJsaWMgc2V0RGFtcGluZyhsaW5lYXI6bnVtYmVyLCBhbmd1bGFyOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldERhbXBpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldERhbXBpbmcobGluZWFyLCBhbmd1bGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgc2xlZXBpbmcgdGhyZXNob2xkIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cbiAgICAgICAgcHVibGljIHNldFNsZWVwaW5nVGhyZXNob2xkcyhsaW5lYXI6bnVtYmVyLCBhbmd1bGFyOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldFNsZWVwaW5nVGhyZXNob2xkcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0U2xlZXBpbmdUaHJlc2hvbGRzKGxpbmVhciwgYW5ndWxhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gUmlnaWRib2R5IFBoeXNpY3MgTmF0aXZlIEFkdmFuY2VkIEhlbHBlciBGdW5jdGlvbnNcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIFxuICAgICAgICAvKiogQ2hlY2tzIGlmIHJpZ2lkYm9keSBoYXMgd2hlZWwgY29sbGlkZXIgbWV0YWRhdGEgZm9yIHRoZSBlbnRpdHkuIE5vdGU6IFdoZWVsIGNvbGxpZGVyIG1ldGFkYXRhIGluZm9ybWFpb24gaXMgcmVxdWlyZWQgZm9yIHZlaGljbGUgY29udHJvbC4gKi9cbiAgICAgICAgcHVibGljIGhhc1doZWVsQ29sbGlkZXJzKCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2lzUGh5c2ljc1JlYWR5ID09PSB0cnVlICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5tZXRhZGF0YSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5tZXRhZGF0YS51bml0eS53aGVlbHMgIT0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91cyBjb250YWN0IG5vdGZpY2F0aW9ucyB0byBkaXNwYXRjaCBwZXIgZnJhbWUuIERlZmF1bHRzIHZhbHVlIGlzIDQuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIHNldE1heE5vdGlmaWNhdGlvbnMobWF4Om51bWJlcik6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5fbWF4Q29sbGlzaW9ucyA9IG1heDtcbiAgICAgICAgICAgIHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzID0gW107ICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fbWF4Q29sbGlzaW9uczsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzLnB1c2gobmV3IENvbGxpc2lvbkNvbnRhY3RJbmZvKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBjb2xsaXNpb24gYWN0aXZhdGlvbiBzdGF0ZSB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIHNldEFjdGl2YXRpb25TdGF0ZShzdGF0ZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ID09IG51bGwpIHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwgJiYgdGhpcy5fY29sbGlzaW9uT2JqZWN0LnNldEFjdGl2YXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25PYmplY3Quc2V0QWN0aXZhdGlvblN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGNvbGxpc2lvbiBmaWx0ZXIgZ3JvdXAgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25GaWx0ZXJHcm91cCgpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRCcm9hZHBoYXNlUHJveHkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEJyb2FkcGhhc2VQcm94eSgpLmdldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBjb2xsaXNpb24gZmlsdGVyIGdyb3VwIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0Q29sbGlzaW9uRmlsdGVyR3JvdXAoZ3JvdXA6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QnJvYWRwaGFzZVByb3h5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRCcm9hZHBoYXNlUHJveHkoKS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cChncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGNvbGxpc2lvbiBmaWx0ZXIgbWFzayB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cbiAgICAgICAgcHVibGljIGdldENvbGxpc2lvbkZpbHRlck1hc2soKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QnJvYWRwaGFzZVByb3h5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRCcm9hZHBoYXNlUHJveHkoKS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBjb2xsaXNpb24gZmlsdGVyIG1hc2sgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2s6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QnJvYWRwaGFzZVByb3h5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRCcm9hZHBoYXNlUHJveHkoKS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBHZXRzIHRoZSBlbnRpdHkgY29sbGlzaW9uIHNoYXBlIHR5cGUgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25TaGFwZVR5cGUoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpc2lvblNoYXBlOmFueSA9IHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRDb2xsaXNpb25TaGFwZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uU2hhcGUgIT0gbnVsbCAmJiBjb2xsaXNpb25TaGFwZS5nZXRTaGFwZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbGxpc2lvblNoYXBlLmdldFNoYXBlVHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyB0aGUgZW50aXR5IGNvbGxpc2lvbiBzaGFwZSBtYXJnaW4gdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25TaGFwZU1hcmdpbigpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ID09IG51bGwpIHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uU2hhcGU6YW55ID0gdGhpcy5fY29sbGlzaW9uT2JqZWN0LmdldENvbGxpc2lvblNoYXBlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25TaGFwZSAhPSBudWxsICYmIGNvbGxpc2lvblNoYXBlLmdldE1hcmdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY29sbGlzaW9uU2hhcGUuZ2V0TWFyZ2luKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBjb2xsaXNpb24gc2hhcGUgbWFyZ2luIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xuICAgICAgICBwdWJsaWMgc2V0Q29sbGlzaW9uU2hhcGVNYXJnaW4obWFyZ2luOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25PYmplY3QgPT0gbnVsbCkgdGhpcy5fY29sbGlzaW9uT2JqZWN0ID0gQW1tby5jYXN0T2JqZWN0KHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHksIEFtbW8uYnRDb2xsaXNpb25PYmplY3QpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25PYmplY3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xsaXNpb25TaGFwZTphbnkgPSB0aGlzLl9jb2xsaXNpb25PYmplY3QuZ2V0Q29sbGlzaW9uU2hhcGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvblNoYXBlICE9IG51bGwgJiYgY29sbGlzaW9uU2hhcGUuc2V0TWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25TaGFwZS5zZXRNYXJnaW4obWFyZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogR2V0cyB0aGUgZW50aXR5IGNvbnRhY3QgcHJvY2Vzc2luZyB0aHJlc2hvbGQgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIC8qIERFUFJFQ0lBVEVEOiBUT0RPIC0gTXVzdCBFeHBvc2UgVGhpcyBGdW5jdGlvbiBJbiBBbW1vLmlkbFxuICAgICAgICBwdWJsaWMgZ2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQoKTpudW1iZXIge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCAhPSBudWxsICYmIHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9jb2xsaXNpb25PYmplY3QuZ2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9Ki9cbiAgICAgICAgLyoqIFNldHMgZW50aXR5IGNvbnRhY3QgcHJvY2Vzc2luZyB0aHJlc2hvbGQgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXG4gICAgICAgIHB1YmxpYyBzZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCh0aHJlc2hvbGQ6bnVtYmVyKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCAhPSBudWxsICYmIHRoaXMuX2NvbGxpc2lvbk9iamVjdC5zZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25PYmplY3Quc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQodGhyZXNob2xkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAvL1xuICAgICAgICAvLyAqIFBoeXNpY3MgUGh5c2ljcyBIZWxwZXIgRnVuY3Rpb25zICogLy9cbiAgICAgICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIC8vXG5cbiAgICAgICAgLyoqIFRPRE8gKi9cbiAgICAgICAgcHVibGljIHN0YXRpYyBDcmVhdGVQaHlzaWNzTWV0YWRhdGEobWFzczpudW1iZXIsIGRyYWc6bnVtYmVyID0gMC4wLCBhbmd1bGFyRHJhZzpudW1iZXIgPSAwLjA1LCBjZW50ZXJNYXNzOlZlY3RvcjMgPSBudWxsKTogYW55IHtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlcjpCQUJZTE9OLlZlY3RvcjMgPSAoY2VudGVyTWFzcyAhPSBudWxsKSA/IGNlbnRlck1hc3MgOiBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmlnaWRib2R5XCIsXG4gICAgICAgICAgICAgICAgXCJtYXNzXCI6IG1hc3MsXG4gICAgICAgICAgICAgICAgXCJsZHJhZ1wiOiBkcmFnLFxuICAgICAgICAgICAgICAgIFwiYWRyYWdcIjogYW5ndWxhckRyYWcsXG4gICAgICAgICAgICAgICAgXCJjZW50ZXJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInhcIjogY2VudGVyLngsXG4gICAgICAgICAgICAgICAgICAgIFwieVwiOiBjZW50ZXIueSxcbiAgICAgICAgICAgICAgICAgICAgXCJ6XCI6IGNlbnRlci56XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBUT0RPICovXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ3JlYXRlQ29sbGlzaW9uTWV0YWRhdGEodHlwZTpzdHJpbmcsIHRyaWdnZXI6Ym9vbGVhbiA9IGZhbHNlLCBjb252ZXhtZXNoOmJvb2xlYW4gPSBmYWxzZSwgcmVzdGl0dXRpb246bnVtYmVyID0gMC4wLCBkeW5hbWljZnJpY3Rpb246bnVtYmVyID0gMC42LCBzdGF0aWNmcmljdGlvbjpudW1iZXIgPSAwLjYpOiBhbnkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogdHlwZSxcbiAgICAgICAgICAgICAgICBcInRyaWdnZXJcIjogdHJpZ2dlcixcbiAgICAgICAgICAgICAgICBcImNvbnZleG1lc2hcIjogY29udmV4bWVzaCxcbiAgICAgICAgICAgICAgICBcInJlc3RpdHV0aW9uXCI6IHJlc3RpdHV0aW9uLFxuICAgICAgICAgICAgICAgIFwiZHluYW1pY2ZyaWN0aW9uXCI6IGR5bmFtaWNmcmljdGlvbixcbiAgICAgICAgICAgICAgICBcInN0YXRpY2ZyaWN0aW9uXCI6IHN0YXRpY2ZyaWN0aW9uLFxuICAgICAgICAgICAgICAgIFwid2hlZWxpbmZvcm1hdGlvblwiOiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFRPRE8gKi9cbiAgICAgICAgcHVibGljIHN0YXRpYyBDcmVhdGVQaHlzaWNzUHJvcGVydGllcyhtYXNzOm51bWJlciwgZHJhZzpudW1iZXIgPSAwLjAsIGFuZ3VsYXJEcmFnOm51bWJlciA9IDAuMDUsIHVzZUdyYXZpdHk6Ym9vbGVhbiA9IHRydWUsIGlzS2luZW1hdGljOmJvb2xlYW4gPSBmYWxzZSk6IGFueSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwibWFzc1wiOiBtYXNzLFxuICAgICAgICAgICAgICAgIFwiZHJhZ1wiOiBkcmFnLFxuICAgICAgICAgICAgICAgIFwiYW5ndWxhckRyYWdcIjogYW5ndWxhckRyYWcsXG4gICAgICAgICAgICAgICAgXCJ1c2VHcmF2aXR5XCI6IHVzZUdyYXZpdHksXG4gICAgICAgICAgICAgICAgXCJpc0tpbmVtYXRpY1wiOiBpc0tpbmVtYXRpY1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBUT0RPICovXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU2V0dXBQaHlzaWNzQ29tcG9uZW50KHNjZW5lOkJBQllMT04uU2NlbmUsIGVudGl0eTogQkFCWUxPTi5BYnN0cmFjdE1lc2gpOiB2b2lkIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIlNldHVwIFBoeXNpY3MgQ29tcG9uZW50OiBcIiArIGVudGl0eS5uYW1lKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVudGl0eSk7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YTphbnkgPSAoZW50aXR5Lm1ldGFkYXRhICE9IG51bGwgJiYgZW50aXR5Lm1ldGFkYXRhLnVuaXR5ICE9IG51bGwpID8gZW50aXR5Lm1ldGFkYXRhLnVuaXR5IDogbnVsbDtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSAhPSBudWxsICYmIChtZXRhZGF0YS5waHlzaWNzICE9IG51bGwgfHwgbWV0YWRhdGEuY29sbGlzaW9uICE9IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgLy8gUGh5c2ljcyBNZXRhZGF0YVxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc3BoeXNpY3M6Ym9vbGVhbiA9IChtZXRhZGF0YS5waHlzaWNzICE9IG51bGwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzcm9vdDpib29sZWFuID0gKG1ldGFkYXRhLnBoeXNpY3MgIT0gbnVsbCAmJiBtZXRhZGF0YS5waHlzaWNzLnJvb3QgIT0gbnVsbCkgPyBtZXRhZGF0YS5waHlzaWNzLnJvb3QgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXNzOm51bWJlciA9IChtZXRhZGF0YS5waHlzaWNzICE9IG51bGwgJiYgbWV0YWRhdGEucGh5c2ljcy5tYXNzICE9IG51bGwpID8gbWV0YWRhdGEucGh5c2ljcy5tYXNzIDogMDtcbiAgICAgICAgICAgICAgICBjb25zdCBpc3N0YXRpYzpib29sZWFuID0gKG1hc3MgPT09IDApO1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBQaHlzaWNzIEltcG9zdG9yIE5vZGVcbiAgICAgICAgICAgICAgICBpZiAoaGFzcGh5c2ljcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNyb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZndoZWVsczphbnlbXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmR5bmFtaWNmcmljdGlvbjpudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZzdGF0aWNmcmljdGlvbjpudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZyZXN0aXR1dGlvbjpudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZ0cmlnZ2VyOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmY291bnQ6bnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IEJ1bGxldCBQaHlzaWNzIENlbnRlciBNYXNzIE11c3QgT2Zmc2V0IE1lc2hlcyAoTm8gV29ya2luZyBTZXQgQ2VudGVyIE1hc3MgUHJvcGVydHkgU3VwcG9ydClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlcjpCQUJZTE9OLlZlY3RvcjMgPSAobWV0YWRhdGEucGh5c2ljcyAhPSBudWxsICYmIG1ldGFkYXRhLnBoeXNpY3MuY2VudGVyICE9IG51bGwpID8gQkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VWZWN0b3IzKG1ldGFkYXRhLnBoeXNpY3MuY2VudGVyLCBCQUJZTE9OLlZlY3RvcjMuWmVybygpKSA6IEJBQllMT04uVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VudGVybm9kZXM6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlW10gPSBlbnRpdHkuZ2V0Q2hpbGRyZW4obnVsbCwgdHJ1ZSkgYXMgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VudGVybm9kZXMgIT0gbnVsbCAmJiBjZW50ZXJub2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVybm9kZXMuZm9yRWFjaCgoY2VudGVybm9kZTpCQUJZTE9OLkFic3RyYWN0TWVzaCkgPT4geyBjZW50ZXJub2RlLnBvc2l0aW9uLnN1YnRyYWN0SW5QbGFjZShjZW50ZXIpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZG5vZGVzOkJBQllMT04uQWJzdHJhY3RNZXNoW10gPSBlbnRpdHkuZ2V0Q2hpbGRyZW4obnVsbCwgZmFsc2UpIGFzIEJBQllMT04uQWJzdHJhY3RNZXNoW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRub2RlcyAhPSBudWxsICYmIGNoaWxkbm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkbm9kZXMuZm9yRWFjaCgoY2hpbGRub2RlOkJBQllMT04uQWJzdHJhY3RNZXNoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZG5vZGUubWV0YWRhdGEgIT0gbnVsbCAmJiBjaGlsZG5vZGUubWV0YWRhdGEudW5pdHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkbm9kZS5tZXRhZGF0YS51bml0eS5jb2xsaXNpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNjb2xsaXNpb246YW55ID0gY2hpbGRub2RlLm1ldGFkYXRhLnVuaXR5LmNvbGxpc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjd2hlZWxpbmZvcm1hdGlvbjphbnkgPSAoY2NvbGxpc2lvbi53aGVlbGluZm9ybWF0aW9uICE9IG51bGwpID8gY2NvbGxpc2lvbi53aGVlbGluZm9ybWF0aW9uIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3doZWVsaW5mb3JtYXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFjZSBXaGVlbCBDb2xsaWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiPj4+IFNldHVwIHJheWNhc3Qgd2hlZWwgY29sbGlkZXI6IFwiICsgY2hpbGRub2RlLm5hbWUgKyBcIiAtLT4gb24gdG86IFwiICsgZW50aXR5Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZndoZWVscyA9PSBudWxsKSBmd2hlZWxzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ3aGVlbHMucHVzaChjd2hlZWxpbmZvcm1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2R5bmFtaWNmcmljdGlvbjpudW1iZXIgPSAoY2NvbGxpc2lvbi5keW5hbWljZnJpY3Rpb24gIT0gbnVsbCkgPyBjY29sbGlzaW9uLmR5bmFtaWNmcmljdGlvbiA6IDAuNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3N0YXRpY2ZyaWN0aW9uOm51bWJlciA9IChjY29sbGlzaW9uLnN0YXRpY2ZyaWN0aW9uICE9IG51bGwpID8gY2NvbGxpc2lvbi5zdGF0aWNmcmljdGlvbiA6IDAuNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3Jlc3RpdHV0aW9uOm51bWJlciA9IChjY29sbGlzaW9uLnJlc3RpdHV0aW9uICE9IG51bGwpID8gY2NvbGxpc2lvbi5yZXN0aXR1dGlvbiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNpc3RyaWdnZXI6Ym9vbGVhbiA9IChjY29sbGlzaW9uLnRyaWdnZXIgIT0gbnVsbCkgPyBjY29sbGlzaW9uLnRyaWdnZXIgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2NvbGxpZGVyOnN0cmluZyA9IChjY29sbGlzaW9uLnR5cGUgIT0gbnVsbCkgPyBjY29sbGlzaW9uLnR5cGUgOiBcIkJveENvbGxpZGVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaW1wb3N0b3J0eXBlOm51bWJlciA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLkJveEltcG9zdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2NvbGxpZGVyID09PSBcIk1lc2hDb2xsaWRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBBbHdheXMgRm9yY2UgQ29udmV4IEh1bGwgSW1wb3N0b3IgVXNhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbXBvc3RvcnR5cGUgPSBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5Db252ZXhIdWxsSW1wb3N0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2NvbGxpZGVyID09PSBcIkNhcHN1bGVDb2xsaWRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaW1wb3N0b3J0eXBlID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQ2Fwc3VsZUltcG9zdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNjb2xsaWRlciA9PT0gXCJTcGhlcmVDb2xsaWRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaW1wb3N0b3J0eXBlID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuU3BoZXJlSW1wb3N0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaW1wb3N0b3J0eXBlID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQm94SW1wb3N0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNkeW5hbWljZnJpY3Rpb24gPiBmZHluYW1pY2ZyaWN0aW9uKSBmZHluYW1pY2ZyaWN0aW9uID0gY2R5bmFtaWNmcmljdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNzdGF0aWNmcmljdGlvbiA+IGZzdGF0aWNmcmljdGlvbikgZnN0YXRpY2ZyaWN0aW9uID0gY3N0YXRpY2ZyaWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Jlc3RpdHV0aW9uID4gZnJlc3RpdHV0aW9uKSBmcmVzdGl0dXRpb24gPSBjcmVzdGl0dXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaXN0cmlnZ2VyID09IHRydWUpIGZ0cmlnZ2VyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhY2UgQ29tcG91bmQgQ29sbGlkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nV2FybmluZyhcIj4+PiBTZXR1cCBcIiArIEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFBoeXNpY3NJbXBvc3RlclR5cGUoY2ltcG9zdG9ydHlwZSkudG9Mb3dlckNhc2UoKSArIFwiIGNvbXBvdW5kIGltcG9zdGVyIGZvcjogXCIgKyBjaGlsZG5vZGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkNyZWF0ZVBoeXNpY3NJbXBvc3RvcihzY2VuZSwgY2hpbGRub2RlLCBjaW1wb3N0b3J0eXBlLCB7IG1hc3M6IDAsIGZyaWN0aW9uOiAwLCByZXN0aXR1dGlvbjogMCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLkNvbmZpZ1JpZ2lkYm9keVBoeXNpY3Moc2NlbmUsIGNoaWxkbm9kZSwgdHJ1ZSwgZmFsc2UsIG1ldGFkYXRhLnBoeXNpY3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhY2UgUGh5c2ljcyBSb290XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nV2FybmluZyhcIj4+PiBTZXR1cCBwaHlzaWNzIHJvb3Qgbm8gaW1wb3N0ZXIgZm9yOiBcIiArIGVudGl0eS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5DcmVhdGVQaHlzaWNzSW1wb3N0b3Ioc2NlbmUsIGVudGl0eSwgQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuTm9JbXBvc3RvciwgeyBtYXNzOiBtYXNzLCBmcmljdGlvbjogZmR5bmFtaWNmcmljdGlvbiwgcmVzdGl0dXRpb246IGZyZXN0aXR1dGlvbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuQ29uZmlnUmlnaWRib2R5UGh5c2ljcyhzY2VuZSwgZW50aXR5LCBmYWxzZSwgZnRyaWdnZXIsIG1ldGFkYXRhLnBoeXNpY3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ3aGVlbHMgIT0gbnVsbCAmJiBmd2hlZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50aXR5Lm1ldGFkYXRhID09IG51bGwpIGVudGl0eS5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkubWV0YWRhdGEudW5pdHkgPT0gbnVsbCkgZW50aXR5Lm1ldGFkYXRhLnVuaXR5ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Lm1ldGFkYXRhLnVuaXR5LndoZWVscyA9IGZ3aGVlbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZG5vZGVzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5jb2xsaXNpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sbGlkZXI6c3RyaW5nID0gKG1ldGFkYXRhLmNvbGxpc2lvbi50eXBlICE9IG51bGwpID8gbWV0YWRhdGEuY29sbGlzaW9uLnR5cGUgOiBcIkJveENvbGxpZGVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb252ZXhtZXNoOmJvb2xlYW4gPSAobWV0YWRhdGEuY29sbGlzaW9uLmNvbnZleG1lc2ggIT0gbnVsbCkgPyBtZXRhZGF0YS5jb2xsaXNpb24uY29udmV4bWVzaCA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHluYW1pY2ZyaWN0aW9uOm51bWJlciA9IChtZXRhZGF0YS5jb2xsaXNpb24uZHluYW1pY2ZyaWN0aW9uICE9IG51bGwpID8gbWV0YWRhdGEuY29sbGlzaW9uLmR5bmFtaWNmcmljdGlvbiA6IDAuNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRpY2ZyaWN0aW9uOm51bWJlciA9IChtZXRhZGF0YS5jb2xsaXNpb24uc3RhdGljZnJpY3Rpb24gIT0gbnVsbCkgPyBtZXRhZGF0YS5jb2xsaXNpb24uc3RhdGljZnJpY3Rpb24gOiAwLjY7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN0aXR1dGlvbjpudW1iZXIgPSAobWV0YWRhdGEuY29sbGlzaW9uLnJlc3RpdHV0aW9uICE9IG51bGwpID8gbWV0YWRhdGEuY29sbGlzaW9uLnJlc3RpdHV0aW9uIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzdHJpZ2dlcjpib29sZWFuID0gKG1ldGFkYXRhLmNvbGxpc2lvbi50cmlnZ2VyICE9IG51bGwpID8gbWV0YWRhdGEuY29sbGlzaW9uLnRyaWdnZXIgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbXBvc3RvcnR5cGU6bnVtYmVyID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQm94SW1wb3N0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25maWcgUGh5c2ljcyBJbXBvc3RvclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpZGVyID09PSBcIk1lc2hDb2xsaWRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3N0b3J0eXBlID0gKGNvbnZleG1lc2ggPT09IHRydWUpID8gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQ29udmV4SHVsbEltcG9zdG9yIDogQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuTWVzaEltcG9zdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xsaWRlciA9PT0gXCJDYXBzdWxlQ29sbGlkZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9zdG9ydHlwZSA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLkNhcHN1bGVJbXBvc3RvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sbGlkZXIgPT09IFwiU3BoZXJlQ29sbGlkZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9zdG9ydHlwZSA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLlNwaGVyZUltcG9zdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBvc3RvcnR5cGUgPSBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5Cb3hJbXBvc3RvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYWNlIFBoeXNpY3MgSW1wb3N0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCI+Pj4gU2V0dXAgXCIgKyBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzSW1wb3N0ZXJUeXBlKGltcG9zdG9ydHlwZSkudG9Mb3dlckNhc2UoKSArIFwiIHBoeXNpY3MgaW1wb3N0b3IgZm9yOiBcIiArIGVudGl0eS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkNyZWF0ZVBoeXNpY3NJbXBvc3RvcihzY2VuZSwgZW50aXR5LCBpbXBvc3RvcnR5cGUsIHsgbWFzczogbWFzcywgZnJpY3Rpb246IChpc3N0YXRpYykgPyBzdGF0aWNmcmljdGlvbiA6IGR5bmFtaWNmcmljdGlvbiwgcmVzdGl0dXRpb246IHJlc3RpdHV0aW9uIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLkNvbmZpZ1JpZ2lkYm9keVBoeXNpY3Moc2NlbmUsIGVudGl0eSwgZmFsc2UsIGlzdHJpZ2dlciwgbWV0YWRhdGEucGh5c2ljcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgQ29uZmlnUmlnaWRib2R5UGh5c2ljcyhzY2VuZTpCQUJZTE9OLlNjZW5lLCBlbnRpdHk6IEJBQllMT04uQWJzdHJhY3RNZXNoLCBjaGlsZDpib29sZWFuLCB0cmlnZ2VyOmJvb2xlYW4sIHBoeXNpY3M6YW55KTp2b2lkIHtcbiAgICAgICAgICAgIGlmIChlbnRpdHkgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGVudGl0eS5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVudGl0eS5waHlzaWNzSW1wb3N0b3IuZXhlY3V0ZU5hdGl2ZUZ1bmN0aW9uKCh3b3JkOmFueSwgYm9keTphbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuYWN0aXZhdGUpIGJvZHkuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb2JqOmFueSA9IEFtbW8uY2FzdE9iamVjdChib2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgY29sb2JqLmVudGl0eSA9IGVudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gTGVnYWN5IEVkZ2UgQ29udGFjdCAoREVQUkVDSUFURUQ6IEtFRVAgRk9SIFJFRkVSRU5DRSlcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy9jb25zdCB3b3JsZDphbnkgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzV29ybGQoc2NlbmUpO1xuICAgICAgICAgICAgICAgICAgICAvL2lmICh3b3JsZCAhPSBudWxsICYmIHdvcmxkLmdlbmVyYXRlSW50ZXJuYWxFZGdlSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBjb25zdCBjb2xsaXNpb25TaGFwZTphbnkgPSBjb2xvYmouZ2V0Q29sbGlzaW9uU2hhcGUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgaWYgKGNvbGxpc2lvblNoYXBlICE9IG51bGwgJiYgY29sbGlzaW9uU2hhcGUuZ2V0U2hhcGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBjb25zdCBzaGFwZVR5cGU6bnVtYmVyID0gY29sbGlzaW9uU2hhcGUuZ2V0U2hhcGVUeXBlKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBpZiAoc2hhcGVUeXBlID09PSAyMSkgeyAvLyBUUklBTkdMRV9NRVNIX1NIQVBFX1BST1hZVFlQRVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGNvbnN0IHRyaWFuZ2xlU2hhcGU6YW55ID0gQW1tby5jYXN0T2JqZWN0KGNvbGxpc2lvblNoYXBlLCBBbW1vLmJ0QnZoVHJpYW5nbGVNZXNoU2hhcGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGlmICh0cmlhbmdsZVNoYXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgY29sb2JqLnRyaWFuZ2xlTWFwSW5mbyA9IG5ldyBBbW1vLmJ0VHJpYW5nbGVJbmZvTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIHdvcmxkLmdlbmVyYXRlSW50ZXJuYWxFZGdlSW5mbyh0cmlhbmdsZVNoYXBlLCBjb2xvYmoudHJpYW5nbGVNYXBJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIE1haW4gR3Jhdml0eVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmF2aXR5OmJvb2xlYW4gPSAocGh5c2ljcyAhPSBudWxsICYmIHBoeXNpY3MuZ3Jhdml0eSAhPSBudWxsKSA/IHBoeXNpY3MuZ3Jhdml0eSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChncmF2aXR5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuc2V0R3Jhdml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZSgwLDAsMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXRHcmF2aXR5KEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIlBoeXNpY3MgZW5naW5lIHNldCBncmF2aXR5IG92ZXJyaWRlIG5vdCBzdXBwb3J0ZWQgZm9yOiBcIiArIGVudGl0eS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBEcmFnIERhbXBpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuc2V0RGFtcGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGRyYWc6bnVtYmVyID0gKHBoeXNpY3MgIT0gbnVsbCAmJiBwaHlzaWNzLmxkcmFnICE9IG51bGwpID8gcGh5c2ljcy5sZHJhZyA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZHJhZzpudW1iZXIgPSAocGh5c2ljcyAhPSBudWxsICYmIHBoeXNpY3MuYWRyYWcgIT0gbnVsbCkgPyBwaHlzaWNzLmFkcmFnIDogMC4wNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0RGFtcGluZyhsZHJhZywgYWRyYWcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiUGh5c2ljcyBlbmdpbmUgc2V0IGRyYWcgZGFtcGluZyBub3Qgc3VwcG9ydGVkIGZvcjogXCIgKyBlbnRpdHkubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgQ29sbGlzaW9uIEZsYWdzXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnNldENvbGxpc2lvbkZsYWdzICYmIGJvZHkuZ2V0Q29sbGlzaW9uRmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBpZiAodHJpZ2dlciA9PT0gdHJ1ZSkgYm9keS5zZXRDb2xsaXNpb25GbGFncyhib2R5LmdldENvbGxpc2lvbkZsYWdzKCkgfCBCQUJZTE9OLkNvbGxpc2lvbkZsYWdzLkNGX05PX0NPTlRBQ1RfUkVTUE9OU0UgfCBCQUJZTE9OLkNvbGxpc2lvbkZsYWdzLkNGX0NVU1RPTV9NQVRFUklBTF9DQUxMQkFDSyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogZWxzZSBib2R5LnNldENvbGxpc2lvbkZsYWdzKGJvZHkuZ2V0Q29sbGlzaW9uRmxhZ3MoKSB8IEJBQllMT04uQ29sbGlzaW9uRmxhZ3MuQ0ZfQ1VTVE9NX01BVEVSSUFMX0NBTExCQUNLKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGlmIChtYXNzID09PSAwKSBib2R5LnNldENvbGxpc2lvbkZsYWdzKGJvZHkuZ2V0Q29sbGlzaW9uRmxhZ3MoKSB8IEJBQllMT04uQ29sbGlzaW9uRmxhZ3MuQ0ZfS0lORU1BVElDX09CSkVDVCk7IC8vIFNUQVRJQ19PQkpFQ1RcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSB0cnVlKSBib2R5LnNldENvbGxpc2lvbkZsYWdzKGJvZHkuZ2V0Q29sbGlzaW9uRmxhZ3MoKSB8IEJBQllMT04uQ29sbGlzaW9uRmxhZ3MuQ0ZfTk9fQ09OVEFDVF9SRVNQT05TRSk7IC8vIFRSSUdHRVJfT0JKRUNUXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldENvbGxpc2lvbkZsYWdzKGJvZHkuZ2V0Q29sbGlzaW9uRmxhZ3MoKSB8IEJBQllMT04uQ29sbGlzaW9uRmxhZ3MuQ0ZfQ1VTVE9NX01BVEVSSUFMX0NBTExCQUNLKTsgICAgICAgICAgICAgICAgICAvLyBDVVNUT01fTUFURVJJQUxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIlBoeXNpY3MgZW5naW5lIHNldCBjb2xsaXNpb24gZmxhZ3Mgbm90IHN1cHBvcnRlZCBmb3I6IFwiICsgZW50aXR5Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIEZyZWV6ZSBDb25zdHJhaW50c1xuICAgICAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlemU6YW55ID0gKHBoeXNpY3MgIT0gbnVsbCAmJiBwaHlzaWNzLmZyZWV6ZSAhPSBudWxsKSA/IHBoeXNpY3MuZnJlZXplIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyZWV6ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5zZXRMaW5lYXJGYWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlemVfcG9zX3g6bnVtYmVyID0gKGZyZWV6ZS5wb3NpdGlvbnggIT0gbnVsbCAmJiBmcmVlemUucG9zaXRpb254ID09PSB0cnVlKSA/IDAgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWV6ZV9wb3NfeTpudW1iZXIgPSAoZnJlZXplLnBvc2l0aW9ueSAhPSBudWxsICYmIGZyZWV6ZS5wb3NpdGlvbnkgPT09IHRydWUpID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJlZXplX3Bvc196Om51bWJlciA9IChmcmVlemUucG9zaXRpb256ICE9IG51bGwgJiYgZnJlZXplLnBvc2l0aW9ueiA9PT0gdHJ1ZSkgPyAwIDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUoZnJlZXplX3Bvc194LCBmcmVlemVfcG9zX3ksIGZyZWV6ZV9wb3Nfeik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXRMaW5lYXJGYWN0b3IoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiUGh5c2ljcyBlbmdpbmUgc2V0IGxpbmVhciBmYWN0b3Igbm90IHN1cHBvcnRlZCBmb3I6IFwiICsgZW50aXR5Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuc2V0QW5ndWxhckZhY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWV6ZV9yb3RfeDpudW1iZXIgPSAoZnJlZXplLnJvdGF0aW9ueCAhPSBudWxsICYmIGZyZWV6ZS5yb3RhdGlvbnggPT09IHRydWUpID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJlZXplX3JvdF95Om51bWJlciA9IChmcmVlemUucm90YXRpb255ICE9IG51bGwgJiYgZnJlZXplLnJvdGF0aW9ueSA9PT0gdHJ1ZSkgPyAwIDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlemVfcm90X3o6bnVtYmVyID0gKGZyZWV6ZS5yb3RhdGlvbnogIT0gbnVsbCAmJiBmcmVlemUucm90YXRpb256ID09PSB0cnVlKSA/IDAgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShmcmVlemVfcm90X3gsIGZyZWV6ZV9yb3RfeSwgZnJlZXplX3JvdF96KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldEFuZ3VsYXJGYWN0b3IoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiUGh5c2ljcyBlbmdpbmUgc2V0IGFuZ3VsYXIgZmFjdG9yIG5vdCBzdXBwb3J0ZWQgZm9yOiBcIiArIGVudGl0eS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyB2YWxpZCBwaHlzaWNzIGltcG9zdG9yIHRvIHNldHVwIGZvciBcIiArIGVudGl0eS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBCYWJ5bG9uIGNvbGxpc2lvbiBjb250YWN0IGluZm8gcHJvIGNsYXNzIChOYXRpdmUgQnVsbGV0IFBoeXNpY3MgMi44MilcbiAgICAgKiBAY2xhc3MgQ29sbGlzaW9uQ29udGFjdEluZm8gLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgQ29sbGlzaW9uQ29udGFjdEluZm8ge1xuICAgICAgICBwdWJsaWMgbWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBzdGF0ZTpudW1iZXIgPSAwO1xuICAgICAgICBwdWJsaWMgcmVzZXQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgIH0gICAgXG59IiwibW9kdWxlIEJBQllMT04ge1xuICAgIC8qKlxuICAgICAqIEJhYnlsb24gc2h1cmlrZW4gcGFydGljbGUgc3lzdGVtIHBybyBjbGFzcyAoVW5pdHkgU3R5bGUgU2h1cmlrZW4gUGFydGljbGUgU3lzdGVtKVxuICAgICAqIEBjbGFzcyBTaHVyaWtlblBhcnRpY2xlcyAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBTaHVyaWtlblBhcnRpY2xlcyBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQgeyAvKiBBd2FrZSBjb21wb25lbnQgZnVuY3Rpb24gKi8gfVxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7IC8qIFN0YXJ0IHJlbmRlciBsb29wIGZ1bmN0aW9uICovIH1cbiAgICAgICAgcHJvdGVjdGVkIHJlYWR5KCk6IHZvaWQgeyAvKiBFeGVjdXRlIHdoZW4gcmVhZHkgZnVuY3Rpb24gKi8gfVxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6IHZvaWQgeyAvKiBVcGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi8gfVxuICAgICAgICBwcm90ZWN0ZWQgbGF0ZSgpOiB2b2lkIHsgLyogTGF0ZSB1cGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi8gfVxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXIoKTogdm9pZCB7IC8qIEFmdGVyIHJlbmRlciBsb29wIGZ1bmN0aW9uICovIH1cbiAgICAgICAgcHJvdGVjdGVkIGZpeGVkKCk6IHZvaWQgeyAvKiBGaXhlZCB1cGRhdGUgcGh5c2ljcyBzdGVwIGZ1bmN0aW9uICovIH1cbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IC8qIERlc3Ryb3kgY29tcG9uZW50IGZ1bmN0aW9uICovIH1cbiAgICB9XG59IiwibW9kdWxlIEJBQllMT04ge1xuICAgIC8qKlxuICAgICAqIEJhYnlsb24gdGVycmFpbiBidWlsZGluZyBzeXN0ZW0gcHJvIGNsYXNzIChVbml0eSBTdHlsZSBUZXJyYWluIEJ1aWxkaW5nIFN5c3RlbSlcbiAgICAgKiBAY2xhc3MgVGVycmFpbkdlbmVyYXRvciAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBUZXJyYWluR2VuZXJhdG9yIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xuICAgICAgICBwcml2YXRlIHRyZWVJbnN0YW5jZXM6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlW10gPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHtcbiAgICAgICAgICAgIC8qIEluaXQgY29tcG9uZW50IGZ1bmN0aW9uICovXG4gICAgICAgICAgICAvLyBURVNUSU5HIE9OTFk6IGNvbnN0IHRyZWVzID0gdGhpcy5nZXRDaGlsZE5vZGUoXCJfdHJlZXNcIiwgQkFCWUxPTi5TZWFyY2hUeXBlLkVuZHNXaXRoLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIFRFU1RJTkcgT05MWTogaWYgKHRyZWVzICE9IG51bGwpIHRoaXMudHJlZUluc3RhbmNlcyA9IHRyZWVzLmdldENoaWxkcmVuKG51bGwsIHRydWUpIGFzIEJBQllMT04uVHJhbnNmb3JtTm9kZVtdO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRlcnJhaW4gR2VuZXJhdG9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XG4gICAgICAgICAgICAvKiBTdGFydCByZW5kZXIgbG9vcCBmdW5jdGlvbiAqL1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHJlYWR5KCk6IHZvaWQge1xuICAgICAgICAgICAgLyogRXhlY3V0ZSB3aGVuIHJlYWR5IGZ1bmN0aW9uICovXG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICAgICAgLyogVXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgbGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgICAgIC8qIExhdGUgdXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXIoKTogdm9pZCB7XG4gICAgICAgICAgICAvKiBBZnRlciB1cGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBmaXhlZCgpOiB2b2lkIHtcbiAgICAgICAgICAgIC8qIEZpeGVkIHVwZGF0ZSBwaHlzaWNzIHN0ZXAgZnVuY3Rpb24gKi9cbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICAgICAgLyogRGVzdHJveSBjb21wb25lbnQgZnVuY3Rpb24gKi9cbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgQkFCWUxPTiB7XG4gICAgLyoqXG4gICAgICogQmFieWxvbiB3ZWIgdmlkZW8gcGxheWVyIHBybyBjbGFzcyAoVW5pdHkgU3R5bGUgU2h1cmlrZW4gUGFydGljbGUgU3lzdGVtKVxuICAgICAqIEBjbGFzcyBXZWJWaWRlb1BsYXllciAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBXZWJWaWRlb1BsYXllciBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IGltcGxlbWVudHMgQkFCWUxPTi5JQXNzZXRQcmVsb2FkZXIge1xuICAgICAgICBwcml2YXRlIHZpZGVvTG9vcDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgdmlkZW9NdXRlZDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgdmlkZW9BbHBoYTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgdmlkZW9GYWRlZDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgdmlkZW9Qb3N0ZXI6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSB2aWRlb0ludmVydDpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHJpdmF0ZSB2aWRlb1NhbXBsZTpudW1iZXIgPSAzO1xuICAgICAgICBwcml2YXRlIHZpZGVvVm9sdW1lOm51bWJlciA9IDEuMDtcbiAgICAgICAgcHJpdmF0ZSB2aWRlb01pcG1hcHM6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIHZpZGVvUGxheWJhY2s6bnVtYmVyID0gMS4wO1xuICAgICAgICBwcml2YXRlIHZpZGVvUGxheU9uQXdha2U6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgIHByaXZhdGUgdmlkZW9QcmVsb2FkZXJVcmw6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSB2aWRlb0Jsb2JVcmw6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSB2aWRlb1ByZWxvYWQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2U6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHB1YmxpYyBnZXRWaWRlb01hdGVyaWFsKCk6QkFCWUxPTi5TdGFuZGFyZE1hdGVyaWFsIHsgcmV0dXJuIHRoaXMubV92aWRlb01hdGVyaWFsOyB9XG4gICAgICAgIHB1YmxpYyBnZXRWaWRlb1RleHR1cmUoKTpCQUJZTE9OLlZpZGVvVGV4dHVyZSB7IHJldHVybiB0aGlzLm1fdmlkZW9UZXh0dXJlOyB9XG4gICAgICAgIHB1YmxpYyBnZXRWaWRlb0VsZW1lbnQoKTpIVE1MVmlkZW9FbGVtZW50IHsgcmV0dXJuICh0aGlzLm1fdmlkZW9UZXh0dXJlICE9IG51bGwpID8gdGhpcy5tX3ZpZGVvVGV4dHVyZS52aWRlbyA6IG51bGw7IH1cbiAgICAgICAgcHVibGljIGdldFZpZGVvU2NyZWVuKCk6QkFCWUxPTi5BYnN0cmFjdE1lc2ggeyByZXR1cm4gdGhpcy5tX2Fic3RyYWN0TWVzaDsgfVxuICAgICAgICBwdWJsaWMgZ2V0VmlkZW9CbG9iVXJsKCk6c3RyaW5nIHsgcmV0dXJuIHRoaXMudmlkZW9CbG9iVXJsOyB9XG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHZpZGVvIGNsaXAgaXMgcmVhZHkgKi9cbiAgICAgICAgcHVibGljIG9uUmVhZHlPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLlZpZGVvVGV4dHVyZT4oKTtcblxuICAgICAgICBwcm90ZWN0ZWQgbV9hYnN0cmFjdE1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV92aWRlb1RleHR1cmU6QkFCWUxPTi5WaWRlb1RleHR1cmUgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbV92aWRlb01hdGVyaWFsOkJBQllMT04uU3RhbmRhcmRNYXRlcmlhbCA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBtX2RpZmZ1c2VJbnRlbnNpdHk6bnVtYmVyID0gMS4wO1xuXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHsgdGhpcy5hd2FrZVdlYlZpZGVvUGxheWVyKCk7IH1cbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IHRoaXMuZGVzdHJveVdlYlZpZGVvUGxheWVyKCk7IH1cblxuICAgICAgICBwcm90ZWN0ZWQgYXdha2VXZWJWaWRlb1BsYXllcigpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy52aWRlb0xvb3AgPSB0aGlzLmdldFByb3BlcnR5KFwibG9vcGluZ1wiLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnZpZGVvTXV0ZWQgPSB0aGlzLmdldFByb3BlcnR5KFwibXV0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy52aWRlb0ludmVydCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbnZlcnR5XCIsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52aWRlb1NhbXBsZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzYW1wbGluZ1wiLCAzKTtcbiAgICAgICAgICAgIHRoaXMudmlkZW9Wb2x1bWUgPSB0aGlzLmdldFByb3BlcnR5KFwidm9sdW1lXCIsIDEuMCk7XG4gICAgICAgICAgICB0aGlzLnZpZGVvTWlwbWFwcyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtaXBtYXBzXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMudmlkZW9BbHBoYSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ0ZXh0dXJlYWxwaGFcIiwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy52aWRlb0ZhZGVkID0gdGhpcy5nZXRQcm9wZXJ0eShcImRpZmZ1c2VhbHBoYVwiLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWJhY2sgPSB0aGlzLmdldFByb3BlcnR5KFwicGxheWJhY2tzcGVlZFwiLCAxLjApO1xuICAgICAgICAgICAgdGhpcy52aWRlb1BsYXlPbkF3YWtlID0gdGhpcy5nZXRQcm9wZXJ0eShcInBsYXlvbmF3YWtlXCIsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52aWRlb1ByZWxvYWQgPSB0aGlzLmdldFByb3BlcnR5KFwicHJlbG9hZFwiLCB0aGlzLnZpZGVvUHJlbG9hZCk7XG4gICAgICAgICAgICB0aGlzLm1fZGlmZnVzZUludGVuc2l0eSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbnRlbnNpdHlcIiwgMS4wKTtcbiAgICAgICAgICAgIHRoaXMubV9hYnN0cmFjdE1lc2ggPSB0aGlzLmdldEFic3RyYWN0TWVzaCgpO1xuICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgIGNvbnN0IHNldFBvc3Rlcjpib29sZWFuID0gdGhpcy5nZXRQcm9wZXJ0eShcInBvc3RlclwiKTtcbiAgICAgICAgICAgIGlmIChzZXRQb3N0ZXIgPT09IHRydWUgJiYgdGhpcy5tX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fYWJzdHJhY3RNZXNoLm1hdGVyaWFsIGluc3RhbmNlb2YgQkFCWUxPTi5QQlJNYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbC5hbGJlZG9UZXh0dXJlICE9IG51bGwgJiYgKDxhbnk+dGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbC5hbGJlZG9UZXh0dXJlKS51cmwgIT0gbnVsbCAmJiAoPGFueT50aGlzLm1fYWJzdHJhY3RNZXNoLm1hdGVyaWFsLmFsYmVkb1RleHR1cmUpLnVybCAhPT0gXCJcIikgeyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9Qb3N0ZXIgPSAoPGFueT50aGlzLm1fYWJzdHJhY3RNZXNoLm1hdGVyaWFsLmFsYmVkb1RleHR1cmUpLnVybC5yZXBsYWNlKFwiZGF0YTpcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwgaW5zdGFuY2VvZiBCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwuZGlmZnVzZVRleHR1cmUgIT0gbnVsbCAmJiAoPGFueT50aGlzLm1fYWJzdHJhY3RNZXNoLm1hdGVyaWFsLmRpZmZ1c2VUZXh0dXJlKS51cmwgIT0gbnVsbCAmJiAoPGFueT50aGlzLm1fYWJzdHJhY3RNZXNoLm1hdGVyaWFsLmRpZmZ1c2VUZXh0dXJlKS51cmwgIT09IFwiXCIpIHsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUG9zdGVyID0gKDxhbnk+dGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbC5kaWZmdXNlVGV4dHVyZSkudXJsLnJlcGxhY2UoXCJkYXRhOlwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC4uXG4gICAgICAgICAgICBjb25zdCB2aWRlb1VybDpzdHJpbmcgPSB0aGlzLmdldFByb3BlcnR5KFwidXJsXCIsIG51bGwpO1xuICAgICAgICAgICAgY29uc3QgdmlkZW9TcmM6QkFCWUxPTi5JVW5pdHlWaWRlb0NsaXAgPSB0aGlzLmdldFByb3BlcnR5KFwic291cmNlXCIsIG51bGwpO1xuICAgICAgICAgICAgbGV0IHBsYXlVcmw6c3RyaW5nID0gdmlkZW9Vcmw7XG4gICAgICAgICAgICBpZiAodmlkZW9TcmMgIT0gbnVsbCAmJiB2aWRlb1NyYy5maWxlbmFtZSAhPSBudWxsICYmIHZpZGVvU3JjLmZpbGVuYW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vdFVybDpzdHJpbmcgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRSb290VXJsKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgIHBsYXlVcmwgPSAocm9vdFVybCArIHZpZGVvU3JjLmZpbGVuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwbGF5VXJsICE9IG51bGwgJiYgcGxheVVybCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvUHJlbG9hZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUHJlbG9hZGVyVXJsID0gcGxheVVybDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERhdGFTb3VyY2UocGxheVVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95V2ViVmlkZW9QbGF5ZXIoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMubV9hYnN0cmFjdE1lc2ggPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb1RleHR1cmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb01hdGVyaWFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9NYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvTWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXZva2VWaWRlb0Jsb2JVcmwoKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdmlkZW8gcmVhZHkgc3RhdHVzXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgaXNSZWFkeSgpOmJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldFZpZGVvRWxlbWVudCgpICE9IG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSB2aWRlbyBwbGF5aW5nIHN0YXR1c1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGlzUGxheWluZygpOmJvb2xlYW4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh2aWRlbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKHZpZGVvLnBhdXNlZCA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdmlkZW8gcGF1c2VkIHN0YXR1c1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGlzUGF1c2VkKCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvOkhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAodmlkZW8ucGF1c2VkID09PSB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYXkgdGhlIHZpZGVvIHRyYWNrXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgcGxheSgpOmJvb2xlYW4ge1xuICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLkhhc0F1ZGlvQ29udGV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFBsYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQkFCWUxPTi5FbmdpbmUuYXVkaW9FbmdpbmUub25BdWRpb1VubG9ja2VkT2JzZXJ2YWJsZS5hZGRPbmNlKCgpPT57IHRoaXMuaW50ZXJuYWxQbGF5KCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBpbnRlcm5hbFBsYXkoKTp2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRQbGF5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUuYWRkT25jZSgoKT0+eyB0aGlzLmNoZWNrZWRQbGF5KCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgY2hlY2tlZFBsYXkoKTp2b2lkIHtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvOkhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2aWRlby5wbGF5KCkudGhlbigoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAodmlkZW8ucGF1c2VkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRSZVBsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgY2hlY2tlZFJlUGxheSgpOnZvaWQge1xuICAgICAgICAgICAgY29uc3QgdmlkZW86SFRNTFZpZGVvRWxlbWVudCA9IHRoaXMuZ2V0VmlkZW9FbGVtZW50KCk7XG4gICAgICAgICAgICBpZiAodmlkZW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZpZGVvLnBsYXkoKS50aGVuKCgpID0+IHsgLyogRG8gTm90aGluZyAqL30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQYXVzZSB0aGUgdmlkZW8gdHJhY2tcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBwYXVzZSgpOmJvb2xlYW4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh2aWRlbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmlkZW8ucGF1c2UoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogTXV0ZSB0aGUgdmlkZW8gdHJhY2tcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBtdXRlKCk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvOkhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2aWRlby5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVubXV0ZSB0aGUgdmlkZW8gdHJhY2tcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyB1bm11dGUoKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgdmlkZW86SFRNTFZpZGVvRWxlbWVudCA9IHRoaXMuZ2V0VmlkZW9FbGVtZW50KCk7XG4gICAgICAgICAgICBpZiAodmlkZW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZpZGVvLm11dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHZpZGVvIHZvbHVtZVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGdldFZvbHVtZSgpOm51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh2aWRlbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmlkZW8udm9sdW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgdmlkZW8gdm9sdW1lXG4gICAgICAgICAqIEBwYXJhbSB2b2x1bWUgRGVmaW5lIHRoZSBuZXcgdm9sdW1lIG9mIHRoZSBzb3VuZFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldFZvbHVtZSh2b2x1bWU6bnVtYmVyKTpib29sZWFuIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgdmlkZW86SFRNTFZpZGVvRWxlbWVudCA9IHRoaXMuZ2V0VmlkZW9FbGVtZW50KCk7XG4gICAgICAgICAgICBpZiAodmlkZW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZpZGVvLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiogU2V0IHZpZGVvIGRhdGEgc291cmNlICovXG4gICAgICAgIHB1YmxpYyBzZXREYXRhU291cmNlKHNvdXJjZTpzdHJpbmd8c3RyaW5nW118SFRNTFZpZGVvRWxlbWVudCk6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5tX2Fic3RyYWN0TWVzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gLi5cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgVmlkZW8gTWF0ZXJpYWxcbiAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fdmlkZW9NYXRlcmlhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsID0gbmV3IEJBQllMT04uU3RhbmRhcmRNYXRlcmlhbCh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuVmlkZW9NYXRcIiwgdGhpcy5zY2VuZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLnJvdWdobmVzcyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IG5ldyBCQUJZTE9OLkNvbG9yMygxLDEsMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLmVtaXNzaXZlQ29sb3IgPSBuZXcgQkFCWUxPTi5Db2xvcjMoMSwxLDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9NYXRlcmlhbC51c2VBbHBoYUZyb21EaWZmdXNlVGV4dHVyZSA9IHRoaXMudmlkZW9GYWRlZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbCA9IHRoaXMubV92aWRlb01hdGVyaWFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgIC8vIFNldHVwIFZpZGVvIFRleHR1cmVcbiAgICAgICAgICAgICAgICAvLyAuLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fdmlkZW9NYXRlcmlhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLmRpZmZ1c2VUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb1RleHR1cmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZSA9IG5ldyBCQUJZTE9OLlZpZGVvVGV4dHVyZSh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuVmlkZW9UZXhcIiwgc291cmNlLCB0aGlzLnNjZW5lLCB0aGlzLnZpZGVvTWlwbWFwcywgdGhpcy52aWRlb0ludmVydCwgdGhpcy52aWRlb1NhbXBsZSwgeyBhdXRvVXBkYXRlVGV4dHVyZTogdHJ1ZSwgcG9zdGVyOiB0aGlzLnZpZGVvUG9zdGVyIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3ZpZGVvVGV4dHVyZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlLmhhc0FscGhhID0gdGhpcy52aWRlb0FscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb1RleHR1cmUudmlkZW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUudmlkZW8ubG9vcCA9IHRoaXMudmlkZW9Mb29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUudmlkZW8ubXV0ZWQgPSB0aGlzLnZpZGVvTXV0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS52aWRlby52b2x1bWUgPSB0aGlzLnZpZGVvVm9sdW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUudmlkZW8ucGxheWJhY2tSYXRlID0gdGhpcy52aWRlb1BsYXliYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZGRhdGFcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblJlYWR5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblJlYWR5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy5tX3ZpZGVvVGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9QbGF5T25Bd2FrZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlLnZpZGVvLmxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3ZpZGVvVGV4dHVyZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlLmxldmVsID0gdGhpcy5tX2RpZmZ1c2VJbnRlbnNpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9NYXRlcmlhbC5kaWZmdXNlVGV4dHVyZSA9IHRoaXMubV92aWRlb1RleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyB2aWRlbyBtZXNoIG9yIG1hdGVyaWFsIGF2YWlsYWJsZSBmb3I6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBSZXZva2VzIHRoZSBjdXJyZW50IHZpZGVvIGJsb2IgdXJsIGFuZCByZWxlYXNlcyByZXNvdWNlcyAqL1xuICAgICAgICBwdWJsaWMgcmV2b2tlVmlkZW9CbG9iVXJsKCk6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWRlb0Jsb2JVcmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodGhpcy52aWRlb0Jsb2JVcmwpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9CbG9iVXJsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiogQWRkIHZpZGVvIHByZWxvYWRlciBhc3NldCB0YXNrcyAoaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9kaXZpbmdEZWVwZXIvaW1wb3J0ZXJzL2Fzc2V0TWFuYWdlcikgKi9cbiAgICAgICAgcHVibGljIGFkZFByZWxvYWRlclRhc2tzKGFzc2V0c01hbmFnZXI6QkFCWUxPTi5QcmVsb2FkQXNzZXRzTWFuYWdlcik6dm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWRlb1ByZWxvYWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhc3NldFRhc2s6QkFCWUxPTi5CaW5hcnlGaWxlQXNzZXRUYXNrID0gYXNzZXRzTWFuYWdlci5hZGRCaW5hcnlGaWxlVGFzaygodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLlZpZGVvVGFza1wiKSwgdGhpcy52aWRlb1ByZWxvYWRlclVybCk7XG4gICAgICAgICAgICAgICAgYXNzZXRUYXNrLm9uU3VjY2VzcyA9ICh0YXNrOkJBQllMT04uQmluYXJ5RmlsZUFzc2V0VGFzaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJldm9rZVZpZGVvQmxvYlVybCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQmxvYlVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3Rhc2suZGF0YV0pKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhU291cmNlKHRoaXMudmlkZW9CbG9iVXJsKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFzc2V0VGFzay5vbkVycm9yID0gKHRhc2s6IEJBQllMT04uQmluYXJ5RmlsZUFzc2V0VGFzaywgbWVzc2FnZT86IHN0cmluZywgZXhjZXB0aW9uPzogYW55KSA9PiB7IGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXhjZXB0aW9uKTsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iXX0=

// Project Shader Fixes
if (BABYLON.Effect.IncludesShadersStore["pbrBlockFinalColorComposition"]) BABYLON.Effect.IncludesShadersStore["pbrBlockFinalColorComposition"] = BABYLON.Effect.IncludesShadersStore["pbrBlockFinalColorComposition"].replace("finalColor.rgb*=lightmapColor.rgb", "finalColor.rgb*=(lightmapColor.rgb+finalEmissive.rgb)");
if (BABYLON.Effect.ShadersStore["defaultPixelShader"]) BABYLON.Effect.ShadersStore["defaultPixelShader"] = BABYLON.Effect.ShadersStore["defaultPixelShader"].replace("color.rgb *= lightmapColor.rgb", "color.rgb *= (lightmapColor.rgb + finalEmissive.rgb)");
